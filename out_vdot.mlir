// -----// IR Dump Before Inliner (inline) ('builtin.module' operation) //----- //
#loc = loc("/home/meiziyuan/triton/test_vdot.py":10:0)
#loc16 = loc("/root/miniconda3/envs/vllm/lib/python3.12/site-packages/triton/language/standard.py":280:0)
#loc18 = loc(unknown)
#loc21 = loc("/root/miniconda3/envs/vllm/lib/python3.12/site-packages/triton/language/standard.py":255:0)
module {
  tt.func public @dot_kernel(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/home/meiziyuan/triton/test_vdot.py":10:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/home/meiziyuan/triton/test_vdot.py":10:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/home/meiziyuan/triton/test_vdot.py":10:0), %arg3: i32 loc("/home/meiziyuan/triton/test_vdot.py":10:0)) attributes {noinline = false} {
    %0 = tt.get_program_id x : i32 loc(#loc1)
    %c32_i32 = arith.constant 32 : i32 loc(#loc2)
    %c32_i32_0 = arith.constant 32 : i32 loc(#loc2)
    %1 = arith.extsi %0 : i32 to i64 loc(#loc2)
    %2 = arith.extsi %c32_i32_0 : i32 to i64 loc(#loc2)
    %3 = arith.muli %1, %2 : i64 loc(#loc2)
    %c2147483647_i64 = arith.constant 2147483647 : i64 loc(#loc2)
    %c-2147483648_i64 = arith.constant -2147483648 : i64 loc(#loc2)
    %4 = arith.cmpi sle, %3, %c2147483647_i64 : i64 loc(#loc2)
    %5 = arith.cmpi sge, %3, %c-2147483648_i64 : i64 loc(#loc2)
    %6 = arith.andi %4, %5 : i1 loc(#loc2)
    %7 = arith.muli %0, %c32_i32_0 : i32 loc(#loc2)
    %8 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32> loc(#loc3)
    %9 = tt.splat %7 : i32 -> tensor<32xi32> loc(#loc4)
    %10 = arith.extsi %9 : tensor<32xi32> to tensor<32xi64> loc(#loc4)
    %11 = arith.extsi %8 : tensor<32xi32> to tensor<32xi64> loc(#loc4)
    %12 = arith.addi %10, %11 : tensor<32xi64> loc(#loc4)
    %c2147483647_i64_1 = arith.constant 2147483647 : i64 loc(#loc4)
    %c-2147483648_i64_2 = arith.constant -2147483648 : i64 loc(#loc4)
    %cst = arith.constant dense<2147483647> : tensor<32xi64> loc(#loc4)
    %13 = arith.cmpi sle, %12, %cst : tensor<32xi64> loc(#loc4)
    %cst_3 = arith.constant dense<-2147483648> : tensor<32xi64> loc(#loc4)
    %14 = arith.cmpi sge, %12, %cst_3 : tensor<32xi64> loc(#loc4)
    %15 = arith.andi %13, %14 : tensor<32xi1> loc(#loc4)
    %16 = arith.addi %9, %8 : tensor<32xi32> loc(#loc4)
    %17 = tt.splat %arg3 : i32 -> tensor<32xi32> loc(#loc5)
    %18 = arith.cmpi slt, %16, %17 : tensor<32xi32> loc(#loc5)
    %c1_i32 = arith.constant 1 : i32 loc(#loc6)
    %c1_i32_4 = arith.constant 1 : i32 loc(#loc6)
    %cst_5 = arith.constant dense<1> : tensor<32xi32> loc(#loc6)
    %19 = arith.extsi %cst_5 : tensor<32xi32> to tensor<32xi64> loc(#loc6)
    %20 = arith.extsi %16 : tensor<32xi32> to tensor<32xi64> loc(#loc6)
    %21 = arith.muli %19, %20 : tensor<32xi64> loc(#loc6)
    %c2147483647_i64_6 = arith.constant 2147483647 : i64 loc(#loc6)
    %c-2147483648_i64_7 = arith.constant -2147483648 : i64 loc(#loc6)
    %cst_8 = arith.constant dense<2147483647> : tensor<32xi64> loc(#loc6)
    %22 = arith.cmpi sle, %21, %cst_8 : tensor<32xi64> loc(#loc6)
    %cst_9 = arith.constant dense<-2147483648> : tensor<32xi64> loc(#loc6)
    %23 = arith.cmpi sge, %21, %cst_9 : tensor<32xi64> loc(#loc6)
    %24 = arith.andi %22, %23 : tensor<32xi1> loc(#loc6)
    %25 = arith.muli %cst_5, %16 : tensor<32xi32> loc(#loc6)
    %26 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<32x!tt.ptr<f32>> loc(#loc7)
    %27 = tt.addptr %26, %25 : tensor<32x!tt.ptr<f32>>, tensor<32xi32> loc(#loc7)
    %28 = tt.load %27, %18 : tensor<32x!tt.ptr<f32>> loc(#loc8)
    %c1_i32_10 = arith.constant 1 : i32 loc(#loc9)
    %c1_i32_11 = arith.constant 1 : i32 loc(#loc9)
    %cst_12 = arith.constant dense<1> : tensor<32xi32> loc(#loc9)
    %29 = arith.extsi %cst_12 : tensor<32xi32> to tensor<32xi64> loc(#loc9)
    %30 = arith.extsi %16 : tensor<32xi32> to tensor<32xi64> loc(#loc9)
    %31 = arith.muli %29, %30 : tensor<32xi64> loc(#loc9)
    %c2147483647_i64_13 = arith.constant 2147483647 : i64 loc(#loc9)
    %c-2147483648_i64_14 = arith.constant -2147483648 : i64 loc(#loc9)
    %cst_15 = arith.constant dense<2147483647> : tensor<32xi64> loc(#loc9)
    %32 = arith.cmpi sle, %31, %cst_15 : tensor<32xi64> loc(#loc9)
    %cst_16 = arith.constant dense<-2147483648> : tensor<32xi64> loc(#loc9)
    %33 = arith.cmpi sge, %31, %cst_16 : tensor<32xi64> loc(#loc9)
    %34 = arith.andi %32, %33 : tensor<32xi1> loc(#loc9)
    %35 = arith.muli %cst_12, %16 : tensor<32xi32> loc(#loc9)
    %36 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<32x!tt.ptr<f32>> loc(#loc10)
    %37 = tt.addptr %36, %35 : tensor<32x!tt.ptr<f32>>, tensor<32xi32> loc(#loc10)
    %38 = tt.load %37, %18 : tensor<32x!tt.ptr<f32>> loc(#loc11)
    %39 = arith.mulf %28, %38 : tensor<32xf32> loc(#loc12)
    %40 = tt.call @"sum__fp32S32S__(1,)cNone_(2,)cconstexpr_False__(3,)cNone"(%39) : (tensor<32xf32>) -> f32 loc(#loc13)
    %true = arith.constant true loc(#loc14)
    %41 = tt.atomic_rmw fadd, acq_rel, gpu, %arg2, %40, %true : (!tt.ptr<f32>, f32, i1) -> f32 loc(#loc14)
    tt.return loc(#loc15)
  } loc(#loc)
  tt.func private @"sum__fp32S32S__(1,)cNone_(2,)cconstexpr_False__(3,)cNone"(%arg0: tensor<32xf32> loc("/root/miniconda3/envs/vllm/lib/python3.12/site-packages/triton/language/standard.py":280:0)) -> f32 attributes {noinline = false} {
    %0 = tt.reshape %arg0 allow_reorder : tensor<32xf32> -> tensor<32xf32> loc(#loc17)
    %1 = "tt.reduce"(%0) <{axis = 0 : i32}> ({
    ^bb0(%arg1: f32 loc(unknown), %arg2: f32 loc(unknown)):
      %3 = tt.call @_sum_combine__fp32_fp32__(%arg1, %arg2) : (f32, f32) -> f32 loc(#loc17)
      tt.reduce.return %3 : f32 loc(#loc17)
    }) : (tensor<32xf32>) -> f32 loc(#loc17)
    tt.return %1 : f32 loc(#loc19)
  ^bb1:  // no predecessors
    %2 = ub.poison : f32 loc(#loc20)
    tt.return %2 : f32 loc(#loc20)
  } loc(#loc16)
  tt.func private @_sum_combine__fp32_fp32__(%arg0: f32 loc("/root/miniconda3/envs/vllm/lib/python3.12/site-packages/triton/language/standard.py":255:0), %arg1: f32 loc("/root/miniconda3/envs/vllm/lib/python3.12/site-packages/triton/language/standard.py":255:0)) -> f32 attributes {noinline = false} {
    %0 = arith.addf %arg0, %arg1 : f32 loc(#loc22)
    tt.return %0 : f32 loc(#loc23)
  ^bb1:  // no predecessors
    %1 = ub.poison : f32 loc(#loc24)
    tt.return %1 : f32 loc(#loc24)
  } loc(#loc21)
} loc(#loc)
#loc1 = loc("/home/meiziyuan/triton/test_vdot.py":19:24)
#loc2 = loc("/home/meiziyuan/triton/test_vdot.py":20:19)
#loc3 = loc("/home/meiziyuan/triton/test_vdot.py":20:45)
#loc4 = loc("/home/meiziyuan/triton/test_vdot.py":20:32)
#loc5 = loc("/home/meiziyuan/triton/test_vdot.py":21:20)
#loc6 = loc("/home/meiziyuan/triton/test_vdot.py":23:41)
#loc7 = loc("/home/meiziyuan/triton/test_vdot.py":23:28)
#loc8 = loc("/home/meiziyuan/triton/test_vdot.py":23:18)
#loc9 = loc("/home/meiziyuan/triton/test_vdot.py":24:47)
#loc10 = loc("/home/meiziyuan/triton/test_vdot.py":24:32)
#loc11 = loc("/home/meiziyuan/triton/test_vdot.py":24:20)
#loc12 = loc("/home/meiziyuan/triton/test_vdot.py":26:23)
#loc13 = loc("/home/meiziyuan/triton/test_vdot.py":26:17)
#loc14 = loc("/home/meiziyuan/triton/test_vdot.py":27:27)
#loc15 = loc("/home/meiziyuan/triton/test_vdot.py":27:4)
#loc17 = loc("/root/miniconda3/envs/vllm/lib/python3.12/site-packages/triton/language/standard.py":286:36)
#loc19 = loc("/root/miniconda3/envs/vllm/lib/python3.12/site-packages/triton/language/standard.py":286:11)
#loc20 = loc("/root/miniconda3/envs/vllm/lib/python3.12/site-packages/triton/language/standard.py":286:4)
#loc22 = loc("/root/miniconda3/envs/vllm/lib/python3.12/site-packages/triton/language/standard.py":256:15)
#loc23 = loc("/root/miniconda3/envs/vllm/lib/python3.12/site-packages/triton/language/standard.py":256:11)
#loc24 = loc("/root/miniconda3/envs/vllm/lib/python3.12/site-packages/triton/language/standard.py":256:4)


// -----// IR Dump Before Canonicalizer (canonicalize) ('tt.func' operation: @_sum_combine__fp32_fp32__) //----- //
#loc = loc("/home/meiziyuan/triton/test_vdot.py":10:0)
#loc16 = loc("/root/miniconda3/envs/vllm/lib/python3.12/site-packages/triton/language/standard.py":280:0)
#loc18 = loc(unknown)
#loc21 = loc("/root/miniconda3/envs/vllm/lib/python3.12/site-packages/triton/language/standard.py":255:0)
module {
  tt.func public @dot_kernel(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/home/meiziyuan/triton/test_vdot.py":10:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/home/meiziyuan/triton/test_vdot.py":10:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/home/meiziyuan/triton/test_vdot.py":10:0), %arg3: i32 loc("/home/meiziyuan/triton/test_vdot.py":10:0)) attributes {noinline = false} {
    %0 = tt.get_program_id x : i32 loc(#loc1)
    %c32_i32 = arith.constant 32 : i32 loc(#loc2)
    %c32_i32_0 = arith.constant 32 : i32 loc(#loc2)
    %1 = arith.extsi %0 : i32 to i64 loc(#loc2)
    %2 = arith.extsi %c32_i32_0 : i32 to i64 loc(#loc2)
    %3 = arith.muli %1, %2 : i64 loc(#loc2)
    %c2147483647_i64 = arith.constant 2147483647 : i64 loc(#loc2)
    %c-2147483648_i64 = arith.constant -2147483648 : i64 loc(#loc2)
    %4 = arith.cmpi sle, %3, %c2147483647_i64 : i64 loc(#loc2)
    %5 = arith.cmpi sge, %3, %c-2147483648_i64 : i64 loc(#loc2)
    %6 = arith.andi %4, %5 : i1 loc(#loc2)
    %7 = arith.muli %0, %c32_i32_0 : i32 loc(#loc2)
    %8 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32> loc(#loc3)
    %9 = tt.splat %7 : i32 -> tensor<32xi32> loc(#loc4)
    %10 = arith.extsi %9 : tensor<32xi32> to tensor<32xi64> loc(#loc4)
    %11 = arith.extsi %8 : tensor<32xi32> to tensor<32xi64> loc(#loc4)
    %12 = arith.addi %10, %11 : tensor<32xi64> loc(#loc4)
    %c2147483647_i64_1 = arith.constant 2147483647 : i64 loc(#loc4)
    %c-2147483648_i64_2 = arith.constant -2147483648 : i64 loc(#loc4)
    %cst = arith.constant dense<2147483647> : tensor<32xi64> loc(#loc4)
    %13 = arith.cmpi sle, %12, %cst : tensor<32xi64> loc(#loc4)
    %cst_3 = arith.constant dense<-2147483648> : tensor<32xi64> loc(#loc4)
    %14 = arith.cmpi sge, %12, %cst_3 : tensor<32xi64> loc(#loc4)
    %15 = arith.andi %13, %14 : tensor<32xi1> loc(#loc4)
    %16 = arith.addi %9, %8 : tensor<32xi32> loc(#loc4)
    %17 = tt.splat %arg3 : i32 -> tensor<32xi32> loc(#loc5)
    %18 = arith.cmpi slt, %16, %17 : tensor<32xi32> loc(#loc5)
    %c1_i32 = arith.constant 1 : i32 loc(#loc6)
    %c1_i32_4 = arith.constant 1 : i32 loc(#loc6)
    %cst_5 = arith.constant dense<1> : tensor<32xi32> loc(#loc6)
    %19 = arith.extsi %cst_5 : tensor<32xi32> to tensor<32xi64> loc(#loc6)
    %20 = arith.extsi %16 : tensor<32xi32> to tensor<32xi64> loc(#loc6)
    %21 = arith.muli %19, %20 : tensor<32xi64> loc(#loc6)
    %c2147483647_i64_6 = arith.constant 2147483647 : i64 loc(#loc6)
    %c-2147483648_i64_7 = arith.constant -2147483648 : i64 loc(#loc6)
    %cst_8 = arith.constant dense<2147483647> : tensor<32xi64> loc(#loc6)
    %22 = arith.cmpi sle, %21, %cst_8 : tensor<32xi64> loc(#loc6)
    %cst_9 = arith.constant dense<-2147483648> : tensor<32xi64> loc(#loc6)
    %23 = arith.cmpi sge, %21, %cst_9 : tensor<32xi64> loc(#loc6)
    %24 = arith.andi %22, %23 : tensor<32xi1> loc(#loc6)
    %25 = arith.muli %cst_5, %16 : tensor<32xi32> loc(#loc6)
    %26 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<32x!tt.ptr<f32>> loc(#loc7)
    %27 = tt.addptr %26, %25 : tensor<32x!tt.ptr<f32>>, tensor<32xi32> loc(#loc7)
    %28 = tt.load %27, %18 : tensor<32x!tt.ptr<f32>> loc(#loc8)
    %c1_i32_10 = arith.constant 1 : i32 loc(#loc9)
    %c1_i32_11 = arith.constant 1 : i32 loc(#loc9)
    %cst_12 = arith.constant dense<1> : tensor<32xi32> loc(#loc9)
    %29 = arith.extsi %cst_12 : tensor<32xi32> to tensor<32xi64> loc(#loc9)
    %30 = arith.extsi %16 : tensor<32xi32> to tensor<32xi64> loc(#loc9)
    %31 = arith.muli %29, %30 : tensor<32xi64> loc(#loc9)
    %c2147483647_i64_13 = arith.constant 2147483647 : i64 loc(#loc9)
    %c-2147483648_i64_14 = arith.constant -2147483648 : i64 loc(#loc9)
    %cst_15 = arith.constant dense<2147483647> : tensor<32xi64> loc(#loc9)
    %32 = arith.cmpi sle, %31, %cst_15 : tensor<32xi64> loc(#loc9)
    %cst_16 = arith.constant dense<-2147483648> : tensor<32xi64> loc(#loc9)
    %33 = arith.cmpi sge, %31, %cst_16 : tensor<32xi64> loc(#loc9)
    %34 = arith.andi %32, %33 : tensor<32xi1> loc(#loc9)
    %35 = arith.muli %cst_12, %16 : tensor<32xi32> loc(#loc9)
    %36 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<32x!tt.ptr<f32>> loc(#loc10)
    %37 = tt.addptr %36, %35 : tensor<32x!tt.ptr<f32>>, tensor<32xi32> loc(#loc10)
    %38 = tt.load %37, %18 : tensor<32x!tt.ptr<f32>> loc(#loc11)
    %39 = arith.mulf %28, %38 : tensor<32xf32> loc(#loc12)
    %40 = tt.call @"sum__fp32S32S__(1,)cNone_(2,)cconstexpr_False__(3,)cNone"(%39) : (tensor<32xf32>) -> f32 loc(#loc13)
    %true = arith.constant true loc(#loc14)
    %41 = tt.atomic_rmw fadd, acq_rel, gpu, %arg2, %40, %true : (!tt.ptr<f32>, f32, i1) -> f32 loc(#loc14)
    tt.return loc(#loc15)
  } loc(#loc)
  tt.func private @"sum__fp32S32S__(1,)cNone_(2,)cconstexpr_False__(3,)cNone"(%arg0: tensor<32xf32> loc("/root/miniconda3/envs/vllm/lib/python3.12/site-packages/triton/language/standard.py":280:0)) -> f32 attributes {noinline = false} {
    %0 = tt.reshape %arg0 allow_reorder : tensor<32xf32> -> tensor<32xf32> loc(#loc17)
    %1 = "tt.reduce"(%0) <{axis = 0 : i32}> ({
    ^bb0(%arg1: f32 loc(unknown), %arg2: f32 loc(unknown)):
      %3 = tt.call @_sum_combine__fp32_fp32__(%arg1, %arg2) : (f32, f32) -> f32 loc(#loc17)
      tt.reduce.return %3 : f32 loc(#loc17)
    }) : (tensor<32xf32>) -> f32 loc(#loc17)
    tt.return %1 : f32 loc(#loc19)
  ^bb1:  // no predecessors
    %2 = ub.poison : f32 loc(#loc20)
    tt.return %2 : f32 loc(#loc20)
  } loc(#loc16)
  tt.func private @_sum_combine__fp32_fp32__(%arg0: f32 loc("/root/miniconda3/envs/vllm/lib/python3.12/site-packages/triton/language/standard.py":255:0), %arg1: f32 loc("/root/miniconda3/envs/vllm/lib/python3.12/site-packages/triton/language/standard.py":255:0)) -> f32 attributes {noinline = false} {
    %0 = arith.addf %arg0, %arg1 : f32 loc(#loc22)
    tt.return %0 : f32 loc(#loc23)
  ^bb1:  // no predecessors
    %1 = ub.poison : f32 loc(#loc24)
    tt.return %1 : f32 loc(#loc24)
  } loc(#loc21)
} loc(#loc)
#loc1 = loc("/home/meiziyuan/triton/test_vdot.py":19:24)
#loc2 = loc("/home/meiziyuan/triton/test_vdot.py":20:19)
#loc3 = loc("/home/meiziyuan/triton/test_vdot.py":20:45)
#loc4 = loc("/home/meiziyuan/triton/test_vdot.py":20:32)
#loc5 = loc("/home/meiziyuan/triton/test_vdot.py":21:20)
#loc6 = loc("/home/meiziyuan/triton/test_vdot.py":23:41)
#loc7 = loc("/home/meiziyuan/triton/test_vdot.py":23:28)
#loc8 = loc("/home/meiziyuan/triton/test_vdot.py":23:18)
#loc9 = loc("/home/meiziyuan/triton/test_vdot.py":24:47)
#loc10 = loc("/home/meiziyuan/triton/test_vdot.py":24:32)
#loc11 = loc("/home/meiziyuan/triton/test_vdot.py":24:20)
#loc12 = loc("/home/meiziyuan/triton/test_vdot.py":26:23)
#loc13 = loc("/home/meiziyuan/triton/test_vdot.py":26:17)
#loc14 = loc("/home/meiziyuan/triton/test_vdot.py":27:27)
#loc15 = loc("/home/meiziyuan/triton/test_vdot.py":27:4)
#loc17 = loc("/root/miniconda3/envs/vllm/lib/python3.12/site-packages/triton/language/standard.py":286:36)
#loc19 = loc("/root/miniconda3/envs/vllm/lib/python3.12/site-packages/triton/language/standard.py":286:11)
#loc20 = loc("/root/miniconda3/envs/vllm/lib/python3.12/site-packages/triton/language/standard.py":286:4)
#loc22 = loc("/root/miniconda3/envs/vllm/lib/python3.12/site-packages/triton/language/standard.py":256:15)
#loc23 = loc("/root/miniconda3/envs/vllm/lib/python3.12/site-packages/triton/language/standard.py":256:11)
#loc24 = loc("/root/miniconda3/envs/vllm/lib/python3.12/site-packages/triton/language/standard.py":256:4)


// -----// IR Dump Before Canonicalizer (canonicalize) ('tt.func' operation: @sum__fp32S32S__(1,)cNone_(2,)cconstexpr_False__(3,)cNone) //----- //
#loc = loc("/home/meiziyuan/triton/test_vdot.py":10:0)
#loc16 = loc("/root/miniconda3/envs/vllm/lib/python3.12/site-packages/triton/language/standard.py":280:0)
#loc18 = loc(unknown)
#loc21 = loc("/root/miniconda3/envs/vllm/lib/python3.12/site-packages/triton/language/standard.py":255:0)
module {
  tt.func public @dot_kernel(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/home/meiziyuan/triton/test_vdot.py":10:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/home/meiziyuan/triton/test_vdot.py":10:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/home/meiziyuan/triton/test_vdot.py":10:0), %arg3: i32 loc("/home/meiziyuan/triton/test_vdot.py":10:0)) attributes {noinline = false} {
    %0 = tt.get_program_id x : i32 loc(#loc1)
    %c32_i32 = arith.constant 32 : i32 loc(#loc2)
    %c32_i32_0 = arith.constant 32 : i32 loc(#loc2)
    %1 = arith.extsi %0 : i32 to i64 loc(#loc2)
    %2 = arith.extsi %c32_i32_0 : i32 to i64 loc(#loc2)
    %3 = arith.muli %1, %2 : i64 loc(#loc2)
    %c2147483647_i64 = arith.constant 2147483647 : i64 loc(#loc2)
    %c-2147483648_i64 = arith.constant -2147483648 : i64 loc(#loc2)
    %4 = arith.cmpi sle, %3, %c2147483647_i64 : i64 loc(#loc2)
    %5 = arith.cmpi sge, %3, %c-2147483648_i64 : i64 loc(#loc2)
    %6 = arith.andi %4, %5 : i1 loc(#loc2)
    %7 = arith.muli %0, %c32_i32_0 : i32 loc(#loc2)
    %8 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32> loc(#loc3)
    %9 = tt.splat %7 : i32 -> tensor<32xi32> loc(#loc4)
    %10 = arith.extsi %9 : tensor<32xi32> to tensor<32xi64> loc(#loc4)
    %11 = arith.extsi %8 : tensor<32xi32> to tensor<32xi64> loc(#loc4)
    %12 = arith.addi %10, %11 : tensor<32xi64> loc(#loc4)
    %c2147483647_i64_1 = arith.constant 2147483647 : i64 loc(#loc4)
    %c-2147483648_i64_2 = arith.constant -2147483648 : i64 loc(#loc4)
    %cst = arith.constant dense<2147483647> : tensor<32xi64> loc(#loc4)
    %13 = arith.cmpi sle, %12, %cst : tensor<32xi64> loc(#loc4)
    %cst_3 = arith.constant dense<-2147483648> : tensor<32xi64> loc(#loc4)
    %14 = arith.cmpi sge, %12, %cst_3 : tensor<32xi64> loc(#loc4)
    %15 = arith.andi %13, %14 : tensor<32xi1> loc(#loc4)
    %16 = arith.addi %9, %8 : tensor<32xi32> loc(#loc4)
    %17 = tt.splat %arg3 : i32 -> tensor<32xi32> loc(#loc5)
    %18 = arith.cmpi slt, %16, %17 : tensor<32xi32> loc(#loc5)
    %c1_i32 = arith.constant 1 : i32 loc(#loc6)
    %c1_i32_4 = arith.constant 1 : i32 loc(#loc6)
    %cst_5 = arith.constant dense<1> : tensor<32xi32> loc(#loc6)
    %19 = arith.extsi %cst_5 : tensor<32xi32> to tensor<32xi64> loc(#loc6)
    %20 = arith.extsi %16 : tensor<32xi32> to tensor<32xi64> loc(#loc6)
    %21 = arith.muli %19, %20 : tensor<32xi64> loc(#loc6)
    %c2147483647_i64_6 = arith.constant 2147483647 : i64 loc(#loc6)
    %c-2147483648_i64_7 = arith.constant -2147483648 : i64 loc(#loc6)
    %cst_8 = arith.constant dense<2147483647> : tensor<32xi64> loc(#loc6)
    %22 = arith.cmpi sle, %21, %cst_8 : tensor<32xi64> loc(#loc6)
    %cst_9 = arith.constant dense<-2147483648> : tensor<32xi64> loc(#loc6)
    %23 = arith.cmpi sge, %21, %cst_9 : tensor<32xi64> loc(#loc6)
    %24 = arith.andi %22, %23 : tensor<32xi1> loc(#loc6)
    %25 = arith.muli %cst_5, %16 : tensor<32xi32> loc(#loc6)
    %26 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<32x!tt.ptr<f32>> loc(#loc7)
    %27 = tt.addptr %26, %25 : tensor<32x!tt.ptr<f32>>, tensor<32xi32> loc(#loc7)
    %28 = tt.load %27, %18 : tensor<32x!tt.ptr<f32>> loc(#loc8)
    %c1_i32_10 = arith.constant 1 : i32 loc(#loc9)
    %c1_i32_11 = arith.constant 1 : i32 loc(#loc9)
    %cst_12 = arith.constant dense<1> : tensor<32xi32> loc(#loc9)
    %29 = arith.extsi %cst_12 : tensor<32xi32> to tensor<32xi64> loc(#loc9)
    %30 = arith.extsi %16 : tensor<32xi32> to tensor<32xi64> loc(#loc9)
    %31 = arith.muli %29, %30 : tensor<32xi64> loc(#loc9)
    %c2147483647_i64_13 = arith.constant 2147483647 : i64 loc(#loc9)
    %c-2147483648_i64_14 = arith.constant -2147483648 : i64 loc(#loc9)
    %cst_15 = arith.constant dense<2147483647> : tensor<32xi64> loc(#loc9)
    %32 = arith.cmpi sle, %31, %cst_15 : tensor<32xi64> loc(#loc9)
    %cst_16 = arith.constant dense<-2147483648> : tensor<32xi64> loc(#loc9)
    %33 = arith.cmpi sge, %31, %cst_16 : tensor<32xi64> loc(#loc9)
    %34 = arith.andi %32, %33 : tensor<32xi1> loc(#loc9)
    %35 = arith.muli %cst_12, %16 : tensor<32xi32> loc(#loc9)
    %36 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<32x!tt.ptr<f32>> loc(#loc10)
    %37 = tt.addptr %36, %35 : tensor<32x!tt.ptr<f32>>, tensor<32xi32> loc(#loc10)
    %38 = tt.load %37, %18 : tensor<32x!tt.ptr<f32>> loc(#loc11)
    %39 = arith.mulf %28, %38 : tensor<32xf32> loc(#loc12)
    %40 = tt.call @"sum__fp32S32S__(1,)cNone_(2,)cconstexpr_False__(3,)cNone"(%39) : (tensor<32xf32>) -> f32 loc(#loc13)
    %true = arith.constant true loc(#loc14)
    %41 = tt.atomic_rmw fadd, acq_rel, gpu, %arg2, %40, %true : (!tt.ptr<f32>, f32, i1) -> f32 loc(#loc14)
    tt.return loc(#loc15)
  } loc(#loc)
  tt.func private @"sum__fp32S32S__(1,)cNone_(2,)cconstexpr_False__(3,)cNone"(%arg0: tensor<32xf32> loc("/root/miniconda3/envs/vllm/lib/python3.12/site-packages/triton/language/standard.py":280:0)) -> f32 attributes {noinline = false} {
    %0 = tt.reshape %arg0 allow_reorder : tensor<32xf32> -> tensor<32xf32> loc(#loc17)
    %1 = "tt.reduce"(%0) <{axis = 0 : i32}> ({
    ^bb0(%arg1: f32 loc(unknown), %arg2: f32 loc(unknown)):
      %3 = tt.call @_sum_combine__fp32_fp32__(%arg1, %arg2) : (f32, f32) -> f32 loc(#loc17)
      tt.reduce.return %3 : f32 loc(#loc17)
    }) : (tensor<32xf32>) -> f32 loc(#loc17)
    tt.return %1 : f32 loc(#loc19)
  ^bb1:  // no predecessors
    %2 = ub.poison : f32 loc(#loc20)
    tt.return %2 : f32 loc(#loc20)
  } loc(#loc16)
  tt.func private @_sum_combine__fp32_fp32__(%arg0: f32 loc("/root/miniconda3/envs/vllm/lib/python3.12/site-packages/triton/language/standard.py":255:0), %arg1: f32 loc("/root/miniconda3/envs/vllm/lib/python3.12/site-packages/triton/language/standard.py":255:0)) -> f32 attributes {noinline = false} {
    %0 = arith.addf %arg0, %arg1 : f32 loc(#loc22)
    tt.return %0 : f32 loc(#loc23)
  } loc(#loc21)
} loc(#loc)
#loc1 = loc("/home/meiziyuan/triton/test_vdot.py":19:24)
#loc2 = loc("/home/meiziyuan/triton/test_vdot.py":20:19)
#loc3 = loc("/home/meiziyuan/triton/test_vdot.py":20:45)
#loc4 = loc("/home/meiziyuan/triton/test_vdot.py":20:32)
#loc5 = loc("/home/meiziyuan/triton/test_vdot.py":21:20)
#loc6 = loc("/home/meiziyuan/triton/test_vdot.py":23:41)
#loc7 = loc("/home/meiziyuan/triton/test_vdot.py":23:28)
#loc8 = loc("/home/meiziyuan/triton/test_vdot.py":23:18)
#loc9 = loc("/home/meiziyuan/triton/test_vdot.py":24:47)
#loc10 = loc("/home/meiziyuan/triton/test_vdot.py":24:32)
#loc11 = loc("/home/meiziyuan/triton/test_vdot.py":24:20)
#loc12 = loc("/home/meiziyuan/triton/test_vdot.py":26:23)
#loc13 = loc("/home/meiziyuan/triton/test_vdot.py":26:17)
#loc14 = loc("/home/meiziyuan/triton/test_vdot.py":27:27)
#loc15 = loc("/home/meiziyuan/triton/test_vdot.py":27:4)
#loc17 = loc("/root/miniconda3/envs/vllm/lib/python3.12/site-packages/triton/language/standard.py":286:36)
#loc19 = loc("/root/miniconda3/envs/vllm/lib/python3.12/site-packages/triton/language/standard.py":286:11)
#loc20 = loc("/root/miniconda3/envs/vllm/lib/python3.12/site-packages/triton/language/standard.py":286:4)
#loc22 = loc("/root/miniconda3/envs/vllm/lib/python3.12/site-packages/triton/language/standard.py":256:15)
#loc23 = loc("/root/miniconda3/envs/vllm/lib/python3.12/site-packages/triton/language/standard.py":256:11)


// -----// IR Dump Before Canonicalizer (canonicalize) ('tt.func' operation: @sum__fp32S32S__(1,)cNone_(2,)cconstexpr_False__(3,)cNone) //----- //
#loc = loc("/home/meiziyuan/triton/test_vdot.py":10:0)
#loc16 = loc("/root/miniconda3/envs/vllm/lib/python3.12/site-packages/triton/language/standard.py":280:0)
#loc18 = loc(unknown)
module {
  tt.func public @dot_kernel(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/home/meiziyuan/triton/test_vdot.py":10:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/home/meiziyuan/triton/test_vdot.py":10:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/home/meiziyuan/triton/test_vdot.py":10:0), %arg3: i32 loc("/home/meiziyuan/triton/test_vdot.py":10:0)) attributes {noinline = false} {
    %0 = tt.get_program_id x : i32 loc(#loc1)
    %c32_i32 = arith.constant 32 : i32 loc(#loc2)
    %c32_i32_0 = arith.constant 32 : i32 loc(#loc2)
    %1 = arith.extsi %0 : i32 to i64 loc(#loc2)
    %2 = arith.extsi %c32_i32_0 : i32 to i64 loc(#loc2)
    %3 = arith.muli %1, %2 : i64 loc(#loc2)
    %c2147483647_i64 = arith.constant 2147483647 : i64 loc(#loc2)
    %c-2147483648_i64 = arith.constant -2147483648 : i64 loc(#loc2)
    %4 = arith.cmpi sle, %3, %c2147483647_i64 : i64 loc(#loc2)
    %5 = arith.cmpi sge, %3, %c-2147483648_i64 : i64 loc(#loc2)
    %6 = arith.andi %4, %5 : i1 loc(#loc2)
    %7 = arith.muli %0, %c32_i32_0 : i32 loc(#loc2)
    %8 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32> loc(#loc3)
    %9 = tt.splat %7 : i32 -> tensor<32xi32> loc(#loc4)
    %10 = arith.extsi %9 : tensor<32xi32> to tensor<32xi64> loc(#loc4)
    %11 = arith.extsi %8 : tensor<32xi32> to tensor<32xi64> loc(#loc4)
    %12 = arith.addi %10, %11 : tensor<32xi64> loc(#loc4)
    %c2147483647_i64_1 = arith.constant 2147483647 : i64 loc(#loc4)
    %c-2147483648_i64_2 = arith.constant -2147483648 : i64 loc(#loc4)
    %cst = arith.constant dense<2147483647> : tensor<32xi64> loc(#loc4)
    %13 = arith.cmpi sle, %12, %cst : tensor<32xi64> loc(#loc4)
    %cst_3 = arith.constant dense<-2147483648> : tensor<32xi64> loc(#loc4)
    %14 = arith.cmpi sge, %12, %cst_3 : tensor<32xi64> loc(#loc4)
    %15 = arith.andi %13, %14 : tensor<32xi1> loc(#loc4)
    %16 = arith.addi %9, %8 : tensor<32xi32> loc(#loc4)
    %17 = tt.splat %arg3 : i32 -> tensor<32xi32> loc(#loc5)
    %18 = arith.cmpi slt, %16, %17 : tensor<32xi32> loc(#loc5)
    %c1_i32 = arith.constant 1 : i32 loc(#loc6)
    %c1_i32_4 = arith.constant 1 : i32 loc(#loc6)
    %cst_5 = arith.constant dense<1> : tensor<32xi32> loc(#loc6)
    %19 = arith.extsi %cst_5 : tensor<32xi32> to tensor<32xi64> loc(#loc6)
    %20 = arith.extsi %16 : tensor<32xi32> to tensor<32xi64> loc(#loc6)
    %21 = arith.muli %19, %20 : tensor<32xi64> loc(#loc6)
    %c2147483647_i64_6 = arith.constant 2147483647 : i64 loc(#loc6)
    %c-2147483648_i64_7 = arith.constant -2147483648 : i64 loc(#loc6)
    %cst_8 = arith.constant dense<2147483647> : tensor<32xi64> loc(#loc6)
    %22 = arith.cmpi sle, %21, %cst_8 : tensor<32xi64> loc(#loc6)
    %cst_9 = arith.constant dense<-2147483648> : tensor<32xi64> loc(#loc6)
    %23 = arith.cmpi sge, %21, %cst_9 : tensor<32xi64> loc(#loc6)
    %24 = arith.andi %22, %23 : tensor<32xi1> loc(#loc6)
    %25 = arith.muli %cst_5, %16 : tensor<32xi32> loc(#loc6)
    %26 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<32x!tt.ptr<f32>> loc(#loc7)
    %27 = tt.addptr %26, %25 : tensor<32x!tt.ptr<f32>>, tensor<32xi32> loc(#loc7)
    %28 = tt.load %27, %18 : tensor<32x!tt.ptr<f32>> loc(#loc8)
    %c1_i32_10 = arith.constant 1 : i32 loc(#loc9)
    %c1_i32_11 = arith.constant 1 : i32 loc(#loc9)
    %cst_12 = arith.constant dense<1> : tensor<32xi32> loc(#loc9)
    %29 = arith.extsi %cst_12 : tensor<32xi32> to tensor<32xi64> loc(#loc9)
    %30 = arith.extsi %16 : tensor<32xi32> to tensor<32xi64> loc(#loc9)
    %31 = arith.muli %29, %30 : tensor<32xi64> loc(#loc9)
    %c2147483647_i64_13 = arith.constant 2147483647 : i64 loc(#loc9)
    %c-2147483648_i64_14 = arith.constant -2147483648 : i64 loc(#loc9)
    %cst_15 = arith.constant dense<2147483647> : tensor<32xi64> loc(#loc9)
    %32 = arith.cmpi sle, %31, %cst_15 : tensor<32xi64> loc(#loc9)
    %cst_16 = arith.constant dense<-2147483648> : tensor<32xi64> loc(#loc9)
    %33 = arith.cmpi sge, %31, %cst_16 : tensor<32xi64> loc(#loc9)
    %34 = arith.andi %32, %33 : tensor<32xi1> loc(#loc9)
    %35 = arith.muli %cst_12, %16 : tensor<32xi32> loc(#loc9)
    %36 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<32x!tt.ptr<f32>> loc(#loc10)
    %37 = tt.addptr %36, %35 : tensor<32x!tt.ptr<f32>>, tensor<32xi32> loc(#loc10)
    %38 = tt.load %37, %18 : tensor<32x!tt.ptr<f32>> loc(#loc11)
    %39 = arith.mulf %28, %38 : tensor<32xf32> loc(#loc12)
    %40 = tt.call @"sum__fp32S32S__(1,)cNone_(2,)cconstexpr_False__(3,)cNone"(%39) : (tensor<32xf32>) -> f32 loc(#loc13)
    %true = arith.constant true loc(#loc14)
    %41 = tt.atomic_rmw fadd, acq_rel, gpu, %arg2, %40, %true : (!tt.ptr<f32>, f32, i1) -> f32 loc(#loc14)
    tt.return loc(#loc15)
  } loc(#loc)
  tt.func private @"sum__fp32S32S__(1,)cNone_(2,)cconstexpr_False__(3,)cNone"(%arg0: tensor<32xf32> loc("/root/miniconda3/envs/vllm/lib/python3.12/site-packages/triton/language/standard.py":280:0)) -> f32 attributes {noinline = false} {
    %0 = tt.reshape %arg0 allow_reorder : tensor<32xf32> -> tensor<32xf32> loc(#loc17)
    %1 = "tt.reduce"(%0) <{axis = 0 : i32}> ({
    ^bb0(%arg1: f32 loc(unknown), %arg2: f32 loc(unknown)):
      %2 = arith.addf %arg1, %arg2 : f32 loc(#loc22)
      tt.reduce.return %2 : f32 loc(#loc17)
    }) : (tensor<32xf32>) -> f32 loc(#loc17)
    tt.return %1 : f32 loc(#loc20)
  } loc(#loc16)
  tt.func private @_sum_combine__fp32_fp32__(f32, f32) -> f32 attributes {noinline = false} loc(#loc21)
} loc(#loc)
#loc1 = loc("/home/meiziyuan/triton/test_vdot.py":19:24)
#loc2 = loc("/home/meiziyuan/triton/test_vdot.py":20:19)
#loc3 = loc("/home/meiziyuan/triton/test_vdot.py":20:45)
#loc4 = loc("/home/meiziyuan/triton/test_vdot.py":20:32)
#loc5 = loc("/home/meiziyuan/triton/test_vdot.py":21:20)
#loc6 = loc("/home/meiziyuan/triton/test_vdot.py":23:41)
#loc7 = loc("/home/meiziyuan/triton/test_vdot.py":23:28)
#loc8 = loc("/home/meiziyuan/triton/test_vdot.py":23:18)
#loc9 = loc("/home/meiziyuan/triton/test_vdot.py":24:47)
#loc10 = loc("/home/meiziyuan/triton/test_vdot.py":24:32)
#loc11 = loc("/home/meiziyuan/triton/test_vdot.py":24:20)
#loc12 = loc("/home/meiziyuan/triton/test_vdot.py":26:23)
#loc13 = loc("/home/meiziyuan/triton/test_vdot.py":26:17)
#loc14 = loc("/home/meiziyuan/triton/test_vdot.py":27:27)
#loc15 = loc("/home/meiziyuan/triton/test_vdot.py":27:4)
#loc17 = loc("/root/miniconda3/envs/vllm/lib/python3.12/site-packages/triton/language/standard.py":286:36)
#loc19 = loc("/root/miniconda3/envs/vllm/lib/python3.12/site-packages/triton/language/standard.py":256:15)
#loc20 = loc("/root/miniconda3/envs/vllm/lib/python3.12/site-packages/triton/language/standard.py":286:11)
#loc21 = loc("/root/miniconda3/envs/vllm/lib/python3.12/site-packages/triton/language/standard.py":255:0)
#loc22 = loc(callsite(#loc19 at #loc17))


// -----// IR Dump Before Canonicalizer (canonicalize) ('tt.func' operation: @dot_kernel) //----- //
#loc = loc("/home/meiziyuan/triton/test_vdot.py":10:0)
#loc16 = loc("/root/miniconda3/envs/vllm/lib/python3.12/site-packages/triton/language/standard.py":280:0)
#loc18 = loc(unknown)
module {
  tt.func public @dot_kernel(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/home/meiziyuan/triton/test_vdot.py":10:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/home/meiziyuan/triton/test_vdot.py":10:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/home/meiziyuan/triton/test_vdot.py":10:0), %arg3: i32 loc("/home/meiziyuan/triton/test_vdot.py":10:0)) attributes {noinline = false} {
    %0 = tt.get_program_id x : i32 loc(#loc1)
    %c32_i32 = arith.constant 32 : i32 loc(#loc2)
    %c32_i32_0 = arith.constant 32 : i32 loc(#loc2)
    %1 = arith.extsi %0 : i32 to i64 loc(#loc2)
    %2 = arith.extsi %c32_i32_0 : i32 to i64 loc(#loc2)
    %3 = arith.muli %1, %2 : i64 loc(#loc2)
    %c2147483647_i64 = arith.constant 2147483647 : i64 loc(#loc2)
    %c-2147483648_i64 = arith.constant -2147483648 : i64 loc(#loc2)
    %4 = arith.cmpi sle, %3, %c2147483647_i64 : i64 loc(#loc2)
    %5 = arith.cmpi sge, %3, %c-2147483648_i64 : i64 loc(#loc2)
    %6 = arith.andi %4, %5 : i1 loc(#loc2)
    %7 = arith.muli %0, %c32_i32_0 : i32 loc(#loc2)
    %8 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32> loc(#loc3)
    %9 = tt.splat %7 : i32 -> tensor<32xi32> loc(#loc4)
    %10 = arith.extsi %9 : tensor<32xi32> to tensor<32xi64> loc(#loc4)
    %11 = arith.extsi %8 : tensor<32xi32> to tensor<32xi64> loc(#loc4)
    %12 = arith.addi %10, %11 : tensor<32xi64> loc(#loc4)
    %c2147483647_i64_1 = arith.constant 2147483647 : i64 loc(#loc4)
    %c-2147483648_i64_2 = arith.constant -2147483648 : i64 loc(#loc4)
    %cst = arith.constant dense<2147483647> : tensor<32xi64> loc(#loc4)
    %13 = arith.cmpi sle, %12, %cst : tensor<32xi64> loc(#loc4)
    %cst_3 = arith.constant dense<-2147483648> : tensor<32xi64> loc(#loc4)
    %14 = arith.cmpi sge, %12, %cst_3 : tensor<32xi64> loc(#loc4)
    %15 = arith.andi %13, %14 : tensor<32xi1> loc(#loc4)
    %16 = arith.addi %9, %8 : tensor<32xi32> loc(#loc4)
    %17 = tt.splat %arg3 : i32 -> tensor<32xi32> loc(#loc5)
    %18 = arith.cmpi slt, %16, %17 : tensor<32xi32> loc(#loc5)
    %c1_i32 = arith.constant 1 : i32 loc(#loc6)
    %c1_i32_4 = arith.constant 1 : i32 loc(#loc6)
    %cst_5 = arith.constant dense<1> : tensor<32xi32> loc(#loc6)
    %19 = arith.extsi %cst_5 : tensor<32xi32> to tensor<32xi64> loc(#loc6)
    %20 = arith.extsi %16 : tensor<32xi32> to tensor<32xi64> loc(#loc6)
    %21 = arith.muli %19, %20 : tensor<32xi64> loc(#loc6)
    %c2147483647_i64_6 = arith.constant 2147483647 : i64 loc(#loc6)
    %c-2147483648_i64_7 = arith.constant -2147483648 : i64 loc(#loc6)
    %cst_8 = arith.constant dense<2147483647> : tensor<32xi64> loc(#loc6)
    %22 = arith.cmpi sle, %21, %cst_8 : tensor<32xi64> loc(#loc6)
    %cst_9 = arith.constant dense<-2147483648> : tensor<32xi64> loc(#loc6)
    %23 = arith.cmpi sge, %21, %cst_9 : tensor<32xi64> loc(#loc6)
    %24 = arith.andi %22, %23 : tensor<32xi1> loc(#loc6)
    %25 = arith.muli %cst_5, %16 : tensor<32xi32> loc(#loc6)
    %26 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<32x!tt.ptr<f32>> loc(#loc7)
    %27 = tt.addptr %26, %25 : tensor<32x!tt.ptr<f32>>, tensor<32xi32> loc(#loc7)
    %28 = tt.load %27, %18 : tensor<32x!tt.ptr<f32>> loc(#loc8)
    %c1_i32_10 = arith.constant 1 : i32 loc(#loc9)
    %c1_i32_11 = arith.constant 1 : i32 loc(#loc9)
    %cst_12 = arith.constant dense<1> : tensor<32xi32> loc(#loc9)
    %29 = arith.extsi %cst_12 : tensor<32xi32> to tensor<32xi64> loc(#loc9)
    %30 = arith.extsi %16 : tensor<32xi32> to tensor<32xi64> loc(#loc9)
    %31 = arith.muli %29, %30 : tensor<32xi64> loc(#loc9)
    %c2147483647_i64_13 = arith.constant 2147483647 : i64 loc(#loc9)
    %c-2147483648_i64_14 = arith.constant -2147483648 : i64 loc(#loc9)
    %cst_15 = arith.constant dense<2147483647> : tensor<32xi64> loc(#loc9)
    %32 = arith.cmpi sle, %31, %cst_15 : tensor<32xi64> loc(#loc9)
    %cst_16 = arith.constant dense<-2147483648> : tensor<32xi64> loc(#loc9)
    %33 = arith.cmpi sge, %31, %cst_16 : tensor<32xi64> loc(#loc9)
    %34 = arith.andi %32, %33 : tensor<32xi1> loc(#loc9)
    %35 = arith.muli %cst_12, %16 : tensor<32xi32> loc(#loc9)
    %36 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<32x!tt.ptr<f32>> loc(#loc10)
    %37 = tt.addptr %36, %35 : tensor<32x!tt.ptr<f32>>, tensor<32xi32> loc(#loc10)
    %38 = tt.load %37, %18 : tensor<32x!tt.ptr<f32>> loc(#loc11)
    %39 = arith.mulf %28, %38 : tensor<32xf32> loc(#loc12)
    %40 = tt.call @"sum__fp32S32S__(1,)cNone_(2,)cconstexpr_False__(3,)cNone"(%39) : (tensor<32xf32>) -> f32 loc(#loc13)
    %true = arith.constant true loc(#loc14)
    %41 = tt.atomic_rmw fadd, acq_rel, gpu, %arg2, %40, %true : (!tt.ptr<f32>, f32, i1) -> f32 loc(#loc14)
    tt.return loc(#loc15)
  } loc(#loc)
  tt.func private @"sum__fp32S32S__(1,)cNone_(2,)cconstexpr_False__(3,)cNone"(%arg0: tensor<32xf32> loc("/root/miniconda3/envs/vllm/lib/python3.12/site-packages/triton/language/standard.py":280:0)) -> f32 attributes {noinline = false} {
    %0 = tt.reshape %arg0 allow_reorder : tensor<32xf32> -> tensor<32xf32> loc(#loc17)
    %1 = "tt.reduce"(%0) <{axis = 0 : i32}> ({
    ^bb0(%arg1: f32 loc(unknown), %arg2: f32 loc(unknown)):
      %2 = arith.addf %arg1, %arg2 : f32 loc(#loc22)
      tt.reduce.return %2 : f32 loc(#loc17)
    }) : (tensor<32xf32>) -> f32 loc(#loc17)
    tt.return %1 : f32 loc(#loc20)
  } loc(#loc16)
  tt.func private @_sum_combine__fp32_fp32__(f32, f32) -> f32 attributes {noinline = false} loc(#loc21)
} loc(#loc)
#loc1 = loc("/home/meiziyuan/triton/test_vdot.py":19:24)
#loc2 = loc("/home/meiziyuan/triton/test_vdot.py":20:19)
#loc3 = loc("/home/meiziyuan/triton/test_vdot.py":20:45)
#loc4 = loc("/home/meiziyuan/triton/test_vdot.py":20:32)
#loc5 = loc("/home/meiziyuan/triton/test_vdot.py":21:20)
#loc6 = loc("/home/meiziyuan/triton/test_vdot.py":23:41)
#loc7 = loc("/home/meiziyuan/triton/test_vdot.py":23:28)
#loc8 = loc("/home/meiziyuan/triton/test_vdot.py":23:18)
#loc9 = loc("/home/meiziyuan/triton/test_vdot.py":24:47)
#loc10 = loc("/home/meiziyuan/triton/test_vdot.py":24:32)
#loc11 = loc("/home/meiziyuan/triton/test_vdot.py":24:20)
#loc12 = loc("/home/meiziyuan/triton/test_vdot.py":26:23)
#loc13 = loc("/home/meiziyuan/triton/test_vdot.py":26:17)
#loc14 = loc("/home/meiziyuan/triton/test_vdot.py":27:27)
#loc15 = loc("/home/meiziyuan/triton/test_vdot.py":27:4)
#loc17 = loc("/root/miniconda3/envs/vllm/lib/python3.12/site-packages/triton/language/standard.py":286:36)
#loc19 = loc("/root/miniconda3/envs/vllm/lib/python3.12/site-packages/triton/language/standard.py":256:15)
#loc20 = loc("/root/miniconda3/envs/vllm/lib/python3.12/site-packages/triton/language/standard.py":286:11)
#loc21 = loc("/root/miniconda3/envs/vllm/lib/python3.12/site-packages/triton/language/standard.py":255:0)
#loc22 = loc(callsite(#loc19 at #loc17))


// -----// IR Dump Before Canonicalizer (canonicalize) ('tt.func' operation: @dot_kernel) //----- //
#loc = loc("/home/meiziyuan/triton/test_vdot.py":10:0)
#loc1 = loc(unknown)
#loc13 = loc("/home/meiziyuan/triton/test_vdot.py":26:17)
#loc20 = loc(callsite(#loc1 at #loc13))
module {
  tt.func public @dot_kernel(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/home/meiziyuan/triton/test_vdot.py":10:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/home/meiziyuan/triton/test_vdot.py":10:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/home/meiziyuan/triton/test_vdot.py":10:0), %arg3: i32 loc("/home/meiziyuan/triton/test_vdot.py":10:0)) attributes {noinline = false} {
    %true = arith.constant true loc(#loc1)
    %c32_i32 = arith.constant 32 : i32 loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.muli %0, %c32_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32> loc(#loc4)
    %3 = tt.splat %1 : i32 -> tensor<32xi32> loc(#loc5)
    %4 = arith.addi %3, %2 : tensor<32xi32> loc(#loc5)
    %5 = tt.splat %arg3 : i32 -> tensor<32xi32> loc(#loc6)
    %6 = arith.cmpi slt, %4, %5 : tensor<32xi32> loc(#loc6)
    %7 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<32x!tt.ptr<f32>> loc(#loc7)
    %8 = tt.addptr %7, %4 : tensor<32x!tt.ptr<f32>>, tensor<32xi32> loc(#loc7)
    %9 = tt.load %8, %6 : tensor<32x!tt.ptr<f32>> loc(#loc8)
    %10 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<32x!tt.ptr<f32>> loc(#loc9)
    %11 = tt.addptr %10, %4 : tensor<32x!tt.ptr<f32>>, tensor<32xi32> loc(#loc9)
    %12 = tt.load %11, %6 : tensor<32x!tt.ptr<f32>> loc(#loc10)
    %13 = arith.mulf %9, %12 : tensor<32xf32> loc(#loc11)
    %14 = tt.reshape %13 allow_reorder : tensor<32xf32> -> tensor<32xf32> loc(#loc19)
    %15 = "tt.reduce"(%14) <{axis = 0 : i32}> ({
    ^bb0(%arg4: f32 loc(callsite(#loc1 at #loc13)), %arg5: f32 loc(callsite(#loc1 at #loc13))):
      %17 = arith.addf %arg4, %arg5 : f32 loc(#loc22)
      tt.reduce.return %17 : f32 loc(#loc19)
    }) : (tensor<32xf32>) -> f32 loc(#loc19)
    %16 = tt.atomic_rmw fadd, acq_rel, gpu, %arg2, %15, %true : (!tt.ptr<f32>, f32, i1) -> f32 loc(#loc15)
    tt.return loc(#loc16)
  } loc(#loc)
  tt.func private @"sum__fp32S32S__(1,)cNone_(2,)cconstexpr_False__(3,)cNone"(tensor<32xf32>) -> f32 attributes {noinline = false} loc(#loc17)
  tt.func private @_sum_combine__fp32_fp32__(f32, f32) -> f32 attributes {noinline = false} loc(#loc18)
} loc(#loc)
#loc2 = loc("/home/meiziyuan/triton/test_vdot.py":19:24)
#loc3 = loc("/home/meiziyuan/triton/test_vdot.py":20:19)
#loc4 = loc("/home/meiziyuan/triton/test_vdot.py":20:45)
#loc5 = loc("/home/meiziyuan/triton/test_vdot.py":20:32)
#loc6 = loc("/home/meiziyuan/triton/test_vdot.py":21:20)
#loc7 = loc("/home/meiziyuan/triton/test_vdot.py":23:28)
#loc8 = loc("/home/meiziyuan/triton/test_vdot.py":23:18)
#loc9 = loc("/home/meiziyuan/triton/test_vdot.py":24:32)
#loc10 = loc("/home/meiziyuan/triton/test_vdot.py":24:20)
#loc11 = loc("/home/meiziyuan/triton/test_vdot.py":26:23)
#loc12 = loc("/root/miniconda3/envs/vllm/lib/python3.12/site-packages/triton/language/standard.py":286:36)
#loc14 = loc("/root/miniconda3/envs/vllm/lib/python3.12/site-packages/triton/language/standard.py":256:15)
#loc15 = loc("/home/meiziyuan/triton/test_vdot.py":27:27)
#loc16 = loc("/home/meiziyuan/triton/test_vdot.py":27:4)
#loc17 = loc("/root/miniconda3/envs/vllm/lib/python3.12/site-packages/triton/language/standard.py":280:0)
#loc18 = loc("/root/miniconda3/envs/vllm/lib/python3.12/site-packages/triton/language/standard.py":255:0)
#loc19 = loc(callsite(#loc12 at #loc13))
#loc21 = loc(callsite(#loc14 at #loc12))
#loc22 = loc(callsite(#loc21 at #loc13))


// -----// IR Dump Before TritonRewriteTensorPointer (triton-rewrite-tensor-pointer) ('builtin.module' operation) //----- //
#loc = loc("/home/meiziyuan/triton/test_vdot.py":10:0)
#loc1 = loc(unknown)
#loc13 = loc("/home/meiziyuan/triton/test_vdot.py":26:17)
#loc18 = loc(callsite(#loc1 at #loc13))
module {
  tt.func public @dot_kernel(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/home/meiziyuan/triton/test_vdot.py":10:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/home/meiziyuan/triton/test_vdot.py":10:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/home/meiziyuan/triton/test_vdot.py":10:0), %arg3: i32 loc("/home/meiziyuan/triton/test_vdot.py":10:0)) attributes {noinline = false} {
    %true = arith.constant true loc(#loc1)
    %c32_i32 = arith.constant 32 : i32 loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.muli %0, %c32_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32> loc(#loc4)
    %3 = tt.splat %1 : i32 -> tensor<32xi32> loc(#loc5)
    %4 = arith.addi %3, %2 : tensor<32xi32> loc(#loc5)
    %5 = tt.splat %arg3 : i32 -> tensor<32xi32> loc(#loc6)
    %6 = arith.cmpi slt, %4, %5 : tensor<32xi32> loc(#loc6)
    %7 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<32x!tt.ptr<f32>> loc(#loc7)
    %8 = tt.addptr %7, %4 : tensor<32x!tt.ptr<f32>>, tensor<32xi32> loc(#loc7)
    %9 = tt.load %8, %6 : tensor<32x!tt.ptr<f32>> loc(#loc8)
    %10 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<32x!tt.ptr<f32>> loc(#loc9)
    %11 = tt.addptr %10, %4 : tensor<32x!tt.ptr<f32>>, tensor<32xi32> loc(#loc9)
    %12 = tt.load %11, %6 : tensor<32x!tt.ptr<f32>> loc(#loc10)
    %13 = arith.mulf %9, %12 : tensor<32xf32> loc(#loc11)
    %14 = tt.reshape %13 allow_reorder : tensor<32xf32> -> tensor<32xf32> loc(#loc17)
    %15 = "tt.reduce"(%14) <{axis = 0 : i32}> ({
    ^bb0(%arg4: f32 loc(callsite(#loc1 at #loc13)), %arg5: f32 loc(callsite(#loc1 at #loc13))):
      %17 = arith.addf %arg4, %arg5 : f32 loc(#loc20)
      tt.reduce.return %17 : f32 loc(#loc17)
    }) : (tensor<32xf32>) -> f32 loc(#loc17)
    %16 = tt.atomic_rmw fadd, acq_rel, gpu, %arg2, %15, %true : (!tt.ptr<f32>, f32, i1) -> f32 loc(#loc15)
    tt.return loc(#loc16)
  } loc(#loc)
} loc(#loc)
#loc2 = loc("/home/meiziyuan/triton/test_vdot.py":19:24)
#loc3 = loc("/home/meiziyuan/triton/test_vdot.py":20:19)
#loc4 = loc("/home/meiziyuan/triton/test_vdot.py":20:45)
#loc5 = loc("/home/meiziyuan/triton/test_vdot.py":20:32)
#loc6 = loc("/home/meiziyuan/triton/test_vdot.py":21:20)
#loc7 = loc("/home/meiziyuan/triton/test_vdot.py":23:28)
#loc8 = loc("/home/meiziyuan/triton/test_vdot.py":23:18)
#loc9 = loc("/home/meiziyuan/triton/test_vdot.py":24:32)
#loc10 = loc("/home/meiziyuan/triton/test_vdot.py":24:20)
#loc11 = loc("/home/meiziyuan/triton/test_vdot.py":26:23)
#loc12 = loc("/root/miniconda3/envs/vllm/lib/python3.12/site-packages/triton/language/standard.py":286:36)
#loc14 = loc("/root/miniconda3/envs/vllm/lib/python3.12/site-packages/triton/language/standard.py":256:15)
#loc15 = loc("/home/meiziyuan/triton/test_vdot.py":27:27)
#loc16 = loc("/home/meiziyuan/triton/test_vdot.py":27:4)
#loc17 = loc(callsite(#loc12 at #loc13))
#loc19 = loc(callsite(#loc14 at #loc12))
#loc20 = loc(callsite(#loc19 at #loc13))


// -----// IR Dump Before Canonicalizer (canonicalize) ('builtin.module' operation) //----- //
#loc = loc("/home/meiziyuan/triton/test_vdot.py":10:0)
#loc1 = loc(unknown)
#loc13 = loc("/home/meiziyuan/triton/test_vdot.py":26:17)
#loc18 = loc(callsite(#loc1 at #loc13))
module {
  tt.func public @dot_kernel(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/home/meiziyuan/triton/test_vdot.py":10:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/home/meiziyuan/triton/test_vdot.py":10:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/home/meiziyuan/triton/test_vdot.py":10:0), %arg3: i32 loc("/home/meiziyuan/triton/test_vdot.py":10:0)) attributes {noinline = false} {
    %true = arith.constant true loc(#loc1)
    %c32_i32 = arith.constant 32 : i32 loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.muli %0, %c32_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32> loc(#loc4)
    %3 = tt.splat %1 : i32 -> tensor<32xi32> loc(#loc5)
    %4 = arith.addi %3, %2 : tensor<32xi32> loc(#loc5)
    %5 = tt.splat %arg3 : i32 -> tensor<32xi32> loc(#loc6)
    %6 = arith.cmpi slt, %4, %5 : tensor<32xi32> loc(#loc6)
    %7 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<32x!tt.ptr<f32>> loc(#loc7)
    %8 = tt.addptr %7, %4 : tensor<32x!tt.ptr<f32>>, tensor<32xi32> loc(#loc7)
    %9 = tt.load %8, %6 : tensor<32x!tt.ptr<f32>> loc(#loc8)
    %10 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<32x!tt.ptr<f32>> loc(#loc9)
    %11 = tt.addptr %10, %4 : tensor<32x!tt.ptr<f32>>, tensor<32xi32> loc(#loc9)
    %12 = tt.load %11, %6 : tensor<32x!tt.ptr<f32>> loc(#loc10)
    %13 = arith.mulf %9, %12 : tensor<32xf32> loc(#loc11)
    %14 = tt.reshape %13 allow_reorder : tensor<32xf32> -> tensor<32xf32> loc(#loc17)
    %15 = "tt.reduce"(%14) <{axis = 0 : i32}> ({
    ^bb0(%arg4: f32 loc(callsite(#loc1 at #loc13)), %arg5: f32 loc(callsite(#loc1 at #loc13))):
      %17 = arith.addf %arg4, %arg5 : f32 loc(#loc20)
      tt.reduce.return %17 : f32 loc(#loc17)
    }) : (tensor<32xf32>) -> f32 loc(#loc17)
    %16 = tt.atomic_rmw fadd, acq_rel, gpu, %arg2, %15, %true : (!tt.ptr<f32>, f32, i1) -> f32 loc(#loc15)
    tt.return loc(#loc16)
  } loc(#loc)
} loc(#loc)
#loc2 = loc("/home/meiziyuan/triton/test_vdot.py":19:24)
#loc3 = loc("/home/meiziyuan/triton/test_vdot.py":20:19)
#loc4 = loc("/home/meiziyuan/triton/test_vdot.py":20:45)
#loc5 = loc("/home/meiziyuan/triton/test_vdot.py":20:32)
#loc6 = loc("/home/meiziyuan/triton/test_vdot.py":21:20)
#loc7 = loc("/home/meiziyuan/triton/test_vdot.py":23:28)
#loc8 = loc("/home/meiziyuan/triton/test_vdot.py":23:18)
#loc9 = loc("/home/meiziyuan/triton/test_vdot.py":24:32)
#loc10 = loc("/home/meiziyuan/triton/test_vdot.py":24:20)
#loc11 = loc("/home/meiziyuan/triton/test_vdot.py":26:23)
#loc12 = loc("/root/miniconda3/envs/vllm/lib/python3.12/site-packages/triton/language/standard.py":286:36)
#loc14 = loc("/root/miniconda3/envs/vllm/lib/python3.12/site-packages/triton/language/standard.py":256:15)
#loc15 = loc("/home/meiziyuan/triton/test_vdot.py":27:27)
#loc16 = loc("/home/meiziyuan/triton/test_vdot.py":27:4)
#loc17 = loc(callsite(#loc12 at #loc13))
#loc19 = loc(callsite(#loc14 at #loc12))
#loc20 = loc(callsite(#loc19 at #loc13))


// -----// IR Dump Before TritonCombineOps (triton-combine) ('builtin.module' operation) //----- //
#loc = loc("/home/meiziyuan/triton/test_vdot.py":10:0)
#loc1 = loc(unknown)
#loc13 = loc("/home/meiziyuan/triton/test_vdot.py":26:17)
#loc18 = loc(callsite(#loc1 at #loc13))
module {
  tt.func public @dot_kernel(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/home/meiziyuan/triton/test_vdot.py":10:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/home/meiziyuan/triton/test_vdot.py":10:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/home/meiziyuan/triton/test_vdot.py":10:0), %arg3: i32 loc("/home/meiziyuan/triton/test_vdot.py":10:0)) attributes {noinline = false} {
    %true = arith.constant true loc(#loc1)
    %c32_i32 = arith.constant 32 : i32 loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.muli %0, %c32_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32> loc(#loc4)
    %3 = tt.splat %1 : i32 -> tensor<32xi32> loc(#loc5)
    %4 = arith.addi %3, %2 : tensor<32xi32> loc(#loc5)
    %5 = tt.splat %arg3 : i32 -> tensor<32xi32> loc(#loc6)
    %6 = arith.cmpi slt, %4, %5 : tensor<32xi32> loc(#loc6)
    %7 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<32x!tt.ptr<f32>> loc(#loc7)
    %8 = tt.addptr %7, %4 : tensor<32x!tt.ptr<f32>>, tensor<32xi32> loc(#loc7)
    %9 = tt.load %8, %6 : tensor<32x!tt.ptr<f32>> loc(#loc8)
    %10 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<32x!tt.ptr<f32>> loc(#loc9)
    %11 = tt.addptr %10, %4 : tensor<32x!tt.ptr<f32>>, tensor<32xi32> loc(#loc9)
    %12 = tt.load %11, %6 : tensor<32x!tt.ptr<f32>> loc(#loc10)
    %13 = arith.mulf %9, %12 : tensor<32xf32> loc(#loc11)
    %14 = tt.reshape %13 allow_reorder : tensor<32xf32> -> tensor<32xf32> loc(#loc17)
    %15 = "tt.reduce"(%14) <{axis = 0 : i32}> ({
    ^bb0(%arg4: f32 loc(callsite(#loc1 at #loc13)), %arg5: f32 loc(callsite(#loc1 at #loc13))):
      %17 = arith.addf %arg4, %arg5 : f32 loc(#loc20)
      tt.reduce.return %17 : f32 loc(#loc17)
    }) : (tensor<32xf32>) -> f32 loc(#loc17)
    %16 = tt.atomic_rmw fadd, acq_rel, gpu, %arg2, %15, %true : (!tt.ptr<f32>, f32, i1) -> f32 loc(#loc15)
    tt.return loc(#loc16)
  } loc(#loc)
} loc(#loc)
#loc2 = loc("/home/meiziyuan/triton/test_vdot.py":19:24)
#loc3 = loc("/home/meiziyuan/triton/test_vdot.py":20:19)
#loc4 = loc("/home/meiziyuan/triton/test_vdot.py":20:45)
#loc5 = loc("/home/meiziyuan/triton/test_vdot.py":20:32)
#loc6 = loc("/home/meiziyuan/triton/test_vdot.py":21:20)
#loc7 = loc("/home/meiziyuan/triton/test_vdot.py":23:28)
#loc8 = loc("/home/meiziyuan/triton/test_vdot.py":23:18)
#loc9 = loc("/home/meiziyuan/triton/test_vdot.py":24:32)
#loc10 = loc("/home/meiziyuan/triton/test_vdot.py":24:20)
#loc11 = loc("/home/meiziyuan/triton/test_vdot.py":26:23)
#loc12 = loc("/root/miniconda3/envs/vllm/lib/python3.12/site-packages/triton/language/standard.py":286:36)
#loc14 = loc("/root/miniconda3/envs/vllm/lib/python3.12/site-packages/triton/language/standard.py":256:15)
#loc15 = loc("/home/meiziyuan/triton/test_vdot.py":27:27)
#loc16 = loc("/home/meiziyuan/triton/test_vdot.py":27:4)
#loc17 = loc(callsite(#loc12 at #loc13))
#loc19 = loc(callsite(#loc14 at #loc12))
#loc20 = loc(callsite(#loc19 at #loc13))


// -----// IR Dump Before TritonReorderBroadcast (triton-reorder-broadcast) ('builtin.module' operation) //----- //
#loc = loc("/home/meiziyuan/triton/test_vdot.py":10:0)
#loc1 = loc(unknown)
#loc13 = loc("/home/meiziyuan/triton/test_vdot.py":26:17)
#loc18 = loc(callsite(#loc1 at #loc13))
module {
  tt.func public @dot_kernel(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/home/meiziyuan/triton/test_vdot.py":10:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/home/meiziyuan/triton/test_vdot.py":10:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/home/meiziyuan/triton/test_vdot.py":10:0), %arg3: i32 loc("/home/meiziyuan/triton/test_vdot.py":10:0)) attributes {noinline = false} {
    %true = arith.constant true loc(#loc1)
    %c32_i32 = arith.constant 32 : i32 loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.muli %0, %c32_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32> loc(#loc4)
    %3 = tt.splat %1 : i32 -> tensor<32xi32> loc(#loc5)
    %4 = arith.addi %3, %2 : tensor<32xi32> loc(#loc5)
    %5 = tt.splat %arg3 : i32 -> tensor<32xi32> loc(#loc6)
    %6 = arith.cmpi slt, %4, %5 : tensor<32xi32> loc(#loc6)
    %7 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<32x!tt.ptr<f32>> loc(#loc7)
    %8 = tt.addptr %7, %4 : tensor<32x!tt.ptr<f32>>, tensor<32xi32> loc(#loc7)
    %9 = tt.load %8, %6 : tensor<32x!tt.ptr<f32>> loc(#loc8)
    %10 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<32x!tt.ptr<f32>> loc(#loc9)
    %11 = tt.addptr %10, %4 : tensor<32x!tt.ptr<f32>>, tensor<32xi32> loc(#loc9)
    %12 = tt.load %11, %6 : tensor<32x!tt.ptr<f32>> loc(#loc10)
    %13 = arith.mulf %9, %12 : tensor<32xf32> loc(#loc11)
    %14 = tt.reshape %13 allow_reorder : tensor<32xf32> -> tensor<32xf32> loc(#loc17)
    %15 = "tt.reduce"(%14) <{axis = 0 : i32}> ({
    ^bb0(%arg4: f32 loc(callsite(#loc1 at #loc13)), %arg5: f32 loc(callsite(#loc1 at #loc13))):
      %17 = arith.addf %arg4, %arg5 : f32 loc(#loc20)
      tt.reduce.return %17 : f32 loc(#loc17)
    }) : (tensor<32xf32>) -> f32 loc(#loc17)
    %16 = tt.atomic_rmw fadd, acq_rel, gpu, %arg2, %15, %true : (!tt.ptr<f32>, f32, i1) -> f32 loc(#loc15)
    tt.return loc(#loc16)
  } loc(#loc)
} loc(#loc)
#loc2 = loc("/home/meiziyuan/triton/test_vdot.py":19:24)
#loc3 = loc("/home/meiziyuan/triton/test_vdot.py":20:19)
#loc4 = loc("/home/meiziyuan/triton/test_vdot.py":20:45)
#loc5 = loc("/home/meiziyuan/triton/test_vdot.py":20:32)
#loc6 = loc("/home/meiziyuan/triton/test_vdot.py":21:20)
#loc7 = loc("/home/meiziyuan/triton/test_vdot.py":23:28)
#loc8 = loc("/home/meiziyuan/triton/test_vdot.py":23:18)
#loc9 = loc("/home/meiziyuan/triton/test_vdot.py":24:32)
#loc10 = loc("/home/meiziyuan/triton/test_vdot.py":24:20)
#loc11 = loc("/home/meiziyuan/triton/test_vdot.py":26:23)
#loc12 = loc("/root/miniconda3/envs/vllm/lib/python3.12/site-packages/triton/language/standard.py":286:36)
#loc14 = loc("/root/miniconda3/envs/vllm/lib/python3.12/site-packages/triton/language/standard.py":256:15)
#loc15 = loc("/home/meiziyuan/triton/test_vdot.py":27:27)
#loc16 = loc("/home/meiziyuan/triton/test_vdot.py":27:4)
#loc17 = loc(callsite(#loc12 at #loc13))
#loc19 = loc(callsite(#loc14 at #loc12))
#loc20 = loc(callsite(#loc19 at #loc13))


// -----// IR Dump Before CSE (cse) ('builtin.module' operation) //----- //
#loc = loc("/home/meiziyuan/triton/test_vdot.py":10:0)
#loc1 = loc(unknown)
#loc13 = loc("/home/meiziyuan/triton/test_vdot.py":26:17)
#loc18 = loc(callsite(#loc1 at #loc13))
module {
  tt.func public @dot_kernel(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/home/meiziyuan/triton/test_vdot.py":10:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/home/meiziyuan/triton/test_vdot.py":10:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/home/meiziyuan/triton/test_vdot.py":10:0), %arg3: i32 loc("/home/meiziyuan/triton/test_vdot.py":10:0)) attributes {noinline = false} {
    %true = arith.constant true loc(#loc1)
    %c32_i32 = arith.constant 32 : i32 loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.muli %0, %c32_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32> loc(#loc4)
    %3 = tt.splat %1 : i32 -> tensor<32xi32> loc(#loc5)
    %4 = arith.addi %3, %2 : tensor<32xi32> loc(#loc5)
    %5 = tt.splat %arg3 : i32 -> tensor<32xi32> loc(#loc6)
    %6 = arith.cmpi slt, %4, %5 : tensor<32xi32> loc(#loc6)
    %7 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<32x!tt.ptr<f32>> loc(#loc7)
    %8 = tt.addptr %7, %4 : tensor<32x!tt.ptr<f32>>, tensor<32xi32> loc(#loc7)
    %9 = tt.load %8, %6 : tensor<32x!tt.ptr<f32>> loc(#loc8)
    %10 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<32x!tt.ptr<f32>> loc(#loc9)
    %11 = tt.addptr %10, %4 : tensor<32x!tt.ptr<f32>>, tensor<32xi32> loc(#loc9)
    %12 = tt.load %11, %6 : tensor<32x!tt.ptr<f32>> loc(#loc10)
    %13 = arith.mulf %9, %12 : tensor<32xf32> loc(#loc11)
    %14 = tt.reshape %13 allow_reorder : tensor<32xf32> -> tensor<32xf32> loc(#loc17)
    %15 = "tt.reduce"(%14) <{axis = 0 : i32}> ({
    ^bb0(%arg4: f32 loc(callsite(#loc1 at #loc13)), %arg5: f32 loc(callsite(#loc1 at #loc13))):
      %17 = arith.addf %arg4, %arg5 : f32 loc(#loc20)
      tt.reduce.return %17 : f32 loc(#loc17)
    }) : (tensor<32xf32>) -> f32 loc(#loc17)
    %16 = tt.atomic_rmw fadd, acq_rel, gpu, %arg2, %15, %true : (!tt.ptr<f32>, f32, i1) -> f32 loc(#loc15)
    tt.return loc(#loc16)
  } loc(#loc)
} loc(#loc)
#loc2 = loc("/home/meiziyuan/triton/test_vdot.py":19:24)
#loc3 = loc("/home/meiziyuan/triton/test_vdot.py":20:19)
#loc4 = loc("/home/meiziyuan/triton/test_vdot.py":20:45)
#loc5 = loc("/home/meiziyuan/triton/test_vdot.py":20:32)
#loc6 = loc("/home/meiziyuan/triton/test_vdot.py":21:20)
#loc7 = loc("/home/meiziyuan/triton/test_vdot.py":23:28)
#loc8 = loc("/home/meiziyuan/triton/test_vdot.py":23:18)
#loc9 = loc("/home/meiziyuan/triton/test_vdot.py":24:32)
#loc10 = loc("/home/meiziyuan/triton/test_vdot.py":24:20)
#loc11 = loc("/home/meiziyuan/triton/test_vdot.py":26:23)
#loc12 = loc("/root/miniconda3/envs/vllm/lib/python3.12/site-packages/triton/language/standard.py":286:36)
#loc14 = loc("/root/miniconda3/envs/vllm/lib/python3.12/site-packages/triton/language/standard.py":256:15)
#loc15 = loc("/home/meiziyuan/triton/test_vdot.py":27:27)
#loc16 = loc("/home/meiziyuan/triton/test_vdot.py":27:4)
#loc17 = loc(callsite(#loc12 at #loc13))
#loc19 = loc(callsite(#loc14 at #loc12))
#loc20 = loc(callsite(#loc19 at #loc13))


// -----// IR Dump Before SymbolDCE (symbol-dce) ('builtin.module' operation) //----- //
#loc = loc("/home/meiziyuan/triton/test_vdot.py":10:0)
#loc1 = loc(unknown)
#loc13 = loc("/home/meiziyuan/triton/test_vdot.py":26:17)
#loc18 = loc(callsite(#loc1 at #loc13))
module {
  tt.func public @dot_kernel(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/home/meiziyuan/triton/test_vdot.py":10:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/home/meiziyuan/triton/test_vdot.py":10:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/home/meiziyuan/triton/test_vdot.py":10:0), %arg3: i32 loc("/home/meiziyuan/triton/test_vdot.py":10:0)) attributes {noinline = false} {
    %true = arith.constant true loc(#loc1)
    %c32_i32 = arith.constant 32 : i32 loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.muli %0, %c32_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32> loc(#loc4)
    %3 = tt.splat %1 : i32 -> tensor<32xi32> loc(#loc5)
    %4 = arith.addi %3, %2 : tensor<32xi32> loc(#loc5)
    %5 = tt.splat %arg3 : i32 -> tensor<32xi32> loc(#loc6)
    %6 = arith.cmpi slt, %4, %5 : tensor<32xi32> loc(#loc6)
    %7 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<32x!tt.ptr<f32>> loc(#loc7)
    %8 = tt.addptr %7, %4 : tensor<32x!tt.ptr<f32>>, tensor<32xi32> loc(#loc7)
    %9 = tt.load %8, %6 : tensor<32x!tt.ptr<f32>> loc(#loc8)
    %10 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<32x!tt.ptr<f32>> loc(#loc9)
    %11 = tt.addptr %10, %4 : tensor<32x!tt.ptr<f32>>, tensor<32xi32> loc(#loc9)
    %12 = tt.load %11, %6 : tensor<32x!tt.ptr<f32>> loc(#loc10)
    %13 = arith.mulf %9, %12 : tensor<32xf32> loc(#loc11)
    %14 = tt.reshape %13 allow_reorder : tensor<32xf32> -> tensor<32xf32> loc(#loc17)
    %15 = "tt.reduce"(%14) <{axis = 0 : i32}> ({
    ^bb0(%arg4: f32 loc(callsite(#loc1 at #loc13)), %arg5: f32 loc(callsite(#loc1 at #loc13))):
      %17 = arith.addf %arg4, %arg5 : f32 loc(#loc20)
      tt.reduce.return %17 : f32 loc(#loc17)
    }) : (tensor<32xf32>) -> f32 loc(#loc17)
    %16 = tt.atomic_rmw fadd, acq_rel, gpu, %arg2, %15, %true : (!tt.ptr<f32>, f32, i1) -> f32 loc(#loc15)
    tt.return loc(#loc16)
  } loc(#loc)
} loc(#loc)
#loc2 = loc("/home/meiziyuan/triton/test_vdot.py":19:24)
#loc3 = loc("/home/meiziyuan/triton/test_vdot.py":20:19)
#loc4 = loc("/home/meiziyuan/triton/test_vdot.py":20:45)
#loc5 = loc("/home/meiziyuan/triton/test_vdot.py":20:32)
#loc6 = loc("/home/meiziyuan/triton/test_vdot.py":21:20)
#loc7 = loc("/home/meiziyuan/triton/test_vdot.py":23:28)
#loc8 = loc("/home/meiziyuan/triton/test_vdot.py":23:18)
#loc9 = loc("/home/meiziyuan/triton/test_vdot.py":24:32)
#loc10 = loc("/home/meiziyuan/triton/test_vdot.py":24:20)
#loc11 = loc("/home/meiziyuan/triton/test_vdot.py":26:23)
#loc12 = loc("/root/miniconda3/envs/vllm/lib/python3.12/site-packages/triton/language/standard.py":286:36)
#loc14 = loc("/root/miniconda3/envs/vllm/lib/python3.12/site-packages/triton/language/standard.py":256:15)
#loc15 = loc("/home/meiziyuan/triton/test_vdot.py":27:27)
#loc16 = loc("/home/meiziyuan/triton/test_vdot.py":27:4)
#loc17 = loc(callsite(#loc12 at #loc13))
#loc19 = loc(callsite(#loc14 at #loc12))
#loc20 = loc(callsite(#loc19 at #loc13))


// -----// IR Dump Before TritonLoopUnroll (triton-loop-unroll) ('builtin.module' operation) //----- //
#loc = loc("/home/meiziyuan/triton/test_vdot.py":10:0)
#loc1 = loc(unknown)
#loc13 = loc("/home/meiziyuan/triton/test_vdot.py":26:17)
#loc18 = loc(callsite(#loc1 at #loc13))
module {
  tt.func public @dot_kernel(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/home/meiziyuan/triton/test_vdot.py":10:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/home/meiziyuan/triton/test_vdot.py":10:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/home/meiziyuan/triton/test_vdot.py":10:0), %arg3: i32 loc("/home/meiziyuan/triton/test_vdot.py":10:0)) attributes {noinline = false} {
    %true = arith.constant true loc(#loc1)
    %c32_i32 = arith.constant 32 : i32 loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.muli %0, %c32_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32> loc(#loc4)
    %3 = tt.splat %1 : i32 -> tensor<32xi32> loc(#loc5)
    %4 = arith.addi %3, %2 : tensor<32xi32> loc(#loc5)
    %5 = tt.splat %arg3 : i32 -> tensor<32xi32> loc(#loc6)
    %6 = arith.cmpi slt, %4, %5 : tensor<32xi32> loc(#loc6)
    %7 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<32x!tt.ptr<f32>> loc(#loc7)
    %8 = tt.addptr %7, %4 : tensor<32x!tt.ptr<f32>>, tensor<32xi32> loc(#loc7)
    %9 = tt.load %8, %6 : tensor<32x!tt.ptr<f32>> loc(#loc8)
    %10 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<32x!tt.ptr<f32>> loc(#loc9)
    %11 = tt.addptr %10, %4 : tensor<32x!tt.ptr<f32>>, tensor<32xi32> loc(#loc9)
    %12 = tt.load %11, %6 : tensor<32x!tt.ptr<f32>> loc(#loc10)
    %13 = arith.mulf %9, %12 : tensor<32xf32> loc(#loc11)
    %14 = tt.reshape %13 allow_reorder : tensor<32xf32> -> tensor<32xf32> loc(#loc17)
    %15 = "tt.reduce"(%14) <{axis = 0 : i32}> ({
    ^bb0(%arg4: f32 loc(callsite(#loc1 at #loc13)), %arg5: f32 loc(callsite(#loc1 at #loc13))):
      %17 = arith.addf %arg4, %arg5 : f32 loc(#loc20)
      tt.reduce.return %17 : f32 loc(#loc17)
    }) : (tensor<32xf32>) -> f32 loc(#loc17)
    %16 = tt.atomic_rmw fadd, acq_rel, gpu, %arg2, %15, %true : (!tt.ptr<f32>, f32, i1) -> f32 loc(#loc15)
    tt.return loc(#loc16)
  } loc(#loc)
} loc(#loc)
#loc2 = loc("/home/meiziyuan/triton/test_vdot.py":19:24)
#loc3 = loc("/home/meiziyuan/triton/test_vdot.py":20:19)
#loc4 = loc("/home/meiziyuan/triton/test_vdot.py":20:45)
#loc5 = loc("/home/meiziyuan/triton/test_vdot.py":20:32)
#loc6 = loc("/home/meiziyuan/triton/test_vdot.py":21:20)
#loc7 = loc("/home/meiziyuan/triton/test_vdot.py":23:28)
#loc8 = loc("/home/meiziyuan/triton/test_vdot.py":23:18)
#loc9 = loc("/home/meiziyuan/triton/test_vdot.py":24:32)
#loc10 = loc("/home/meiziyuan/triton/test_vdot.py":24:20)
#loc11 = loc("/home/meiziyuan/triton/test_vdot.py":26:23)
#loc12 = loc("/root/miniconda3/envs/vllm/lib/python3.12/site-packages/triton/language/standard.py":286:36)
#loc14 = loc("/root/miniconda3/envs/vllm/lib/python3.12/site-packages/triton/language/standard.py":256:15)
#loc15 = loc("/home/meiziyuan/triton/test_vdot.py":27:27)
#loc16 = loc("/home/meiziyuan/triton/test_vdot.py":27:4)
#loc17 = loc(callsite(#loc12 at #loc13))
#loc19 = loc(callsite(#loc14 at #loc12))
#loc20 = loc(callsite(#loc19 at #loc13))


// -----// IR Dump Before ConvertTritonToTritonGPU (convert-triton-to-tritongpu) ('builtin.module' operation) //----- //
#loc = loc("/home/meiziyuan/triton/test_vdot.py":10:0)
#loc1 = loc(unknown)
#loc13 = loc("/home/meiziyuan/triton/test_vdot.py":26:17)
#loc18 = loc(callsite(#loc1 at #loc13))
module {
  tt.func public @dot_kernel(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/home/meiziyuan/triton/test_vdot.py":10:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/home/meiziyuan/triton/test_vdot.py":10:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/home/meiziyuan/triton/test_vdot.py":10:0), %arg3: i32 loc("/home/meiziyuan/triton/test_vdot.py":10:0)) attributes {noinline = false} {
    %true = arith.constant true loc(#loc1)
    %c32_i32 = arith.constant 32 : i32 loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.muli %0, %c32_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32> loc(#loc4)
    %3 = tt.splat %1 : i32 -> tensor<32xi32> loc(#loc5)
    %4 = arith.addi %3, %2 : tensor<32xi32> loc(#loc5)
    %5 = tt.splat %arg3 : i32 -> tensor<32xi32> loc(#loc6)
    %6 = arith.cmpi slt, %4, %5 : tensor<32xi32> loc(#loc6)
    %7 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<32x!tt.ptr<f32>> loc(#loc7)
    %8 = tt.addptr %7, %4 : tensor<32x!tt.ptr<f32>>, tensor<32xi32> loc(#loc7)
    %9 = tt.load %8, %6 : tensor<32x!tt.ptr<f32>> loc(#loc8)
    %10 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<32x!tt.ptr<f32>> loc(#loc9)
    %11 = tt.addptr %10, %4 : tensor<32x!tt.ptr<f32>>, tensor<32xi32> loc(#loc9)
    %12 = tt.load %11, %6 : tensor<32x!tt.ptr<f32>> loc(#loc10)
    %13 = arith.mulf %9, %12 : tensor<32xf32> loc(#loc11)
    %14 = tt.reshape %13 allow_reorder : tensor<32xf32> -> tensor<32xf32> loc(#loc17)
    %15 = "tt.reduce"(%14) <{axis = 0 : i32}> ({
    ^bb0(%arg4: f32 loc(callsite(#loc1 at #loc13)), %arg5: f32 loc(callsite(#loc1 at #loc13))):
      %17 = arith.addf %arg4, %arg5 : f32 loc(#loc20)
      tt.reduce.return %17 : f32 loc(#loc17)
    }) : (tensor<32xf32>) -> f32 loc(#loc17)
    %16 = tt.atomic_rmw fadd, acq_rel, gpu, %arg2, %15, %true : (!tt.ptr<f32>, f32, i1) -> f32 loc(#loc15)
    tt.return loc(#loc16)
  } loc(#loc)
} loc(#loc)
#loc2 = loc("/home/meiziyuan/triton/test_vdot.py":19:24)
#loc3 = loc("/home/meiziyuan/triton/test_vdot.py":20:19)
#loc4 = loc("/home/meiziyuan/triton/test_vdot.py":20:45)
#loc5 = loc("/home/meiziyuan/triton/test_vdot.py":20:32)
#loc6 = loc("/home/meiziyuan/triton/test_vdot.py":21:20)
#loc7 = loc("/home/meiziyuan/triton/test_vdot.py":23:28)
#loc8 = loc("/home/meiziyuan/triton/test_vdot.py":23:18)
#loc9 = loc("/home/meiziyuan/triton/test_vdot.py":24:32)
#loc10 = loc("/home/meiziyuan/triton/test_vdot.py":24:20)
#loc11 = loc("/home/meiziyuan/triton/test_vdot.py":26:23)
#loc12 = loc("/root/miniconda3/envs/vllm/lib/python3.12/site-packages/triton/language/standard.py":286:36)
#loc14 = loc("/root/miniconda3/envs/vllm/lib/python3.12/site-packages/triton/language/standard.py":256:15)
#loc15 = loc("/home/meiziyuan/triton/test_vdot.py":27:27)
#loc16 = loc("/home/meiziyuan/triton/test_vdot.py":27:4)
#loc17 = loc(callsite(#loc12 at #loc13))
#loc19 = loc(callsite(#loc14 at #loc12))
#loc20 = loc(callsite(#loc19 at #loc13))


// -----// IR Dump Before TritonGPUCoalesce (tritongpu-coalesce) ('builtin.module' operation) //----- //
#blocked = #ttg.blocked<{sizePerThread = [1], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>
#loc = loc("/home/meiziyuan/triton/test_vdot.py":10:0)
#loc1 = loc(unknown)
#loc13 = loc("/home/meiziyuan/triton/test_vdot.py":26:17)
#loc18 = loc(callsite(#loc1 at #loc13))
module attributes {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.target = "cuda:90", "ttg.threads-per-warp" = 32 : i32} {
  tt.func public @dot_kernel(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/home/meiziyuan/triton/test_vdot.py":10:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/home/meiziyuan/triton/test_vdot.py":10:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/home/meiziyuan/triton/test_vdot.py":10:0), %arg3: i32 loc("/home/meiziyuan/triton/test_vdot.py":10:0)) attributes {noinline = false} {
    %true = arith.constant true loc(#loc1)
    %c32_i32 = arith.constant 32 : i32 loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.muli %0, %c32_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32, #blocked> loc(#loc4)
    %3 = tt.splat %1 : i32 -> tensor<32xi32, #blocked> loc(#loc5)
    %4 = arith.addi %3, %2 : tensor<32xi32, #blocked> loc(#loc5)
    %5 = tt.splat %arg3 : i32 -> tensor<32xi32, #blocked> loc(#loc6)
    %6 = arith.cmpi slt, %4, %5 : tensor<32xi32, #blocked> loc(#loc6)
    %7 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<32x!tt.ptr<f32>, #blocked> loc(#loc7)
    %8 = tt.addptr %7, %4 : tensor<32x!tt.ptr<f32>, #blocked>, tensor<32xi32, #blocked> loc(#loc7)
    %9 = tt.load %8, %6 : tensor<32x!tt.ptr<f32>, #blocked> loc(#loc8)
    %10 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<32x!tt.ptr<f32>, #blocked> loc(#loc9)
    %11 = tt.addptr %10, %4 : tensor<32x!tt.ptr<f32>, #blocked>, tensor<32xi32, #blocked> loc(#loc9)
    %12 = tt.load %11, %6 : tensor<32x!tt.ptr<f32>, #blocked> loc(#loc10)
    %13 = arith.mulf %9, %12 : tensor<32xf32, #blocked> loc(#loc11)
    %14 = tt.reshape %13 allow_reorder : tensor<32xf32, #blocked> -> tensor<32xf32, #blocked> loc(#loc17)
    %15 = "tt.reduce"(%14) <{axis = 0 : i32}> ({
    ^bb0(%arg4: f32 loc(callsite(#loc1 at #loc13)), %arg5: f32 loc(callsite(#loc1 at #loc13))):
      %17 = arith.addf %arg4, %arg5 : f32 loc(#loc20)
      tt.reduce.return %17 : f32 loc(#loc17)
    }) : (tensor<32xf32, #blocked>) -> f32 loc(#loc17)
    %16 = tt.atomic_rmw fadd, acq_rel, gpu, %arg2, %15, %true : (!tt.ptr<f32>, f32, i1) -> f32 loc(#loc15)
    tt.return loc(#loc16)
  } loc(#loc)
} loc(#loc)
#loc2 = loc("/home/meiziyuan/triton/test_vdot.py":19:24)
#loc3 = loc("/home/meiziyuan/triton/test_vdot.py":20:19)
#loc4 = loc("/home/meiziyuan/triton/test_vdot.py":20:45)
#loc5 = loc("/home/meiziyuan/triton/test_vdot.py":20:32)
#loc6 = loc("/home/meiziyuan/triton/test_vdot.py":21:20)
#loc7 = loc("/home/meiziyuan/triton/test_vdot.py":23:28)
#loc8 = loc("/home/meiziyuan/triton/test_vdot.py":23:18)
#loc9 = loc("/home/meiziyuan/triton/test_vdot.py":24:32)
#loc10 = loc("/home/meiziyuan/triton/test_vdot.py":24:20)
#loc11 = loc("/home/meiziyuan/triton/test_vdot.py":26:23)
#loc12 = loc("/root/miniconda3/envs/vllm/lib/python3.12/site-packages/triton/language/standard.py":286:36)
#loc14 = loc("/root/miniconda3/envs/vllm/lib/python3.12/site-packages/triton/language/standard.py":256:15)
#loc15 = loc("/home/meiziyuan/triton/test_vdot.py":27:27)
#loc16 = loc("/home/meiziyuan/triton/test_vdot.py":27:4)
#loc17 = loc(callsite(#loc12 at #loc13))
#loc19 = loc(callsite(#loc14 at #loc12))
#loc20 = loc(callsite(#loc19 at #loc13))


// -----// IR Dump Before TritonGPUF32DotTC (tritongpu-F32DotTC) ('builtin.module' operation) //----- //
#blocked = #ttg.blocked<{sizePerThread = [1], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>
#loc = loc("/home/meiziyuan/triton/test_vdot.py":10:0)
#loc1 = loc(unknown)
#loc13 = loc("/home/meiziyuan/triton/test_vdot.py":26:17)
#loc18 = loc(callsite(#loc1 at #loc13))
module attributes {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.target = "cuda:90", "ttg.threads-per-warp" = 32 : i32} {
  tt.func public @dot_kernel(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/home/meiziyuan/triton/test_vdot.py":10:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/home/meiziyuan/triton/test_vdot.py":10:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/home/meiziyuan/triton/test_vdot.py":10:0), %arg3: i32 loc("/home/meiziyuan/triton/test_vdot.py":10:0)) attributes {noinline = false} {
    %true = arith.constant true loc(#loc1)
    %c32_i32 = arith.constant 32 : i32 loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.muli %0, %c32_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32, #blocked> loc(#loc4)
    %3 = tt.splat %1 : i32 -> tensor<32xi32, #blocked> loc(#loc5)
    %4 = arith.addi %3, %2 : tensor<32xi32, #blocked> loc(#loc5)
    %5 = tt.splat %arg3 : i32 -> tensor<32xi32, #blocked> loc(#loc6)
    %6 = arith.cmpi slt, %4, %5 : tensor<32xi32, #blocked> loc(#loc6)
    %7 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<32x!tt.ptr<f32>, #blocked> loc(#loc7)
    %8 = tt.addptr %7, %4 : tensor<32x!tt.ptr<f32>, #blocked>, tensor<32xi32, #blocked> loc(#loc7)
    %9 = ttg.convert_layout %8 : tensor<32x!tt.ptr<f32>, #blocked> -> tensor<32x!tt.ptr<f32>, #blocked> loc(#loc8)
    %10 = ttg.convert_layout %6 : tensor<32xi1, #blocked> -> tensor<32xi1, #blocked> loc(#loc8)
    %11 = tt.load %9, %10 : tensor<32x!tt.ptr<f32>, #blocked> loc(#loc8)
    %12 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<32x!tt.ptr<f32>, #blocked> loc(#loc9)
    %13 = tt.addptr %12, %4 : tensor<32x!tt.ptr<f32>, #blocked>, tensor<32xi32, #blocked> loc(#loc9)
    %14 = ttg.convert_layout %13 : tensor<32x!tt.ptr<f32>, #blocked> -> tensor<32x!tt.ptr<f32>, #blocked> loc(#loc10)
    %15 = ttg.convert_layout %6 : tensor<32xi1, #blocked> -> tensor<32xi1, #blocked> loc(#loc10)
    %16 = tt.load %14, %15 : tensor<32x!tt.ptr<f32>, #blocked> loc(#loc10)
    %17 = arith.mulf %11, %16 : tensor<32xf32, #blocked> loc(#loc11)
    %18 = tt.reshape %17 allow_reorder : tensor<32xf32, #blocked> -> tensor<32xf32, #blocked> loc(#loc17)
    %19 = "tt.reduce"(%18) <{axis = 0 : i32}> ({
    ^bb0(%arg4: f32 loc(callsite(#loc1 at #loc13)), %arg5: f32 loc(callsite(#loc1 at #loc13))):
      %21 = arith.addf %arg4, %arg5 : f32 loc(#loc20)
      tt.reduce.return %21 : f32 loc(#loc17)
    }) : (tensor<32xf32, #blocked>) -> f32 loc(#loc17)
    %20 = tt.atomic_rmw fadd, acq_rel, gpu, %arg2, %19, %true : (!tt.ptr<f32>, f32, i1) -> f32 loc(#loc15)
    tt.return loc(#loc16)
  } loc(#loc)
} loc(#loc)
#loc2 = loc("/home/meiziyuan/triton/test_vdot.py":19:24)
#loc3 = loc("/home/meiziyuan/triton/test_vdot.py":20:19)
#loc4 = loc("/home/meiziyuan/triton/test_vdot.py":20:45)
#loc5 = loc("/home/meiziyuan/triton/test_vdot.py":20:32)
#loc6 = loc("/home/meiziyuan/triton/test_vdot.py":21:20)
#loc7 = loc("/home/meiziyuan/triton/test_vdot.py":23:28)
#loc8 = loc("/home/meiziyuan/triton/test_vdot.py":23:18)
#loc9 = loc("/home/meiziyuan/triton/test_vdot.py":24:32)
#loc10 = loc("/home/meiziyuan/triton/test_vdot.py":24:20)
#loc11 = loc("/home/meiziyuan/triton/test_vdot.py":26:23)
#loc12 = loc("/root/miniconda3/envs/vllm/lib/python3.12/site-packages/triton/language/standard.py":286:36)
#loc14 = loc("/root/miniconda3/envs/vllm/lib/python3.12/site-packages/triton/language/standard.py":256:15)
#loc15 = loc("/home/meiziyuan/triton/test_vdot.py":27:27)
#loc16 = loc("/home/meiziyuan/triton/test_vdot.py":27:4)
#loc17 = loc(callsite(#loc12 at #loc13))
#loc19 = loc(callsite(#loc14 at #loc12))
#loc20 = loc(callsite(#loc19 at #loc13))


// -----// IR Dump Before TritonGPUPlanCTAPass (triton-nvidia-gpu-plan-cta) ('builtin.module' operation) //----- //
#blocked = #ttg.blocked<{sizePerThread = [1], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>
#loc = loc("/home/meiziyuan/triton/test_vdot.py":10:0)
#loc1 = loc(unknown)
#loc13 = loc("/home/meiziyuan/triton/test_vdot.py":26:17)
#loc18 = loc(callsite(#loc1 at #loc13))
module attributes {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.target = "cuda:90", "ttg.threads-per-warp" = 32 : i32} {
  tt.func public @dot_kernel(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/home/meiziyuan/triton/test_vdot.py":10:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/home/meiziyuan/triton/test_vdot.py":10:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/home/meiziyuan/triton/test_vdot.py":10:0), %arg3: i32 loc("/home/meiziyuan/triton/test_vdot.py":10:0)) attributes {noinline = false} {
    %true = arith.constant true loc(#loc1)
    %c32_i32 = arith.constant 32 : i32 loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.muli %0, %c32_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32, #blocked> loc(#loc4)
    %3 = tt.splat %1 : i32 -> tensor<32xi32, #blocked> loc(#loc5)
    %4 = arith.addi %3, %2 : tensor<32xi32, #blocked> loc(#loc5)
    %5 = tt.splat %arg3 : i32 -> tensor<32xi32, #blocked> loc(#loc6)
    %6 = arith.cmpi slt, %4, %5 : tensor<32xi32, #blocked> loc(#loc6)
    %7 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<32x!tt.ptr<f32>, #blocked> loc(#loc7)
    %8 = tt.addptr %7, %4 : tensor<32x!tt.ptr<f32>, #blocked>, tensor<32xi32, #blocked> loc(#loc7)
    %9 = ttg.convert_layout %8 : tensor<32x!tt.ptr<f32>, #blocked> -> tensor<32x!tt.ptr<f32>, #blocked> loc(#loc8)
    %10 = ttg.convert_layout %6 : tensor<32xi1, #blocked> -> tensor<32xi1, #blocked> loc(#loc8)
    %11 = tt.load %9, %10 : tensor<32x!tt.ptr<f32>, #blocked> loc(#loc8)
    %12 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<32x!tt.ptr<f32>, #blocked> loc(#loc9)
    %13 = tt.addptr %12, %4 : tensor<32x!tt.ptr<f32>, #blocked>, tensor<32xi32, #blocked> loc(#loc9)
    %14 = ttg.convert_layout %13 : tensor<32x!tt.ptr<f32>, #blocked> -> tensor<32x!tt.ptr<f32>, #blocked> loc(#loc10)
    %15 = ttg.convert_layout %6 : tensor<32xi1, #blocked> -> tensor<32xi1, #blocked> loc(#loc10)
    %16 = tt.load %14, %15 : tensor<32x!tt.ptr<f32>, #blocked> loc(#loc10)
    %17 = arith.mulf %11, %16 : tensor<32xf32, #blocked> loc(#loc11)
    %18 = tt.reshape %17 allow_reorder : tensor<32xf32, #blocked> -> tensor<32xf32, #blocked> loc(#loc17)
    %19 = "tt.reduce"(%18) <{axis = 0 : i32}> ({
    ^bb0(%arg4: f32 loc(callsite(#loc1 at #loc13)), %arg5: f32 loc(callsite(#loc1 at #loc13))):
      %21 = arith.addf %arg4, %arg5 : f32 loc(#loc20)
      tt.reduce.return %21 : f32 loc(#loc17)
    }) : (tensor<32xf32, #blocked>) -> f32 loc(#loc17)
    %20 = tt.atomic_rmw fadd, acq_rel, gpu, %arg2, %19, %true : (!tt.ptr<f32>, f32, i1) -> f32 loc(#loc15)
    tt.return loc(#loc16)
  } loc(#loc)
} loc(#loc)
#loc2 = loc("/home/meiziyuan/triton/test_vdot.py":19:24)
#loc3 = loc("/home/meiziyuan/triton/test_vdot.py":20:19)
#loc4 = loc("/home/meiziyuan/triton/test_vdot.py":20:45)
#loc5 = loc("/home/meiziyuan/triton/test_vdot.py":20:32)
#loc6 = loc("/home/meiziyuan/triton/test_vdot.py":21:20)
#loc7 = loc("/home/meiziyuan/triton/test_vdot.py":23:28)
#loc8 = loc("/home/meiziyuan/triton/test_vdot.py":23:18)
#loc9 = loc("/home/meiziyuan/triton/test_vdot.py":24:32)
#loc10 = loc("/home/meiziyuan/triton/test_vdot.py":24:20)
#loc11 = loc("/home/meiziyuan/triton/test_vdot.py":26:23)
#loc12 = loc("/root/miniconda3/envs/vllm/lib/python3.12/site-packages/triton/language/standard.py":286:36)
#loc14 = loc("/root/miniconda3/envs/vllm/lib/python3.12/site-packages/triton/language/standard.py":256:15)
#loc15 = loc("/home/meiziyuan/triton/test_vdot.py":27:27)
#loc16 = loc("/home/meiziyuan/triton/test_vdot.py":27:4)
#loc17 = loc(callsite(#loc12 at #loc13))
#loc19 = loc(callsite(#loc14 at #loc12))
#loc20 = loc(callsite(#loc19 at #loc13))


// -----// IR Dump Before TritonGPURemoveLayoutConversions (tritongpu-remove-layout-conversions) ('builtin.module' operation) //----- //
#blocked = #ttg.blocked<{sizePerThread = [1], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>
#loc = loc("/home/meiziyuan/triton/test_vdot.py":10:0)
#loc1 = loc(unknown)
#loc13 = loc("/home/meiziyuan/triton/test_vdot.py":26:17)
#loc18 = loc(callsite(#loc1 at #loc13))
module attributes {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.target = "cuda:90", "ttg.threads-per-warp" = 32 : i32} {
  tt.func public @dot_kernel(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/home/meiziyuan/triton/test_vdot.py":10:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/home/meiziyuan/triton/test_vdot.py":10:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/home/meiziyuan/triton/test_vdot.py":10:0), %arg3: i32 loc("/home/meiziyuan/triton/test_vdot.py":10:0)) attributes {noinline = false} {
    %true = arith.constant true loc(#loc1)
    %c32_i32 = arith.constant 32 : i32 loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.muli %0, %c32_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32, #blocked> loc(#loc4)
    %3 = tt.splat %1 : i32 -> tensor<32xi32, #blocked> loc(#loc5)
    %4 = arith.addi %3, %2 : tensor<32xi32, #blocked> loc(#loc5)
    %5 = tt.splat %arg3 : i32 -> tensor<32xi32, #blocked> loc(#loc6)
    %6 = arith.cmpi slt, %4, %5 : tensor<32xi32, #blocked> loc(#loc6)
    %7 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<32x!tt.ptr<f32>, #blocked> loc(#loc7)
    %8 = tt.addptr %7, %4 : tensor<32x!tt.ptr<f32>, #blocked>, tensor<32xi32, #blocked> loc(#loc7)
    %9 = ttg.convert_layout %8 : tensor<32x!tt.ptr<f32>, #blocked> -> tensor<32x!tt.ptr<f32>, #blocked> loc(#loc8)
    %10 = ttg.convert_layout %6 : tensor<32xi1, #blocked> -> tensor<32xi1, #blocked> loc(#loc8)
    %11 = tt.load %9, %10 : tensor<32x!tt.ptr<f32>, #blocked> loc(#loc8)
    %12 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<32x!tt.ptr<f32>, #blocked> loc(#loc9)
    %13 = tt.addptr %12, %4 : tensor<32x!tt.ptr<f32>, #blocked>, tensor<32xi32, #blocked> loc(#loc9)
    %14 = ttg.convert_layout %13 : tensor<32x!tt.ptr<f32>, #blocked> -> tensor<32x!tt.ptr<f32>, #blocked> loc(#loc10)
    %15 = ttg.convert_layout %6 : tensor<32xi1, #blocked> -> tensor<32xi1, #blocked> loc(#loc10)
    %16 = tt.load %14, %15 : tensor<32x!tt.ptr<f32>, #blocked> loc(#loc10)
    %17 = arith.mulf %11, %16 : tensor<32xf32, #blocked> loc(#loc11)
    %18 = tt.reshape %17 allow_reorder : tensor<32xf32, #blocked> -> tensor<32xf32, #blocked> loc(#loc17)
    %19 = "tt.reduce"(%18) <{axis = 0 : i32}> ({
    ^bb0(%arg4: f32 loc(callsite(#loc1 at #loc13)), %arg5: f32 loc(callsite(#loc1 at #loc13))):
      %21 = arith.addf %arg4, %arg5 : f32 loc(#loc20)
      tt.reduce.return %21 : f32 loc(#loc17)
    }) : (tensor<32xf32, #blocked>) -> f32 loc(#loc17)
    %20 = tt.atomic_rmw fadd, acq_rel, gpu, %arg2, %19, %true : (!tt.ptr<f32>, f32, i1) -> f32 loc(#loc15)
    tt.return loc(#loc16)
  } loc(#loc)
} loc(#loc)
#loc2 = loc("/home/meiziyuan/triton/test_vdot.py":19:24)
#loc3 = loc("/home/meiziyuan/triton/test_vdot.py":20:19)
#loc4 = loc("/home/meiziyuan/triton/test_vdot.py":20:45)
#loc5 = loc("/home/meiziyuan/triton/test_vdot.py":20:32)
#loc6 = loc("/home/meiziyuan/triton/test_vdot.py":21:20)
#loc7 = loc("/home/meiziyuan/triton/test_vdot.py":23:28)
#loc8 = loc("/home/meiziyuan/triton/test_vdot.py":23:18)
#loc9 = loc("/home/meiziyuan/triton/test_vdot.py":24:32)
#loc10 = loc("/home/meiziyuan/triton/test_vdot.py":24:20)
#loc11 = loc("/home/meiziyuan/triton/test_vdot.py":26:23)
#loc12 = loc("/root/miniconda3/envs/vllm/lib/python3.12/site-packages/triton/language/standard.py":286:36)
#loc14 = loc("/root/miniconda3/envs/vllm/lib/python3.12/site-packages/triton/language/standard.py":256:15)
#loc15 = loc("/home/meiziyuan/triton/test_vdot.py":27:27)
#loc16 = loc("/home/meiziyuan/triton/test_vdot.py":27:4)
#loc17 = loc(callsite(#loc12 at #loc13))
#loc19 = loc(callsite(#loc14 at #loc12))
#loc20 = loc(callsite(#loc19 at #loc13))


// -----// IR Dump Before TritonGPUOptimizeThreadLocality (tritongpu-optimize-thread-locality) ('builtin.module' operation) //----- //
#blocked = #ttg.blocked<{sizePerThread = [1], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>
#loc = loc("/home/meiziyuan/triton/test_vdot.py":10:0)
#loc1 = loc(unknown)
#loc13 = loc("/home/meiziyuan/triton/test_vdot.py":26:17)
#loc18 = loc(callsite(#loc1 at #loc13))
module attributes {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.target = "cuda:90", "ttg.threads-per-warp" = 32 : i32} {
  tt.func public @dot_kernel(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/home/meiziyuan/triton/test_vdot.py":10:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/home/meiziyuan/triton/test_vdot.py":10:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/home/meiziyuan/triton/test_vdot.py":10:0), %arg3: i32 loc("/home/meiziyuan/triton/test_vdot.py":10:0)) attributes {noinline = false} {
    %true = arith.constant true loc(#loc1)
    %c32_i32 = arith.constant 32 : i32 loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.muli %0, %c32_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32, #blocked> loc(#loc4)
    %3 = tt.splat %1 : i32 -> tensor<32xi32, #blocked> loc(#loc5)
    %4 = arith.addi %3, %2 : tensor<32xi32, #blocked> loc(#loc5)
    %5 = tt.splat %arg3 : i32 -> tensor<32xi32, #blocked> loc(#loc6)
    %6 = arith.cmpi slt, %4, %5 : tensor<32xi32, #blocked> loc(#loc6)
    %7 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<32x!tt.ptr<f32>, #blocked> loc(#loc7)
    %8 = tt.addptr %7, %4 : tensor<32x!tt.ptr<f32>, #blocked>, tensor<32xi32, #blocked> loc(#loc7)
    %9 = tt.load %8, %6 : tensor<32x!tt.ptr<f32>, #blocked> loc(#loc8)
    %10 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<32x!tt.ptr<f32>, #blocked> loc(#loc9)
    %11 = tt.addptr %10, %4 : tensor<32x!tt.ptr<f32>, #blocked>, tensor<32xi32, #blocked> loc(#loc9)
    %12 = tt.load %11, %6 : tensor<32x!tt.ptr<f32>, #blocked> loc(#loc10)
    %13 = arith.mulf %9, %12 : tensor<32xf32, #blocked> loc(#loc11)
    %14 = tt.reshape %13 allow_reorder : tensor<32xf32, #blocked> -> tensor<32xf32, #blocked> loc(#loc17)
    %15 = "tt.reduce"(%14) <{axis = 0 : i32}> ({
    ^bb0(%arg4: f32 loc(callsite(#loc1 at #loc13)), %arg5: f32 loc(callsite(#loc1 at #loc13))):
      %17 = arith.addf %arg4, %arg5 : f32 loc(#loc20)
      tt.reduce.return %17 : f32 loc(#loc17)
    }) : (tensor<32xf32, #blocked>) -> f32 loc(#loc17)
    %16 = tt.atomic_rmw fadd, acq_rel, gpu, %arg2, %15, %true : (!tt.ptr<f32>, f32, i1) -> f32 loc(#loc15)
    tt.return loc(#loc16)
  } loc(#loc)
} loc(#loc)
#loc2 = loc("/home/meiziyuan/triton/test_vdot.py":19:24)
#loc3 = loc("/home/meiziyuan/triton/test_vdot.py":20:19)
#loc4 = loc("/home/meiziyuan/triton/test_vdot.py":20:45)
#loc5 = loc("/home/meiziyuan/triton/test_vdot.py":20:32)
#loc6 = loc("/home/meiziyuan/triton/test_vdot.py":21:20)
#loc7 = loc("/home/meiziyuan/triton/test_vdot.py":23:28)
#loc8 = loc("/home/meiziyuan/triton/test_vdot.py":23:18)
#loc9 = loc("/home/meiziyuan/triton/test_vdot.py":24:32)
#loc10 = loc("/home/meiziyuan/triton/test_vdot.py":24:20)
#loc11 = loc("/home/meiziyuan/triton/test_vdot.py":26:23)
#loc12 = loc("/root/miniconda3/envs/vllm/lib/python3.12/site-packages/triton/language/standard.py":286:36)
#loc14 = loc("/root/miniconda3/envs/vllm/lib/python3.12/site-packages/triton/language/standard.py":256:15)
#loc15 = loc("/home/meiziyuan/triton/test_vdot.py":27:27)
#loc16 = loc("/home/meiziyuan/triton/test_vdot.py":27:4)
#loc17 = loc(callsite(#loc12 at #loc13))
#loc19 = loc(callsite(#loc14 at #loc12))
#loc20 = loc(callsite(#loc19 at #loc13))


// -----// IR Dump Before TritonGPUAccelerateMatmul (tritongpu-accelerate-matmul) ('builtin.module' operation) //----- //
#blocked = #ttg.blocked<{sizePerThread = [1], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>
#loc = loc("/home/meiziyuan/triton/test_vdot.py":10:0)
#loc1 = loc(unknown)
#loc13 = loc("/home/meiziyuan/triton/test_vdot.py":26:17)
#loc18 = loc(callsite(#loc1 at #loc13))
module attributes {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.target = "cuda:90", "ttg.threads-per-warp" = 32 : i32} {
  tt.func public @dot_kernel(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/home/meiziyuan/triton/test_vdot.py":10:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/home/meiziyuan/triton/test_vdot.py":10:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/home/meiziyuan/triton/test_vdot.py":10:0), %arg3: i32 loc("/home/meiziyuan/triton/test_vdot.py":10:0)) attributes {noinline = false} {
    %true = arith.constant true loc(#loc1)
    %c32_i32 = arith.constant 32 : i32 loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.muli %0, %c32_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32, #blocked> loc(#loc4)
    %3 = tt.splat %1 : i32 -> tensor<32xi32, #blocked> loc(#loc5)
    %4 = arith.addi %3, %2 : tensor<32xi32, #blocked> loc(#loc5)
    %5 = tt.splat %arg3 : i32 -> tensor<32xi32, #blocked> loc(#loc6)
    %6 = arith.cmpi slt, %4, %5 : tensor<32xi32, #blocked> loc(#loc6)
    %7 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<32x!tt.ptr<f32>, #blocked> loc(#loc7)
    %8 = tt.addptr %7, %4 : tensor<32x!tt.ptr<f32>, #blocked>, tensor<32xi32, #blocked> loc(#loc7)
    %9 = tt.load %8, %6 : tensor<32x!tt.ptr<f32>, #blocked> loc(#loc8)
    %10 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<32x!tt.ptr<f32>, #blocked> loc(#loc9)
    %11 = tt.addptr %10, %4 : tensor<32x!tt.ptr<f32>, #blocked>, tensor<32xi32, #blocked> loc(#loc9)
    %12 = tt.load %11, %6 : tensor<32x!tt.ptr<f32>, #blocked> loc(#loc10)
    %13 = arith.mulf %9, %12 : tensor<32xf32, #blocked> loc(#loc11)
    %14 = tt.reshape %13 allow_reorder : tensor<32xf32, #blocked> -> tensor<32xf32, #blocked> loc(#loc17)
    %15 = "tt.reduce"(%14) <{axis = 0 : i32}> ({
    ^bb0(%arg4: f32 loc(callsite(#loc1 at #loc13)), %arg5: f32 loc(callsite(#loc1 at #loc13))):
      %17 = arith.addf %arg4, %arg5 : f32 loc(#loc20)
      tt.reduce.return %17 : f32 loc(#loc17)
    }) : (tensor<32xf32, #blocked>) -> f32 loc(#loc17)
    %16 = tt.atomic_rmw fadd, acq_rel, gpu, %arg2, %15, %true : (!tt.ptr<f32>, f32, i1) -> f32 loc(#loc15)
    tt.return loc(#loc16)
  } loc(#loc)
} loc(#loc)
#loc2 = loc("/home/meiziyuan/triton/test_vdot.py":19:24)
#loc3 = loc("/home/meiziyuan/triton/test_vdot.py":20:19)
#loc4 = loc("/home/meiziyuan/triton/test_vdot.py":20:45)
#loc5 = loc("/home/meiziyuan/triton/test_vdot.py":20:32)
#loc6 = loc("/home/meiziyuan/triton/test_vdot.py":21:20)
#loc7 = loc("/home/meiziyuan/triton/test_vdot.py":23:28)
#loc8 = loc("/home/meiziyuan/triton/test_vdot.py":23:18)
#loc9 = loc("/home/meiziyuan/triton/test_vdot.py":24:32)
#loc10 = loc("/home/meiziyuan/triton/test_vdot.py":24:20)
#loc11 = loc("/home/meiziyuan/triton/test_vdot.py":26:23)
#loc12 = loc("/root/miniconda3/envs/vllm/lib/python3.12/site-packages/triton/language/standard.py":286:36)
#loc14 = loc("/root/miniconda3/envs/vllm/lib/python3.12/site-packages/triton/language/standard.py":256:15)
#loc15 = loc("/home/meiziyuan/triton/test_vdot.py":27:27)
#loc16 = loc("/home/meiziyuan/triton/test_vdot.py":27:4)
#loc17 = loc(callsite(#loc12 at #loc13))
#loc19 = loc(callsite(#loc14 at #loc12))
#loc20 = loc(callsite(#loc19 at #loc13))


// -----// IR Dump Before TritonGPURemoveLayoutConversions (tritongpu-remove-layout-conversions) ('builtin.module' operation) //----- //
#blocked = #ttg.blocked<{sizePerThread = [1], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>
#loc = loc("/home/meiziyuan/triton/test_vdot.py":10:0)
#loc1 = loc(unknown)
#loc13 = loc("/home/meiziyuan/triton/test_vdot.py":26:17)
#loc18 = loc(callsite(#loc1 at #loc13))
module attributes {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.target = "cuda:90", "ttg.threads-per-warp" = 32 : i32} {
  tt.func public @dot_kernel(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/home/meiziyuan/triton/test_vdot.py":10:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/home/meiziyuan/triton/test_vdot.py":10:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/home/meiziyuan/triton/test_vdot.py":10:0), %arg3: i32 loc("/home/meiziyuan/triton/test_vdot.py":10:0)) attributes {noinline = false} {
    %true = arith.constant true loc(#loc1)
    %c32_i32 = arith.constant 32 : i32 loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.muli %0, %c32_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32, #blocked> loc(#loc4)
    %3 = tt.splat %1 : i32 -> tensor<32xi32, #blocked> loc(#loc5)
    %4 = arith.addi %3, %2 : tensor<32xi32, #blocked> loc(#loc5)
    %5 = tt.splat %arg3 : i32 -> tensor<32xi32, #blocked> loc(#loc6)
    %6 = arith.cmpi slt, %4, %5 : tensor<32xi32, #blocked> loc(#loc6)
    %7 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<32x!tt.ptr<f32>, #blocked> loc(#loc7)
    %8 = tt.addptr %7, %4 : tensor<32x!tt.ptr<f32>, #blocked>, tensor<32xi32, #blocked> loc(#loc7)
    %9 = tt.load %8, %6 : tensor<32x!tt.ptr<f32>, #blocked> loc(#loc8)
    %10 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<32x!tt.ptr<f32>, #blocked> loc(#loc9)
    %11 = tt.addptr %10, %4 : tensor<32x!tt.ptr<f32>, #blocked>, tensor<32xi32, #blocked> loc(#loc9)
    %12 = tt.load %11, %6 : tensor<32x!tt.ptr<f32>, #blocked> loc(#loc10)
    %13 = arith.mulf %9, %12 : tensor<32xf32, #blocked> loc(#loc11)
    %14 = tt.reshape %13 allow_reorder : tensor<32xf32, #blocked> -> tensor<32xf32, #blocked> loc(#loc17)
    %15 = "tt.reduce"(%14) <{axis = 0 : i32}> ({
    ^bb0(%arg4: f32 loc(callsite(#loc1 at #loc13)), %arg5: f32 loc(callsite(#loc1 at #loc13))):
      %17 = arith.addf %arg4, %arg5 : f32 loc(#loc20)
      tt.reduce.return %17 : f32 loc(#loc17)
    }) : (tensor<32xf32, #blocked>) -> f32 loc(#loc17)
    %16 = tt.atomic_rmw fadd, acq_rel, gpu, %arg2, %15, %true : (!tt.ptr<f32>, f32, i1) -> f32 loc(#loc15)
    tt.return loc(#loc16)
  } loc(#loc)
} loc(#loc)
#loc2 = loc("/home/meiziyuan/triton/test_vdot.py":19:24)
#loc3 = loc("/home/meiziyuan/triton/test_vdot.py":20:19)
#loc4 = loc("/home/meiziyuan/triton/test_vdot.py":20:45)
#loc5 = loc("/home/meiziyuan/triton/test_vdot.py":20:32)
#loc6 = loc("/home/meiziyuan/triton/test_vdot.py":21:20)
#loc7 = loc("/home/meiziyuan/triton/test_vdot.py":23:28)
#loc8 = loc("/home/meiziyuan/triton/test_vdot.py":23:18)
#loc9 = loc("/home/meiziyuan/triton/test_vdot.py":24:32)
#loc10 = loc("/home/meiziyuan/triton/test_vdot.py":24:20)
#loc11 = loc("/home/meiziyuan/triton/test_vdot.py":26:23)
#loc12 = loc("/root/miniconda3/envs/vllm/lib/python3.12/site-packages/triton/language/standard.py":286:36)
#loc14 = loc("/root/miniconda3/envs/vllm/lib/python3.12/site-packages/triton/language/standard.py":256:15)
#loc15 = loc("/home/meiziyuan/triton/test_vdot.py":27:27)
#loc16 = loc("/home/meiziyuan/triton/test_vdot.py":27:4)
#loc17 = loc(callsite(#loc12 at #loc13))
#loc19 = loc(callsite(#loc14 at #loc12))
#loc20 = loc(callsite(#loc19 at #loc13))


// -----// IR Dump Before TritonGPUOptimizeDotOperands (tritongpu-optimize-dot-operands) ('builtin.module' operation) //----- //
#blocked = #ttg.blocked<{sizePerThread = [1], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>
#loc = loc("/home/meiziyuan/triton/test_vdot.py":10:0)
#loc1 = loc(unknown)
#loc13 = loc("/home/meiziyuan/triton/test_vdot.py":26:17)
#loc18 = loc(callsite(#loc1 at #loc13))
module attributes {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.target = "cuda:90", "ttg.threads-per-warp" = 32 : i32} {
  tt.func public @dot_kernel(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/home/meiziyuan/triton/test_vdot.py":10:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/home/meiziyuan/triton/test_vdot.py":10:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/home/meiziyuan/triton/test_vdot.py":10:0), %arg3: i32 loc("/home/meiziyuan/triton/test_vdot.py":10:0)) attributes {noinline = false} {
    %true = arith.constant true loc(#loc1)
    %c32_i32 = arith.constant 32 : i32 loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.muli %0, %c32_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32, #blocked> loc(#loc4)
    %3 = tt.splat %1 : i32 -> tensor<32xi32, #blocked> loc(#loc5)
    %4 = arith.addi %3, %2 : tensor<32xi32, #blocked> loc(#loc5)
    %5 = tt.splat %arg3 : i32 -> tensor<32xi32, #blocked> loc(#loc6)
    %6 = arith.cmpi slt, %4, %5 : tensor<32xi32, #blocked> loc(#loc6)
    %7 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<32x!tt.ptr<f32>, #blocked> loc(#loc7)
    %8 = tt.addptr %7, %4 : tensor<32x!tt.ptr<f32>, #blocked>, tensor<32xi32, #blocked> loc(#loc7)
    %9 = tt.load %8, %6 : tensor<32x!tt.ptr<f32>, #blocked> loc(#loc8)
    %10 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<32x!tt.ptr<f32>, #blocked> loc(#loc9)
    %11 = tt.addptr %10, %4 : tensor<32x!tt.ptr<f32>, #blocked>, tensor<32xi32, #blocked> loc(#loc9)
    %12 = tt.load %11, %6 : tensor<32x!tt.ptr<f32>, #blocked> loc(#loc10)
    %13 = arith.mulf %9, %12 : tensor<32xf32, #blocked> loc(#loc11)
    %14 = tt.reshape %13 allow_reorder : tensor<32xf32, #blocked> -> tensor<32xf32, #blocked> loc(#loc17)
    %15 = "tt.reduce"(%14) <{axis = 0 : i32}> ({
    ^bb0(%arg4: f32 loc(callsite(#loc1 at #loc13)), %arg5: f32 loc(callsite(#loc1 at #loc13))):
      %17 = arith.addf %arg4, %arg5 : f32 loc(#loc20)
      tt.reduce.return %17 : f32 loc(#loc17)
    }) : (tensor<32xf32, #blocked>) -> f32 loc(#loc17)
    %16 = tt.atomic_rmw fadd, acq_rel, gpu, %arg2, %15, %true : (!tt.ptr<f32>, f32, i1) -> f32 loc(#loc15)
    tt.return loc(#loc16)
  } loc(#loc)
} loc(#loc)
#loc2 = loc("/home/meiziyuan/triton/test_vdot.py":19:24)
#loc3 = loc("/home/meiziyuan/triton/test_vdot.py":20:19)
#loc4 = loc("/home/meiziyuan/triton/test_vdot.py":20:45)
#loc5 = loc("/home/meiziyuan/triton/test_vdot.py":20:32)
#loc6 = loc("/home/meiziyuan/triton/test_vdot.py":21:20)
#loc7 = loc("/home/meiziyuan/triton/test_vdot.py":23:28)
#loc8 = loc("/home/meiziyuan/triton/test_vdot.py":23:18)
#loc9 = loc("/home/meiziyuan/triton/test_vdot.py":24:32)
#loc10 = loc("/home/meiziyuan/triton/test_vdot.py":24:20)
#loc11 = loc("/home/meiziyuan/triton/test_vdot.py":26:23)
#loc12 = loc("/root/miniconda3/envs/vllm/lib/python3.12/site-packages/triton/language/standard.py":286:36)
#loc14 = loc("/root/miniconda3/envs/vllm/lib/python3.12/site-packages/triton/language/standard.py":256:15)
#loc15 = loc("/home/meiziyuan/triton/test_vdot.py":27:27)
#loc16 = loc("/home/meiziyuan/triton/test_vdot.py":27:4)
#loc17 = loc(callsite(#loc12 at #loc13))
#loc19 = loc(callsite(#loc14 at #loc12))
#loc20 = loc(callsite(#loc19 at #loc13))


// -----// IR Dump Before Canonicalizer (canonicalize) ('builtin.module' operation) //----- //
#blocked = #ttg.blocked<{sizePerThread = [1], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>
#loc = loc("/home/meiziyuan/triton/test_vdot.py":10:0)
#loc1 = loc(unknown)
#loc13 = loc("/home/meiziyuan/triton/test_vdot.py":26:17)
#loc18 = loc(callsite(#loc1 at #loc13))
module attributes {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.target = "cuda:90", "ttg.threads-per-warp" = 32 : i32} {
  tt.func public @dot_kernel(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/home/meiziyuan/triton/test_vdot.py":10:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/home/meiziyuan/triton/test_vdot.py":10:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/home/meiziyuan/triton/test_vdot.py":10:0), %arg3: i32 loc("/home/meiziyuan/triton/test_vdot.py":10:0)) attributes {noinline = false} {
    %true = arith.constant true loc(#loc1)
    %c32_i32 = arith.constant 32 : i32 loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.muli %0, %c32_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32, #blocked> loc(#loc4)
    %3 = tt.splat %1 : i32 -> tensor<32xi32, #blocked> loc(#loc5)
    %4 = arith.addi %3, %2 : tensor<32xi32, #blocked> loc(#loc5)
    %5 = tt.splat %arg3 : i32 -> tensor<32xi32, #blocked> loc(#loc6)
    %6 = arith.cmpi slt, %4, %5 : tensor<32xi32, #blocked> loc(#loc6)
    %7 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<32x!tt.ptr<f32>, #blocked> loc(#loc7)
    %8 = tt.addptr %7, %4 : tensor<32x!tt.ptr<f32>, #blocked>, tensor<32xi32, #blocked> loc(#loc7)
    %9 = tt.load %8, %6 : tensor<32x!tt.ptr<f32>, #blocked> loc(#loc8)
    %10 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<32x!tt.ptr<f32>, #blocked> loc(#loc9)
    %11 = tt.addptr %10, %4 : tensor<32x!tt.ptr<f32>, #blocked>, tensor<32xi32, #blocked> loc(#loc9)
    %12 = tt.load %11, %6 : tensor<32x!tt.ptr<f32>, #blocked> loc(#loc10)
    %13 = arith.mulf %9, %12 : tensor<32xf32, #blocked> loc(#loc11)
    %14 = tt.reshape %13 allow_reorder : tensor<32xf32, #blocked> -> tensor<32xf32, #blocked> loc(#loc17)
    %15 = "tt.reduce"(%14) <{axis = 0 : i32}> ({
    ^bb0(%arg4: f32 loc(callsite(#loc1 at #loc13)), %arg5: f32 loc(callsite(#loc1 at #loc13))):
      %17 = arith.addf %arg4, %arg5 : f32 loc(#loc20)
      tt.reduce.return %17 : f32 loc(#loc17)
    }) : (tensor<32xf32, #blocked>) -> f32 loc(#loc17)
    %16 = tt.atomic_rmw fadd, acq_rel, gpu, %arg2, %15, %true : (!tt.ptr<f32>, f32, i1) -> f32 loc(#loc15)
    tt.return loc(#loc16)
  } loc(#loc)
} loc(#loc)
#loc2 = loc("/home/meiziyuan/triton/test_vdot.py":19:24)
#loc3 = loc("/home/meiziyuan/triton/test_vdot.py":20:19)
#loc4 = loc("/home/meiziyuan/triton/test_vdot.py":20:45)
#loc5 = loc("/home/meiziyuan/triton/test_vdot.py":20:32)
#loc6 = loc("/home/meiziyuan/triton/test_vdot.py":21:20)
#loc7 = loc("/home/meiziyuan/triton/test_vdot.py":23:28)
#loc8 = loc("/home/meiziyuan/triton/test_vdot.py":23:18)
#loc9 = loc("/home/meiziyuan/triton/test_vdot.py":24:32)
#loc10 = loc("/home/meiziyuan/triton/test_vdot.py":24:20)
#loc11 = loc("/home/meiziyuan/triton/test_vdot.py":26:23)
#loc12 = loc("/root/miniconda3/envs/vllm/lib/python3.12/site-packages/triton/language/standard.py":286:36)
#loc14 = loc("/root/miniconda3/envs/vllm/lib/python3.12/site-packages/triton/language/standard.py":256:15)
#loc15 = loc("/home/meiziyuan/triton/test_vdot.py":27:27)
#loc16 = loc("/home/meiziyuan/triton/test_vdot.py":27:4)
#loc17 = loc(callsite(#loc12 at #loc13))
#loc19 = loc(callsite(#loc14 at #loc12))
#loc20 = loc(callsite(#loc19 at #loc13))


// -----// IR Dump Before CSE (cse) ('builtin.module' operation) //----- //
#blocked = #ttg.blocked<{sizePerThread = [1], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>
#loc = loc("/home/meiziyuan/triton/test_vdot.py":10:0)
#loc1 = loc(unknown)
#loc13 = loc("/home/meiziyuan/triton/test_vdot.py":26:17)
#loc18 = loc(callsite(#loc1 at #loc13))
module attributes {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.target = "cuda:90", "ttg.threads-per-warp" = 32 : i32} {
  tt.func public @dot_kernel(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/home/meiziyuan/triton/test_vdot.py":10:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/home/meiziyuan/triton/test_vdot.py":10:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/home/meiziyuan/triton/test_vdot.py":10:0), %arg3: i32 loc("/home/meiziyuan/triton/test_vdot.py":10:0)) attributes {noinline = false} {
    %true = arith.constant true loc(#loc1)
    %c32_i32 = arith.constant 32 : i32 loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.muli %0, %c32_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32, #blocked> loc(#loc4)
    %3 = tt.splat %1 : i32 -> tensor<32xi32, #blocked> loc(#loc5)
    %4 = arith.addi %3, %2 : tensor<32xi32, #blocked> loc(#loc5)
    %5 = tt.splat %arg3 : i32 -> tensor<32xi32, #blocked> loc(#loc6)
    %6 = arith.cmpi slt, %4, %5 : tensor<32xi32, #blocked> loc(#loc6)
    %7 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<32x!tt.ptr<f32>, #blocked> loc(#loc7)
    %8 = tt.addptr %7, %4 : tensor<32x!tt.ptr<f32>, #blocked>, tensor<32xi32, #blocked> loc(#loc7)
    %9 = tt.load %8, %6 : tensor<32x!tt.ptr<f32>, #blocked> loc(#loc8)
    %10 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<32x!tt.ptr<f32>, #blocked> loc(#loc9)
    %11 = tt.addptr %10, %4 : tensor<32x!tt.ptr<f32>, #blocked>, tensor<32xi32, #blocked> loc(#loc9)
    %12 = tt.load %11, %6 : tensor<32x!tt.ptr<f32>, #blocked> loc(#loc10)
    %13 = arith.mulf %9, %12 : tensor<32xf32, #blocked> loc(#loc11)
    %14 = tt.reshape %13 allow_reorder : tensor<32xf32, #blocked> -> tensor<32xf32, #blocked> loc(#loc17)
    %15 = "tt.reduce"(%14) <{axis = 0 : i32}> ({
    ^bb0(%arg4: f32 loc(callsite(#loc1 at #loc13)), %arg5: f32 loc(callsite(#loc1 at #loc13))):
      %17 = arith.addf %arg4, %arg5 : f32 loc(#loc20)
      tt.reduce.return %17 : f32 loc(#loc17)
    }) : (tensor<32xf32, #blocked>) -> f32 loc(#loc17)
    %16 = tt.atomic_rmw fadd, acq_rel, gpu, %arg2, %15, %true : (!tt.ptr<f32>, f32, i1) -> f32 loc(#loc15)
    tt.return loc(#loc16)
  } loc(#loc)
} loc(#loc)
#loc2 = loc("/home/meiziyuan/triton/test_vdot.py":19:24)
#loc3 = loc("/home/meiziyuan/triton/test_vdot.py":20:19)
#loc4 = loc("/home/meiziyuan/triton/test_vdot.py":20:45)
#loc5 = loc("/home/meiziyuan/triton/test_vdot.py":20:32)
#loc6 = loc("/home/meiziyuan/triton/test_vdot.py":21:20)
#loc7 = loc("/home/meiziyuan/triton/test_vdot.py":23:28)
#loc8 = loc("/home/meiziyuan/triton/test_vdot.py":23:18)
#loc9 = loc("/home/meiziyuan/triton/test_vdot.py":24:32)
#loc10 = loc("/home/meiziyuan/triton/test_vdot.py":24:20)
#loc11 = loc("/home/meiziyuan/triton/test_vdot.py":26:23)
#loc12 = loc("/root/miniconda3/envs/vllm/lib/python3.12/site-packages/triton/language/standard.py":286:36)
#loc14 = loc("/root/miniconda3/envs/vllm/lib/python3.12/site-packages/triton/language/standard.py":256:15)
#loc15 = loc("/home/meiziyuan/triton/test_vdot.py":27:27)
#loc16 = loc("/home/meiziyuan/triton/test_vdot.py":27:4)
#loc17 = loc(callsite(#loc12 at #loc13))
#loc19 = loc(callsite(#loc14 at #loc12))
#loc20 = loc(callsite(#loc19 at #loc13))


// -----// IR Dump Before TritonGPUFuseNestedLoops (tritongpu-fuse-nested-loops) ('builtin.module' operation) //----- //
#blocked = #ttg.blocked<{sizePerThread = [1], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>
#loc = loc("/home/meiziyuan/triton/test_vdot.py":10:0)
#loc1 = loc(unknown)
#loc13 = loc("/home/meiziyuan/triton/test_vdot.py":26:17)
#loc18 = loc(callsite(#loc1 at #loc13))
module attributes {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.target = "cuda:90", "ttg.threads-per-warp" = 32 : i32} {
  tt.func public @dot_kernel(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/home/meiziyuan/triton/test_vdot.py":10:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/home/meiziyuan/triton/test_vdot.py":10:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/home/meiziyuan/triton/test_vdot.py":10:0), %arg3: i32 loc("/home/meiziyuan/triton/test_vdot.py":10:0)) attributes {noinline = false} {
    %true = arith.constant true loc(#loc1)
    %c32_i32 = arith.constant 32 : i32 loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.muli %0, %c32_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32, #blocked> loc(#loc4)
    %3 = tt.splat %1 : i32 -> tensor<32xi32, #blocked> loc(#loc5)
    %4 = arith.addi %3, %2 : tensor<32xi32, #blocked> loc(#loc5)
    %5 = tt.splat %arg3 : i32 -> tensor<32xi32, #blocked> loc(#loc6)
    %6 = arith.cmpi slt, %4, %5 : tensor<32xi32, #blocked> loc(#loc6)
    %7 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<32x!tt.ptr<f32>, #blocked> loc(#loc7)
    %8 = tt.addptr %7, %4 : tensor<32x!tt.ptr<f32>, #blocked>, tensor<32xi32, #blocked> loc(#loc7)
    %9 = tt.load %8, %6 : tensor<32x!tt.ptr<f32>, #blocked> loc(#loc8)
    %10 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<32x!tt.ptr<f32>, #blocked> loc(#loc9)
    %11 = tt.addptr %10, %4 : tensor<32x!tt.ptr<f32>, #blocked>, tensor<32xi32, #blocked> loc(#loc9)
    %12 = tt.load %11, %6 : tensor<32x!tt.ptr<f32>, #blocked> loc(#loc10)
    %13 = arith.mulf %9, %12 : tensor<32xf32, #blocked> loc(#loc11)
    %14 = tt.reshape %13 allow_reorder : tensor<32xf32, #blocked> -> tensor<32xf32, #blocked> loc(#loc17)
    %15 = "tt.reduce"(%14) <{axis = 0 : i32}> ({
    ^bb0(%arg4: f32 loc(callsite(#loc1 at #loc13)), %arg5: f32 loc(callsite(#loc1 at #loc13))):
      %17 = arith.addf %arg4, %arg5 : f32 loc(#loc20)
      tt.reduce.return %17 : f32 loc(#loc17)
    }) : (tensor<32xf32, #blocked>) -> f32 loc(#loc17)
    %16 = tt.atomic_rmw fadd, acq_rel, gpu, %arg2, %15, %true : (!tt.ptr<f32>, f32, i1) -> f32 loc(#loc15)
    tt.return loc(#loc16)
  } loc(#loc)
} loc(#loc)
#loc2 = loc("/home/meiziyuan/triton/test_vdot.py":19:24)
#loc3 = loc("/home/meiziyuan/triton/test_vdot.py":20:19)
#loc4 = loc("/home/meiziyuan/triton/test_vdot.py":20:45)
#loc5 = loc("/home/meiziyuan/triton/test_vdot.py":20:32)
#loc6 = loc("/home/meiziyuan/triton/test_vdot.py":21:20)
#loc7 = loc("/home/meiziyuan/triton/test_vdot.py":23:28)
#loc8 = loc("/home/meiziyuan/triton/test_vdot.py":23:18)
#loc9 = loc("/home/meiziyuan/triton/test_vdot.py":24:32)
#loc10 = loc("/home/meiziyuan/triton/test_vdot.py":24:20)
#loc11 = loc("/home/meiziyuan/triton/test_vdot.py":26:23)
#loc12 = loc("/root/miniconda3/envs/vllm/lib/python3.12/site-packages/triton/language/standard.py":286:36)
#loc14 = loc("/root/miniconda3/envs/vllm/lib/python3.12/site-packages/triton/language/standard.py":256:15)
#loc15 = loc("/home/meiziyuan/triton/test_vdot.py":27:27)
#loc16 = loc("/home/meiziyuan/triton/test_vdot.py":27:4)
#loc17 = loc(callsite(#loc12 at #loc13))
#loc19 = loc(callsite(#loc14 at #loc12))
#loc20 = loc(callsite(#loc19 at #loc13))


// -----// IR Dump Before Canonicalizer (canonicalize) ('builtin.module' operation) //----- //
#blocked = #ttg.blocked<{sizePerThread = [1], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>
#loc = loc("/home/meiziyuan/triton/test_vdot.py":10:0)
#loc1 = loc(unknown)
#loc13 = loc("/home/meiziyuan/triton/test_vdot.py":26:17)
#loc18 = loc(callsite(#loc1 at #loc13))
module attributes {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.target = "cuda:90", "ttg.threads-per-warp" = 32 : i32} {
  tt.func public @dot_kernel(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/home/meiziyuan/triton/test_vdot.py":10:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/home/meiziyuan/triton/test_vdot.py":10:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/home/meiziyuan/triton/test_vdot.py":10:0), %arg3: i32 loc("/home/meiziyuan/triton/test_vdot.py":10:0)) attributes {noinline = false} {
    %true = arith.constant true loc(#loc1)
    %c32_i32 = arith.constant 32 : i32 loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.muli %0, %c32_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32, #blocked> loc(#loc4)
    %3 = tt.splat %1 : i32 -> tensor<32xi32, #blocked> loc(#loc5)
    %4 = arith.addi %3, %2 : tensor<32xi32, #blocked> loc(#loc5)
    %5 = tt.splat %arg3 : i32 -> tensor<32xi32, #blocked> loc(#loc6)
    %6 = arith.cmpi slt, %4, %5 : tensor<32xi32, #blocked> loc(#loc6)
    %7 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<32x!tt.ptr<f32>, #blocked> loc(#loc7)
    %8 = tt.addptr %7, %4 : tensor<32x!tt.ptr<f32>, #blocked>, tensor<32xi32, #blocked> loc(#loc7)
    %9 = tt.load %8, %6 : tensor<32x!tt.ptr<f32>, #blocked> loc(#loc8)
    %10 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<32x!tt.ptr<f32>, #blocked> loc(#loc9)
    %11 = tt.addptr %10, %4 : tensor<32x!tt.ptr<f32>, #blocked>, tensor<32xi32, #blocked> loc(#loc9)
    %12 = tt.load %11, %6 : tensor<32x!tt.ptr<f32>, #blocked> loc(#loc10)
    %13 = arith.mulf %9, %12 : tensor<32xf32, #blocked> loc(#loc11)
    %14 = tt.reshape %13 allow_reorder : tensor<32xf32, #blocked> -> tensor<32xf32, #blocked> loc(#loc17)
    %15 = "tt.reduce"(%14) <{axis = 0 : i32}> ({
    ^bb0(%arg4: f32 loc(callsite(#loc1 at #loc13)), %arg5: f32 loc(callsite(#loc1 at #loc13))):
      %17 = arith.addf %arg4, %arg5 : f32 loc(#loc20)
      tt.reduce.return %17 : f32 loc(#loc17)
    }) : (tensor<32xf32, #blocked>) -> f32 loc(#loc17)
    %16 = tt.atomic_rmw fadd, acq_rel, gpu, %arg2, %15, %true : (!tt.ptr<f32>, f32, i1) -> f32 loc(#loc15)
    tt.return loc(#loc16)
  } loc(#loc)
} loc(#loc)
#loc2 = loc("/home/meiziyuan/triton/test_vdot.py":19:24)
#loc3 = loc("/home/meiziyuan/triton/test_vdot.py":20:19)
#loc4 = loc("/home/meiziyuan/triton/test_vdot.py":20:45)
#loc5 = loc("/home/meiziyuan/triton/test_vdot.py":20:32)
#loc6 = loc("/home/meiziyuan/triton/test_vdot.py":21:20)
#loc7 = loc("/home/meiziyuan/triton/test_vdot.py":23:28)
#loc8 = loc("/home/meiziyuan/triton/test_vdot.py":23:18)
#loc9 = loc("/home/meiziyuan/triton/test_vdot.py":24:32)
#loc10 = loc("/home/meiziyuan/triton/test_vdot.py":24:20)
#loc11 = loc("/home/meiziyuan/triton/test_vdot.py":26:23)
#loc12 = loc("/root/miniconda3/envs/vllm/lib/python3.12/site-packages/triton/language/standard.py":286:36)
#loc14 = loc("/root/miniconda3/envs/vllm/lib/python3.12/site-packages/triton/language/standard.py":256:15)
#loc15 = loc("/home/meiziyuan/triton/test_vdot.py":27:27)
#loc16 = loc("/home/meiziyuan/triton/test_vdot.py":27:4)
#loc17 = loc(callsite(#loc12 at #loc13))
#loc19 = loc(callsite(#loc14 at #loc12))
#loc20 = loc(callsite(#loc19 at #loc13))


// -----// IR Dump Before LoopInvariantCodeMotion (loop-invariant-code-motion) ('builtin.module' operation) //----- //
#blocked = #ttg.blocked<{sizePerThread = [1], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>
#loc = loc("/home/meiziyuan/triton/test_vdot.py":10:0)
#loc1 = loc(unknown)
#loc13 = loc("/home/meiziyuan/triton/test_vdot.py":26:17)
#loc18 = loc(callsite(#loc1 at #loc13))
module attributes {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.target = "cuda:90", "ttg.threads-per-warp" = 32 : i32} {
  tt.func public @dot_kernel(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/home/meiziyuan/triton/test_vdot.py":10:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/home/meiziyuan/triton/test_vdot.py":10:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/home/meiziyuan/triton/test_vdot.py":10:0), %arg3: i32 loc("/home/meiziyuan/triton/test_vdot.py":10:0)) attributes {noinline = false} {
    %true = arith.constant true loc(#loc1)
    %c32_i32 = arith.constant 32 : i32 loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.muli %0, %c32_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32, #blocked> loc(#loc4)
    %3 = tt.splat %1 : i32 -> tensor<32xi32, #blocked> loc(#loc5)
    %4 = arith.addi %3, %2 : tensor<32xi32, #blocked> loc(#loc5)
    %5 = tt.splat %arg3 : i32 -> tensor<32xi32, #blocked> loc(#loc6)
    %6 = arith.cmpi slt, %4, %5 : tensor<32xi32, #blocked> loc(#loc6)
    %7 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<32x!tt.ptr<f32>, #blocked> loc(#loc7)
    %8 = tt.addptr %7, %4 : tensor<32x!tt.ptr<f32>, #blocked>, tensor<32xi32, #blocked> loc(#loc7)
    %9 = tt.load %8, %6 : tensor<32x!tt.ptr<f32>, #blocked> loc(#loc8)
    %10 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<32x!tt.ptr<f32>, #blocked> loc(#loc9)
    %11 = tt.addptr %10, %4 : tensor<32x!tt.ptr<f32>, #blocked>, tensor<32xi32, #blocked> loc(#loc9)
    %12 = tt.load %11, %6 : tensor<32x!tt.ptr<f32>, #blocked> loc(#loc10)
    %13 = arith.mulf %9, %12 : tensor<32xf32, #blocked> loc(#loc11)
    %14 = tt.reshape %13 allow_reorder : tensor<32xf32, #blocked> -> tensor<32xf32, #blocked> loc(#loc17)
    %15 = "tt.reduce"(%14) <{axis = 0 : i32}> ({
    ^bb0(%arg4: f32 loc(callsite(#loc1 at #loc13)), %arg5: f32 loc(callsite(#loc1 at #loc13))):
      %17 = arith.addf %arg4, %arg5 : f32 loc(#loc20)
      tt.reduce.return %17 : f32 loc(#loc17)
    }) : (tensor<32xf32, #blocked>) -> f32 loc(#loc17)
    %16 = tt.atomic_rmw fadd, acq_rel, gpu, %arg2, %15, %true : (!tt.ptr<f32>, f32, i1) -> f32 loc(#loc15)
    tt.return loc(#loc16)
  } loc(#loc)
} loc(#loc)
#loc2 = loc("/home/meiziyuan/triton/test_vdot.py":19:24)
#loc3 = loc("/home/meiziyuan/triton/test_vdot.py":20:19)
#loc4 = loc("/home/meiziyuan/triton/test_vdot.py":20:45)
#loc5 = loc("/home/meiziyuan/triton/test_vdot.py":20:32)
#loc6 = loc("/home/meiziyuan/triton/test_vdot.py":21:20)
#loc7 = loc("/home/meiziyuan/triton/test_vdot.py":23:28)
#loc8 = loc("/home/meiziyuan/triton/test_vdot.py":23:18)
#loc9 = loc("/home/meiziyuan/triton/test_vdot.py":24:32)
#loc10 = loc("/home/meiziyuan/triton/test_vdot.py":24:20)
#loc11 = loc("/home/meiziyuan/triton/test_vdot.py":26:23)
#loc12 = loc("/root/miniconda3/envs/vllm/lib/python3.12/site-packages/triton/language/standard.py":286:36)
#loc14 = loc("/root/miniconda3/envs/vllm/lib/python3.12/site-packages/triton/language/standard.py":256:15)
#loc15 = loc("/home/meiziyuan/triton/test_vdot.py":27:27)
#loc16 = loc("/home/meiziyuan/triton/test_vdot.py":27:4)
#loc17 = loc(callsite(#loc12 at #loc13))
#loc19 = loc(callsite(#loc14 at #loc12))
#loc20 = loc(callsite(#loc19 at #loc13))


// -----// IR Dump Before TritonGPUOptimizeAccumulatorInit (tritongpu-optimize-accumulator-init) ('builtin.module' operation) //----- //
#blocked = #ttg.blocked<{sizePerThread = [1], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>
#loc = loc("/home/meiziyuan/triton/test_vdot.py":10:0)
#loc1 = loc(unknown)
#loc13 = loc("/home/meiziyuan/triton/test_vdot.py":26:17)
#loc18 = loc(callsite(#loc1 at #loc13))
module attributes {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.target = "cuda:90", "ttg.threads-per-warp" = 32 : i32} {
  tt.func public @dot_kernel(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/home/meiziyuan/triton/test_vdot.py":10:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/home/meiziyuan/triton/test_vdot.py":10:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/home/meiziyuan/triton/test_vdot.py":10:0), %arg3: i32 loc("/home/meiziyuan/triton/test_vdot.py":10:0)) attributes {noinline = false} {
    %true = arith.constant true loc(#loc1)
    %c32_i32 = arith.constant 32 : i32 loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.muli %0, %c32_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32, #blocked> loc(#loc4)
    %3 = tt.splat %1 : i32 -> tensor<32xi32, #blocked> loc(#loc5)
    %4 = arith.addi %3, %2 : tensor<32xi32, #blocked> loc(#loc5)
    %5 = tt.splat %arg3 : i32 -> tensor<32xi32, #blocked> loc(#loc6)
    %6 = arith.cmpi slt, %4, %5 : tensor<32xi32, #blocked> loc(#loc6)
    %7 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<32x!tt.ptr<f32>, #blocked> loc(#loc7)
    %8 = tt.addptr %7, %4 : tensor<32x!tt.ptr<f32>, #blocked>, tensor<32xi32, #blocked> loc(#loc7)
    %9 = tt.load %8, %6 : tensor<32x!tt.ptr<f32>, #blocked> loc(#loc8)
    %10 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<32x!tt.ptr<f32>, #blocked> loc(#loc9)
    %11 = tt.addptr %10, %4 : tensor<32x!tt.ptr<f32>, #blocked>, tensor<32xi32, #blocked> loc(#loc9)
    %12 = tt.load %11, %6 : tensor<32x!tt.ptr<f32>, #blocked> loc(#loc10)
    %13 = arith.mulf %9, %12 : tensor<32xf32, #blocked> loc(#loc11)
    %14 = tt.reshape %13 allow_reorder : tensor<32xf32, #blocked> -> tensor<32xf32, #blocked> loc(#loc17)
    %15 = "tt.reduce"(%14) <{axis = 0 : i32}> ({
    ^bb0(%arg4: f32 loc(callsite(#loc1 at #loc13)), %arg5: f32 loc(callsite(#loc1 at #loc13))):
      %17 = arith.addf %arg4, %arg5 : f32 loc(#loc20)
      tt.reduce.return %17 : f32 loc(#loc17)
    }) : (tensor<32xf32, #blocked>) -> f32 loc(#loc17)
    %16 = tt.atomic_rmw fadd, acq_rel, gpu, %arg2, %15, %true : (!tt.ptr<f32>, f32, i1) -> f32 loc(#loc15)
    tt.return loc(#loc16)
  } loc(#loc)
} loc(#loc)
#loc2 = loc("/home/meiziyuan/triton/test_vdot.py":19:24)
#loc3 = loc("/home/meiziyuan/triton/test_vdot.py":20:19)
#loc4 = loc("/home/meiziyuan/triton/test_vdot.py":20:45)
#loc5 = loc("/home/meiziyuan/triton/test_vdot.py":20:32)
#loc6 = loc("/home/meiziyuan/triton/test_vdot.py":21:20)
#loc7 = loc("/home/meiziyuan/triton/test_vdot.py":23:28)
#loc8 = loc("/home/meiziyuan/triton/test_vdot.py":23:18)
#loc9 = loc("/home/meiziyuan/triton/test_vdot.py":24:32)
#loc10 = loc("/home/meiziyuan/triton/test_vdot.py":24:20)
#loc11 = loc("/home/meiziyuan/triton/test_vdot.py":26:23)
#loc12 = loc("/root/miniconda3/envs/vllm/lib/python3.12/site-packages/triton/language/standard.py":286:36)
#loc14 = loc("/root/miniconda3/envs/vllm/lib/python3.12/site-packages/triton/language/standard.py":256:15)
#loc15 = loc("/home/meiziyuan/triton/test_vdot.py":27:27)
#loc16 = loc("/home/meiziyuan/triton/test_vdot.py":27:4)
#loc17 = loc(callsite(#loc12 at #loc13))
#loc19 = loc(callsite(#loc14 at #loc12))
#loc20 = loc(callsite(#loc19 at #loc13))


// -----// IR Dump Before Canonicalizer (canonicalize) ('builtin.module' operation) //----- //
#blocked = #ttg.blocked<{sizePerThread = [1], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>
#loc = loc("/home/meiziyuan/triton/test_vdot.py":10:0)
#loc1 = loc(unknown)
#loc13 = loc("/home/meiziyuan/triton/test_vdot.py":26:17)
#loc18 = loc(callsite(#loc1 at #loc13))
module attributes {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.target = "cuda:90", "ttg.threads-per-warp" = 32 : i32} {
  tt.func public @dot_kernel(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/home/meiziyuan/triton/test_vdot.py":10:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/home/meiziyuan/triton/test_vdot.py":10:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/home/meiziyuan/triton/test_vdot.py":10:0), %arg3: i32 loc("/home/meiziyuan/triton/test_vdot.py":10:0)) attributes {noinline = false} {
    %true = arith.constant true loc(#loc1)
    %c32_i32 = arith.constant 32 : i32 loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.muli %0, %c32_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32, #blocked> loc(#loc4)
    %3 = tt.splat %1 : i32 -> tensor<32xi32, #blocked> loc(#loc5)
    %4 = arith.addi %3, %2 : tensor<32xi32, #blocked> loc(#loc5)
    %5 = tt.splat %arg3 : i32 -> tensor<32xi32, #blocked> loc(#loc6)
    %6 = arith.cmpi slt, %4, %5 : tensor<32xi32, #blocked> loc(#loc6)
    %7 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<32x!tt.ptr<f32>, #blocked> loc(#loc7)
    %8 = tt.addptr %7, %4 : tensor<32x!tt.ptr<f32>, #blocked>, tensor<32xi32, #blocked> loc(#loc7)
    %9 = tt.load %8, %6 : tensor<32x!tt.ptr<f32>, #blocked> loc(#loc8)
    %10 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<32x!tt.ptr<f32>, #blocked> loc(#loc9)
    %11 = tt.addptr %10, %4 : tensor<32x!tt.ptr<f32>, #blocked>, tensor<32xi32, #blocked> loc(#loc9)
    %12 = tt.load %11, %6 : tensor<32x!tt.ptr<f32>, #blocked> loc(#loc10)
    %13 = arith.mulf %9, %12 : tensor<32xf32, #blocked> loc(#loc11)
    %14 = tt.reshape %13 allow_reorder : tensor<32xf32, #blocked> -> tensor<32xf32, #blocked> loc(#loc17)
    %15 = "tt.reduce"(%14) <{axis = 0 : i32}> ({
    ^bb0(%arg4: f32 loc(callsite(#loc1 at #loc13)), %arg5: f32 loc(callsite(#loc1 at #loc13))):
      %17 = arith.addf %arg4, %arg5 : f32 loc(#loc20)
      tt.reduce.return %17 : f32 loc(#loc17)
    }) : (tensor<32xf32, #blocked>) -> f32 loc(#loc17)
    %16 = tt.atomic_rmw fadd, acq_rel, gpu, %arg2, %15, %true : (!tt.ptr<f32>, f32, i1) -> f32 loc(#loc15)
    tt.return loc(#loc16)
  } loc(#loc)
} loc(#loc)
#loc2 = loc("/home/meiziyuan/triton/test_vdot.py":19:24)
#loc3 = loc("/home/meiziyuan/triton/test_vdot.py":20:19)
#loc4 = loc("/home/meiziyuan/triton/test_vdot.py":20:45)
#loc5 = loc("/home/meiziyuan/triton/test_vdot.py":20:32)
#loc6 = loc("/home/meiziyuan/triton/test_vdot.py":21:20)
#loc7 = loc("/home/meiziyuan/triton/test_vdot.py":23:28)
#loc8 = loc("/home/meiziyuan/triton/test_vdot.py":23:18)
#loc9 = loc("/home/meiziyuan/triton/test_vdot.py":24:32)
#loc10 = loc("/home/meiziyuan/triton/test_vdot.py":24:20)
#loc11 = loc("/home/meiziyuan/triton/test_vdot.py":26:23)
#loc12 = loc("/root/miniconda3/envs/vllm/lib/python3.12/site-packages/triton/language/standard.py":286:36)
#loc14 = loc("/root/miniconda3/envs/vllm/lib/python3.12/site-packages/triton/language/standard.py":256:15)
#loc15 = loc("/home/meiziyuan/triton/test_vdot.py":27:27)
#loc16 = loc("/home/meiziyuan/triton/test_vdot.py":27:4)
#loc17 = loc(callsite(#loc12 at #loc13))
#loc19 = loc(callsite(#loc14 at #loc12))
#loc20 = loc(callsite(#loc19 at #loc13))


// -----// IR Dump Before TritonGPUCombineTensorSelectAndIf (tritongpu-combine-tensor-select-and-if) ('builtin.module' operation) //----- //
#blocked = #ttg.blocked<{sizePerThread = [1], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>
#loc = loc("/home/meiziyuan/triton/test_vdot.py":10:0)
#loc1 = loc(unknown)
#loc13 = loc("/home/meiziyuan/triton/test_vdot.py":26:17)
#loc18 = loc(callsite(#loc1 at #loc13))
module attributes {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.target = "cuda:90", "ttg.threads-per-warp" = 32 : i32} {
  tt.func public @dot_kernel(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/home/meiziyuan/triton/test_vdot.py":10:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/home/meiziyuan/triton/test_vdot.py":10:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/home/meiziyuan/triton/test_vdot.py":10:0), %arg3: i32 loc("/home/meiziyuan/triton/test_vdot.py":10:0)) attributes {noinline = false} {
    %true = arith.constant true loc(#loc1)
    %c32_i32 = arith.constant 32 : i32 loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.muli %0, %c32_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32, #blocked> loc(#loc4)
    %3 = tt.splat %1 : i32 -> tensor<32xi32, #blocked> loc(#loc5)
    %4 = arith.addi %3, %2 : tensor<32xi32, #blocked> loc(#loc5)
    %5 = tt.splat %arg3 : i32 -> tensor<32xi32, #blocked> loc(#loc6)
    %6 = arith.cmpi slt, %4, %5 : tensor<32xi32, #blocked> loc(#loc6)
    %7 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<32x!tt.ptr<f32>, #blocked> loc(#loc7)
    %8 = tt.addptr %7, %4 : tensor<32x!tt.ptr<f32>, #blocked>, tensor<32xi32, #blocked> loc(#loc7)
    %9 = tt.load %8, %6 : tensor<32x!tt.ptr<f32>, #blocked> loc(#loc8)
    %10 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<32x!tt.ptr<f32>, #blocked> loc(#loc9)
    %11 = tt.addptr %10, %4 : tensor<32x!tt.ptr<f32>, #blocked>, tensor<32xi32, #blocked> loc(#loc9)
    %12 = tt.load %11, %6 : tensor<32x!tt.ptr<f32>, #blocked> loc(#loc10)
    %13 = arith.mulf %9, %12 : tensor<32xf32, #blocked> loc(#loc11)
    %14 = tt.reshape %13 allow_reorder : tensor<32xf32, #blocked> -> tensor<32xf32, #blocked> loc(#loc17)
    %15 = "tt.reduce"(%14) <{axis = 0 : i32}> ({
    ^bb0(%arg4: f32 loc(callsite(#loc1 at #loc13)), %arg5: f32 loc(callsite(#loc1 at #loc13))):
      %17 = arith.addf %arg4, %arg5 : f32 loc(#loc20)
      tt.reduce.return %17 : f32 loc(#loc17)
    }) : (tensor<32xf32, #blocked>) -> f32 loc(#loc17)
    %16 = tt.atomic_rmw fadd, acq_rel, gpu, %arg2, %15, %true : (!tt.ptr<f32>, f32, i1) -> f32 loc(#loc15)
    tt.return loc(#loc16)
  } loc(#loc)
} loc(#loc)
#loc2 = loc("/home/meiziyuan/triton/test_vdot.py":19:24)
#loc3 = loc("/home/meiziyuan/triton/test_vdot.py":20:19)
#loc4 = loc("/home/meiziyuan/triton/test_vdot.py":20:45)
#loc5 = loc("/home/meiziyuan/triton/test_vdot.py":20:32)
#loc6 = loc("/home/meiziyuan/triton/test_vdot.py":21:20)
#loc7 = loc("/home/meiziyuan/triton/test_vdot.py":23:28)
#loc8 = loc("/home/meiziyuan/triton/test_vdot.py":23:18)
#loc9 = loc("/home/meiziyuan/triton/test_vdot.py":24:32)
#loc10 = loc("/home/meiziyuan/triton/test_vdot.py":24:20)
#loc11 = loc("/home/meiziyuan/triton/test_vdot.py":26:23)
#loc12 = loc("/root/miniconda3/envs/vllm/lib/python3.12/site-packages/triton/language/standard.py":286:36)
#loc14 = loc("/root/miniconda3/envs/vllm/lib/python3.12/site-packages/triton/language/standard.py":256:15)
#loc15 = loc("/home/meiziyuan/triton/test_vdot.py":27:27)
#loc16 = loc("/home/meiziyuan/triton/test_vdot.py":27:4)
#loc17 = loc(callsite(#loc12 at #loc13))
#loc19 = loc(callsite(#loc14 at #loc12))
#loc20 = loc(callsite(#loc19 at #loc13))


// -----// IR Dump Before TritonGPUWSTaskPartition (tritongpu-warp-spec-task-partition) ('builtin.module' operation) //----- //
#blocked = #ttg.blocked<{sizePerThread = [1], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>
#loc = loc("/home/meiziyuan/triton/test_vdot.py":10:0)
#loc1 = loc(unknown)
#loc13 = loc("/home/meiziyuan/triton/test_vdot.py":26:17)
#loc18 = loc(callsite(#loc1 at #loc13))
module attributes {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.target = "cuda:90", "ttg.threads-per-warp" = 32 : i32} {
  tt.func public @dot_kernel(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/home/meiziyuan/triton/test_vdot.py":10:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/home/meiziyuan/triton/test_vdot.py":10:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/home/meiziyuan/triton/test_vdot.py":10:0), %arg3: i32 loc("/home/meiziyuan/triton/test_vdot.py":10:0)) attributes {noinline = false} {
    %true = arith.constant true loc(#loc1)
    %c32_i32 = arith.constant 32 : i32 loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.muli %0, %c32_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32, #blocked> loc(#loc4)
    %3 = tt.splat %1 : i32 -> tensor<32xi32, #blocked> loc(#loc5)
    %4 = arith.addi %3, %2 : tensor<32xi32, #blocked> loc(#loc5)
    %5 = tt.splat %arg3 : i32 -> tensor<32xi32, #blocked> loc(#loc6)
    %6 = arith.cmpi slt, %4, %5 : tensor<32xi32, #blocked> loc(#loc6)
    %7 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<32x!tt.ptr<f32>, #blocked> loc(#loc7)
    %8 = tt.addptr %7, %4 : tensor<32x!tt.ptr<f32>, #blocked>, tensor<32xi32, #blocked> loc(#loc7)
    %9 = tt.load %8, %6 : tensor<32x!tt.ptr<f32>, #blocked> loc(#loc8)
    %10 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<32x!tt.ptr<f32>, #blocked> loc(#loc9)
    %11 = tt.addptr %10, %4 : tensor<32x!tt.ptr<f32>, #blocked>, tensor<32xi32, #blocked> loc(#loc9)
    %12 = tt.load %11, %6 : tensor<32x!tt.ptr<f32>, #blocked> loc(#loc10)
    %13 = arith.mulf %9, %12 : tensor<32xf32, #blocked> loc(#loc11)
    %14 = tt.reshape %13 allow_reorder : tensor<32xf32, #blocked> -> tensor<32xf32, #blocked> loc(#loc17)
    %15 = "tt.reduce"(%14) <{axis = 0 : i32}> ({
    ^bb0(%arg4: f32 loc(callsite(#loc1 at #loc13)), %arg5: f32 loc(callsite(#loc1 at #loc13))):
      %17 = arith.addf %arg4, %arg5 : f32 loc(#loc20)
      tt.reduce.return %17 : f32 loc(#loc17)
    }) : (tensor<32xf32, #blocked>) -> f32 loc(#loc17)
    %16 = tt.atomic_rmw fadd, acq_rel, gpu, %arg2, %15, %true : (!tt.ptr<f32>, f32, i1) -> f32 loc(#loc15)
    tt.return loc(#loc16)
  } loc(#loc)
} loc(#loc)
#loc2 = loc("/home/meiziyuan/triton/test_vdot.py":19:24)
#loc3 = loc("/home/meiziyuan/triton/test_vdot.py":20:19)
#loc4 = loc("/home/meiziyuan/triton/test_vdot.py":20:45)
#loc5 = loc("/home/meiziyuan/triton/test_vdot.py":20:32)
#loc6 = loc("/home/meiziyuan/triton/test_vdot.py":21:20)
#loc7 = loc("/home/meiziyuan/triton/test_vdot.py":23:28)
#loc8 = loc("/home/meiziyuan/triton/test_vdot.py":23:18)
#loc9 = loc("/home/meiziyuan/triton/test_vdot.py":24:32)
#loc10 = loc("/home/meiziyuan/triton/test_vdot.py":24:20)
#loc11 = loc("/home/meiziyuan/triton/test_vdot.py":26:23)
#loc12 = loc("/root/miniconda3/envs/vllm/lib/python3.12/site-packages/triton/language/standard.py":286:36)
#loc14 = loc("/root/miniconda3/envs/vllm/lib/python3.12/site-packages/triton/language/standard.py":256:15)
#loc15 = loc("/home/meiziyuan/triton/test_vdot.py":27:27)
#loc16 = loc("/home/meiziyuan/triton/test_vdot.py":27:4)
#loc17 = loc(callsite(#loc12 at #loc13))
#loc19 = loc(callsite(#loc14 at #loc12))
#loc20 = loc(callsite(#loc19 at #loc13))


// -----// IR Dump Before TritonGPUTaskIdPropagate (triton-gpu-taskid-propagate) ('builtin.module' operation) //----- //
#blocked = #ttg.blocked<{sizePerThread = [1], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>
#loc = loc("/home/meiziyuan/triton/test_vdot.py":10:0)
#loc1 = loc(unknown)
#loc13 = loc("/home/meiziyuan/triton/test_vdot.py":26:17)
#loc18 = loc(callsite(#loc1 at #loc13))
module attributes {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.target = "cuda:90", "ttg.threads-per-warp" = 32 : i32} {
  tt.func public @dot_kernel(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/home/meiziyuan/triton/test_vdot.py":10:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/home/meiziyuan/triton/test_vdot.py":10:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/home/meiziyuan/triton/test_vdot.py":10:0), %arg3: i32 loc("/home/meiziyuan/triton/test_vdot.py":10:0)) attributes {noinline = false} {
    %true = arith.constant true loc(#loc1)
    %c32_i32 = arith.constant 32 : i32 loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.muli %0, %c32_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32, #blocked> loc(#loc4)
    %3 = tt.splat %1 : i32 -> tensor<32xi32, #blocked> loc(#loc5)
    %4 = arith.addi %3, %2 : tensor<32xi32, #blocked> loc(#loc5)
    %5 = tt.splat %arg3 : i32 -> tensor<32xi32, #blocked> loc(#loc6)
    %6 = arith.cmpi slt, %4, %5 : tensor<32xi32, #blocked> loc(#loc6)
    %7 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<32x!tt.ptr<f32>, #blocked> loc(#loc7)
    %8 = tt.addptr %7, %4 : tensor<32x!tt.ptr<f32>, #blocked>, tensor<32xi32, #blocked> loc(#loc7)
    %9 = tt.load %8, %6 : tensor<32x!tt.ptr<f32>, #blocked> loc(#loc8)
    %10 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<32x!tt.ptr<f32>, #blocked> loc(#loc9)
    %11 = tt.addptr %10, %4 : tensor<32x!tt.ptr<f32>, #blocked>, tensor<32xi32, #blocked> loc(#loc9)
    %12 = tt.load %11, %6 : tensor<32x!tt.ptr<f32>, #blocked> loc(#loc10)
    %13 = arith.mulf %9, %12 : tensor<32xf32, #blocked> loc(#loc11)
    %14 = tt.reshape %13 allow_reorder : tensor<32xf32, #blocked> -> tensor<32xf32, #blocked> loc(#loc17)
    %15 = "tt.reduce"(%14) <{axis = 0 : i32}> ({
    ^bb0(%arg4: f32 loc(callsite(#loc1 at #loc13)), %arg5: f32 loc(callsite(#loc1 at #loc13))):
      %17 = arith.addf %arg4, %arg5 : f32 loc(#loc20)
      tt.reduce.return %17 : f32 loc(#loc17)
    }) : (tensor<32xf32, #blocked>) -> f32 loc(#loc17)
    %16 = tt.atomic_rmw fadd, acq_rel, gpu, %arg2, %15, %true : (!tt.ptr<f32>, f32, i1) -> f32 loc(#loc15)
    tt.return loc(#loc16)
  } loc(#loc)
} loc(#loc)
#loc2 = loc("/home/meiziyuan/triton/test_vdot.py":19:24)
#loc3 = loc("/home/meiziyuan/triton/test_vdot.py":20:19)
#loc4 = loc("/home/meiziyuan/triton/test_vdot.py":20:45)
#loc5 = loc("/home/meiziyuan/triton/test_vdot.py":20:32)
#loc6 = loc("/home/meiziyuan/triton/test_vdot.py":21:20)
#loc7 = loc("/home/meiziyuan/triton/test_vdot.py":23:28)
#loc8 = loc("/home/meiziyuan/triton/test_vdot.py":23:18)
#loc9 = loc("/home/meiziyuan/triton/test_vdot.py":24:32)
#loc10 = loc("/home/meiziyuan/triton/test_vdot.py":24:20)
#loc11 = loc("/home/meiziyuan/triton/test_vdot.py":26:23)
#loc12 = loc("/root/miniconda3/envs/vllm/lib/python3.12/site-packages/triton/language/standard.py":286:36)
#loc14 = loc("/root/miniconda3/envs/vllm/lib/python3.12/site-packages/triton/language/standard.py":256:15)
#loc15 = loc("/home/meiziyuan/triton/test_vdot.py":27:27)
#loc16 = loc("/home/meiziyuan/triton/test_vdot.py":27:4)
#loc17 = loc(callsite(#loc12 at #loc13))
#loc19 = loc(callsite(#loc14 at #loc12))
#loc20 = loc(callsite(#loc19 at #loc13))


// -----// IR Dump Before TritonGPUWSDataPartition (tritongpu-warp-spec-data-partition) ('builtin.module' operation) //----- //
#blocked = #ttg.blocked<{sizePerThread = [1], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>
#loc = loc("/home/meiziyuan/triton/test_vdot.py":10:0)
#loc1 = loc(unknown)
#loc13 = loc("/home/meiziyuan/triton/test_vdot.py":26:17)
#loc18 = loc(callsite(#loc1 at #loc13))
module attributes {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.target = "cuda:90", "ttg.threads-per-warp" = 32 : i32} {
  tt.func public @dot_kernel(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/home/meiziyuan/triton/test_vdot.py":10:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/home/meiziyuan/triton/test_vdot.py":10:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/home/meiziyuan/triton/test_vdot.py":10:0), %arg3: i32 loc("/home/meiziyuan/triton/test_vdot.py":10:0)) attributes {noinline = false} {
    %true = arith.constant true loc(#loc1)
    %c32_i32 = arith.constant 32 : i32 loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.muli %0, %c32_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32, #blocked> loc(#loc4)
    %3 = tt.splat %1 : i32 -> tensor<32xi32, #blocked> loc(#loc5)
    %4 = arith.addi %3, %2 : tensor<32xi32, #blocked> loc(#loc5)
    %5 = tt.splat %arg3 : i32 -> tensor<32xi32, #blocked> loc(#loc6)
    %6 = arith.cmpi slt, %4, %5 : tensor<32xi32, #blocked> loc(#loc6)
    %7 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<32x!tt.ptr<f32>, #blocked> loc(#loc7)
    %8 = tt.addptr %7, %4 : tensor<32x!tt.ptr<f32>, #blocked>, tensor<32xi32, #blocked> loc(#loc7)
    %9 = tt.load %8, %6 : tensor<32x!tt.ptr<f32>, #blocked> loc(#loc8)
    %10 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<32x!tt.ptr<f32>, #blocked> loc(#loc9)
    %11 = tt.addptr %10, %4 : tensor<32x!tt.ptr<f32>, #blocked>, tensor<32xi32, #blocked> loc(#loc9)
    %12 = tt.load %11, %6 : tensor<32x!tt.ptr<f32>, #blocked> loc(#loc10)
    %13 = arith.mulf %9, %12 : tensor<32xf32, #blocked> loc(#loc11)
    %14 = tt.reshape %13 allow_reorder : tensor<32xf32, #blocked> -> tensor<32xf32, #blocked> loc(#loc17)
    %15 = "tt.reduce"(%14) <{axis = 0 : i32}> ({
    ^bb0(%arg4: f32 loc(callsite(#loc1 at #loc13)), %arg5: f32 loc(callsite(#loc1 at #loc13))):
      %17 = arith.addf %arg4, %arg5 : f32 loc(#loc20)
      tt.reduce.return %17 : f32 loc(#loc17)
    }) : (tensor<32xf32, #blocked>) -> f32 loc(#loc17)
    %16 = tt.atomic_rmw fadd, acq_rel, gpu, %arg2, %15, %true : (!tt.ptr<f32>, f32, i1) -> f32 loc(#loc15)
    tt.return loc(#loc16)
  } loc(#loc)
} loc(#loc)
#loc2 = loc("/home/meiziyuan/triton/test_vdot.py":19:24)
#loc3 = loc("/home/meiziyuan/triton/test_vdot.py":20:19)
#loc4 = loc("/home/meiziyuan/triton/test_vdot.py":20:45)
#loc5 = loc("/home/meiziyuan/triton/test_vdot.py":20:32)
#loc6 = loc("/home/meiziyuan/triton/test_vdot.py":21:20)
#loc7 = loc("/home/meiziyuan/triton/test_vdot.py":23:28)
#loc8 = loc("/home/meiziyuan/triton/test_vdot.py":23:18)
#loc9 = loc("/home/meiziyuan/triton/test_vdot.py":24:32)
#loc10 = loc("/home/meiziyuan/triton/test_vdot.py":24:20)
#loc11 = loc("/home/meiziyuan/triton/test_vdot.py":26:23)
#loc12 = loc("/root/miniconda3/envs/vllm/lib/python3.12/site-packages/triton/language/standard.py":286:36)
#loc14 = loc("/root/miniconda3/envs/vllm/lib/python3.12/site-packages/triton/language/standard.py":256:15)
#loc15 = loc("/home/meiziyuan/triton/test_vdot.py":27:27)
#loc16 = loc("/home/meiziyuan/triton/test_vdot.py":27:4)
#loc17 = loc(callsite(#loc12 at #loc13))
#loc19 = loc(callsite(#loc14 at #loc12))
#loc20 = loc(callsite(#loc19 at #loc13))


// -----// IR Dump Before TritonGPUWSCodePartition (tritongpu-warp-spec-code-partition) ('builtin.module' operation) //----- //
#blocked = #ttg.blocked<{sizePerThread = [1], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>
#loc = loc("/home/meiziyuan/triton/test_vdot.py":10:0)
#loc1 = loc(unknown)
#loc13 = loc("/home/meiziyuan/triton/test_vdot.py":26:17)
#loc18 = loc(callsite(#loc1 at #loc13))
module attributes {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.target = "cuda:90", "ttg.threads-per-warp" = 32 : i32} {
  tt.func public @dot_kernel(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/home/meiziyuan/triton/test_vdot.py":10:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/home/meiziyuan/triton/test_vdot.py":10:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/home/meiziyuan/triton/test_vdot.py":10:0), %arg3: i32 loc("/home/meiziyuan/triton/test_vdot.py":10:0)) attributes {noinline = false} {
    %true = arith.constant true loc(#loc1)
    %c32_i32 = arith.constant 32 : i32 loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.muli %0, %c32_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32, #blocked> loc(#loc4)
    %3 = tt.splat %1 : i32 -> tensor<32xi32, #blocked> loc(#loc5)
    %4 = arith.addi %3, %2 : tensor<32xi32, #blocked> loc(#loc5)
    %5 = tt.splat %arg3 : i32 -> tensor<32xi32, #blocked> loc(#loc6)
    %6 = arith.cmpi slt, %4, %5 : tensor<32xi32, #blocked> loc(#loc6)
    %7 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<32x!tt.ptr<f32>, #blocked> loc(#loc7)
    %8 = tt.addptr %7, %4 : tensor<32x!tt.ptr<f32>, #blocked>, tensor<32xi32, #blocked> loc(#loc7)
    %9 = tt.load %8, %6 : tensor<32x!tt.ptr<f32>, #blocked> loc(#loc8)
    %10 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<32x!tt.ptr<f32>, #blocked> loc(#loc9)
    %11 = tt.addptr %10, %4 : tensor<32x!tt.ptr<f32>, #blocked>, tensor<32xi32, #blocked> loc(#loc9)
    %12 = tt.load %11, %6 : tensor<32x!tt.ptr<f32>, #blocked> loc(#loc10)
    %13 = arith.mulf %9, %12 : tensor<32xf32, #blocked> loc(#loc11)
    %14 = tt.reshape %13 allow_reorder : tensor<32xf32, #blocked> -> tensor<32xf32, #blocked> loc(#loc17)
    %15 = "tt.reduce"(%14) <{axis = 0 : i32}> ({
    ^bb0(%arg4: f32 loc(callsite(#loc1 at #loc13)), %arg5: f32 loc(callsite(#loc1 at #loc13))):
      %17 = arith.addf %arg4, %arg5 : f32 loc(#loc20)
      tt.reduce.return %17 : f32 loc(#loc17)
    }) : (tensor<32xf32, #blocked>) -> f32 loc(#loc17)
    %16 = tt.atomic_rmw fadd, acq_rel, gpu, %arg2, %15, %true : (!tt.ptr<f32>, f32, i1) -> f32 loc(#loc15)
    tt.return loc(#loc16)
  } loc(#loc)
} loc(#loc)
#loc2 = loc("/home/meiziyuan/triton/test_vdot.py":19:24)
#loc3 = loc("/home/meiziyuan/triton/test_vdot.py":20:19)
#loc4 = loc("/home/meiziyuan/triton/test_vdot.py":20:45)
#loc5 = loc("/home/meiziyuan/triton/test_vdot.py":20:32)
#loc6 = loc("/home/meiziyuan/triton/test_vdot.py":21:20)
#loc7 = loc("/home/meiziyuan/triton/test_vdot.py":23:28)
#loc8 = loc("/home/meiziyuan/triton/test_vdot.py":23:18)
#loc9 = loc("/home/meiziyuan/triton/test_vdot.py":24:32)
#loc10 = loc("/home/meiziyuan/triton/test_vdot.py":24:20)
#loc11 = loc("/home/meiziyuan/triton/test_vdot.py":26:23)
#loc12 = loc("/root/miniconda3/envs/vllm/lib/python3.12/site-packages/triton/language/standard.py":286:36)
#loc14 = loc("/root/miniconda3/envs/vllm/lib/python3.12/site-packages/triton/language/standard.py":256:15)
#loc15 = loc("/home/meiziyuan/triton/test_vdot.py":27:27)
#loc16 = loc("/home/meiziyuan/triton/test_vdot.py":27:4)
#loc17 = loc(callsite(#loc12 at #loc13))
#loc19 = loc(callsite(#loc14 at #loc12))
#loc20 = loc(callsite(#loc19 at #loc13))


// -----// IR Dump Before TritonGPUPipeline (tritongpu-pipeline) ('builtin.module' operation) //----- //
#blocked = #ttg.blocked<{sizePerThread = [1], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>
#loc = loc("/home/meiziyuan/triton/test_vdot.py":10:0)
#loc1 = loc(unknown)
#loc13 = loc("/home/meiziyuan/triton/test_vdot.py":26:17)
#loc18 = loc(callsite(#loc1 at #loc13))
module attributes {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.target = "cuda:90", "ttg.threads-per-warp" = 32 : i32} {
  tt.func public @dot_kernel(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/home/meiziyuan/triton/test_vdot.py":10:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/home/meiziyuan/triton/test_vdot.py":10:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/home/meiziyuan/triton/test_vdot.py":10:0), %arg3: i32 loc("/home/meiziyuan/triton/test_vdot.py":10:0)) attributes {noinline = false} {
    %true = arith.constant true loc(#loc1)
    %c32_i32 = arith.constant 32 : i32 loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.muli %0, %c32_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32, #blocked> loc(#loc4)
    %3 = tt.splat %1 : i32 -> tensor<32xi32, #blocked> loc(#loc5)
    %4 = arith.addi %3, %2 : tensor<32xi32, #blocked> loc(#loc5)
    %5 = tt.splat %arg3 : i32 -> tensor<32xi32, #blocked> loc(#loc6)
    %6 = arith.cmpi slt, %4, %5 : tensor<32xi32, #blocked> loc(#loc6)
    %7 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<32x!tt.ptr<f32>, #blocked> loc(#loc7)
    %8 = tt.addptr %7, %4 : tensor<32x!tt.ptr<f32>, #blocked>, tensor<32xi32, #blocked> loc(#loc7)
    %9 = tt.load %8, %6 : tensor<32x!tt.ptr<f32>, #blocked> loc(#loc8)
    %10 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<32x!tt.ptr<f32>, #blocked> loc(#loc9)
    %11 = tt.addptr %10, %4 : tensor<32x!tt.ptr<f32>, #blocked>, tensor<32xi32, #blocked> loc(#loc9)
    %12 = tt.load %11, %6 : tensor<32x!tt.ptr<f32>, #blocked> loc(#loc10)
    %13 = arith.mulf %9, %12 : tensor<32xf32, #blocked> loc(#loc11)
    %14 = tt.reshape %13 allow_reorder : tensor<32xf32, #blocked> -> tensor<32xf32, #blocked> loc(#loc17)
    %15 = "tt.reduce"(%14) <{axis = 0 : i32}> ({
    ^bb0(%arg4: f32 loc(callsite(#loc1 at #loc13)), %arg5: f32 loc(callsite(#loc1 at #loc13))):
      %17 = arith.addf %arg4, %arg5 : f32 loc(#loc20)
      tt.reduce.return %17 : f32 loc(#loc17)
    }) : (tensor<32xf32, #blocked>) -> f32 loc(#loc17)
    %16 = tt.atomic_rmw fadd, acq_rel, gpu, %arg2, %15, %true : (!tt.ptr<f32>, f32, i1) -> f32 loc(#loc15)
    tt.return loc(#loc16)
  } loc(#loc)
} loc(#loc)
#loc2 = loc("/home/meiziyuan/triton/test_vdot.py":19:24)
#loc3 = loc("/home/meiziyuan/triton/test_vdot.py":20:19)
#loc4 = loc("/home/meiziyuan/triton/test_vdot.py":20:45)
#loc5 = loc("/home/meiziyuan/triton/test_vdot.py":20:32)
#loc6 = loc("/home/meiziyuan/triton/test_vdot.py":21:20)
#loc7 = loc("/home/meiziyuan/triton/test_vdot.py":23:28)
#loc8 = loc("/home/meiziyuan/triton/test_vdot.py":23:18)
#loc9 = loc("/home/meiziyuan/triton/test_vdot.py":24:32)
#loc10 = loc("/home/meiziyuan/triton/test_vdot.py":24:20)
#loc11 = loc("/home/meiziyuan/triton/test_vdot.py":26:23)
#loc12 = loc("/root/miniconda3/envs/vllm/lib/python3.12/site-packages/triton/language/standard.py":286:36)
#loc14 = loc("/root/miniconda3/envs/vllm/lib/python3.12/site-packages/triton/language/standard.py":256:15)
#loc15 = loc("/home/meiziyuan/triton/test_vdot.py":27:27)
#loc16 = loc("/home/meiziyuan/triton/test_vdot.py":27:4)
#loc17 = loc(callsite(#loc12 at #loc13))
#loc19 = loc(callsite(#loc14 at #loc12))
#loc20 = loc(callsite(#loc19 at #loc13))


// -----// SoftwarePipeliner internal IR Dump After: AssignLatencies
module attributes {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.target = "cuda:90", "ttg.threads-per-warp" = 32 : i32} {
  tt.func public @dot_kernel(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32}, %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32}, %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32}, %arg3: i32) attributes {noinline = false} {
    %true = arith.constant true
    %c32_i32 = arith.constant 32 : i32
    %0 = tt.get_program_id x : i32
    %1 = arith.muli %0, %c32_i32 : i32
    %2 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32, #ttg.blocked<{sizePerThread = [1], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>>
    %3 = tt.splat %1 : i32 -> tensor<32xi32, #ttg.blocked<{sizePerThread = [1], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>>
    %4 = arith.addi %3, %2 : tensor<32xi32, #ttg.blocked<{sizePerThread = [1], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>>
    %5 = tt.splat %arg3 : i32 -> tensor<32xi32, #ttg.blocked<{sizePerThread = [1], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>>
    %6 = arith.cmpi slt, %4, %5 : tensor<32xi32, #ttg.blocked<{sizePerThread = [1], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>>
    %7 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<32x!tt.ptr<f32>, #ttg.blocked<{sizePerThread = [1], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>>
    %8 = tt.addptr %7, %4 : tensor<32x!tt.ptr<f32>, #ttg.blocked<{sizePerThread = [1], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>>, tensor<32xi32, #ttg.blocked<{sizePerThread = [1], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>>
    %9 = tt.load %8, %6 : tensor<32x!tt.ptr<f32>, #ttg.blocked<{sizePerThread = [1], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>>
    %10 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<32x!tt.ptr<f32>, #ttg.blocked<{sizePerThread = [1], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>>
    %11 = tt.addptr %10, %4 : tensor<32x!tt.ptr<f32>, #ttg.blocked<{sizePerThread = [1], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>>, tensor<32xi32, #ttg.blocked<{sizePerThread = [1], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>>
    %12 = tt.load %11, %6 : tensor<32x!tt.ptr<f32>, #ttg.blocked<{sizePerThread = [1], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>>
    %13 = arith.mulf %9, %12 : tensor<32xf32, #ttg.blocked<{sizePerThread = [1], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>>
    %14 = tt.reshape %13 allow_reorder : tensor<32xf32, #ttg.blocked<{sizePerThread = [1], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>> -> tensor<32xf32, #ttg.blocked<{sizePerThread = [1], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>>
    %15 = "tt.reduce"(%14) <{axis = 0 : i32}> ({
    ^bb0(%arg4: f32, %arg5: f32):
      %17 = arith.addf %arg4, %arg5 : f32
      tt.reduce.return %17 : f32
    }) : (tensor<32xf32, #ttg.blocked<{sizePerThread = [1], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>>) -> f32
    %16 = tt.atomic_rmw fadd, acq_rel, gpu, %arg2, %15, %true : (!tt.ptr<f32>, f32, i1) -> f32
    tt.return
  }
}


// -----// SoftwarePipeliner internal IR Dump After: ScheduleLoops
module attributes {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.target = "cuda:90", "ttg.threads-per-warp" = 32 : i32} {
  tt.func public @dot_kernel(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32}, %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32}, %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32}, %arg3: i32) attributes {noinline = false} {
    %true = arith.constant true
    %c32_i32 = arith.constant 32 : i32
    %0 = tt.get_program_id x : i32
    %1 = arith.muli %0, %c32_i32 : i32
    %2 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32, #ttg.blocked<{sizePerThread = [1], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>>
    %3 = tt.splat %1 : i32 -> tensor<32xi32, #ttg.blocked<{sizePerThread = [1], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>>
    %4 = arith.addi %3, %2 : tensor<32xi32, #ttg.blocked<{sizePerThread = [1], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>>
    %5 = tt.splat %arg3 : i32 -> tensor<32xi32, #ttg.blocked<{sizePerThread = [1], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>>
    %6 = arith.cmpi slt, %4, %5 : tensor<32xi32, #ttg.blocked<{sizePerThread = [1], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>>
    %7 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<32x!tt.ptr<f32>, #ttg.blocked<{sizePerThread = [1], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>>
    %8 = tt.addptr %7, %4 : tensor<32x!tt.ptr<f32>, #ttg.blocked<{sizePerThread = [1], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>>, tensor<32xi32, #ttg.blocked<{sizePerThread = [1], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>>
    %9 = tt.load %8, %6 : tensor<32x!tt.ptr<f32>, #ttg.blocked<{sizePerThread = [1], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>>
    %10 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<32x!tt.ptr<f32>, #ttg.blocked<{sizePerThread = [1], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>>
    %11 = tt.addptr %10, %4 : tensor<32x!tt.ptr<f32>, #ttg.blocked<{sizePerThread = [1], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>>, tensor<32xi32, #ttg.blocked<{sizePerThread = [1], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>>
    %12 = tt.load %11, %6 : tensor<32x!tt.ptr<f32>, #ttg.blocked<{sizePerThread = [1], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>>
    %13 = arith.mulf %9, %12 : tensor<32xf32, #ttg.blocked<{sizePerThread = [1], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>>
    %14 = tt.reshape %13 allow_reorder : tensor<32xf32, #ttg.blocked<{sizePerThread = [1], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>> -> tensor<32xf32, #ttg.blocked<{sizePerThread = [1], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>>
    %15 = "tt.reduce"(%14) <{axis = 0 : i32}> ({
    ^bb0(%arg4: f32, %arg5: f32):
      %17 = arith.addf %arg4, %arg5 : f32
      tt.reduce.return %17 : f32
    }) : (tensor<32xf32, #ttg.blocked<{sizePerThread = [1], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>>) -> f32
    %16 = tt.atomic_rmw fadd, acq_rel, gpu, %arg2, %15, %true : (!tt.ptr<f32>, f32, i1) -> f32
    tt.return
  }
}


// -----// SoftwarePipeliner internal IR Dump After: LowerLoops
module attributes {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.target = "cuda:90", "ttg.threads-per-warp" = 32 : i32} {
  tt.func public @dot_kernel(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32}, %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32}, %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32}, %arg3: i32) attributes {noinline = false} {
    %true = arith.constant true
    %c32_i32 = arith.constant 32 : i32
    %0 = tt.get_program_id x : i32
    %1 = arith.muli %0, %c32_i32 : i32
    %2 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32, #ttg.blocked<{sizePerThread = [1], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>>
    %3 = tt.splat %1 : i32 -> tensor<32xi32, #ttg.blocked<{sizePerThread = [1], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>>
    %4 = arith.addi %3, %2 : tensor<32xi32, #ttg.blocked<{sizePerThread = [1], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>>
    %5 = tt.splat %arg3 : i32 -> tensor<32xi32, #ttg.blocked<{sizePerThread = [1], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>>
    %6 = arith.cmpi slt, %4, %5 : tensor<32xi32, #ttg.blocked<{sizePerThread = [1], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>>
    %7 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<32x!tt.ptr<f32>, #ttg.blocked<{sizePerThread = [1], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>>
    %8 = tt.addptr %7, %4 : tensor<32x!tt.ptr<f32>, #ttg.blocked<{sizePerThread = [1], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>>, tensor<32xi32, #ttg.blocked<{sizePerThread = [1], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>>
    %9 = tt.load %8, %6 : tensor<32x!tt.ptr<f32>, #ttg.blocked<{sizePerThread = [1], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>>
    %10 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<32x!tt.ptr<f32>, #ttg.blocked<{sizePerThread = [1], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>>
    %11 = tt.addptr %10, %4 : tensor<32x!tt.ptr<f32>, #ttg.blocked<{sizePerThread = [1], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>>, tensor<32xi32, #ttg.blocked<{sizePerThread = [1], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>>
    %12 = tt.load %11, %6 : tensor<32x!tt.ptr<f32>, #ttg.blocked<{sizePerThread = [1], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>>
    %13 = arith.mulf %9, %12 : tensor<32xf32, #ttg.blocked<{sizePerThread = [1], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>>
    %14 = tt.reshape %13 allow_reorder : tensor<32xf32, #ttg.blocked<{sizePerThread = [1], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>> -> tensor<32xf32, #ttg.blocked<{sizePerThread = [1], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>>
    %15 = "tt.reduce"(%14) <{axis = 0 : i32}> ({
    ^bb0(%arg4: f32, %arg5: f32):
      %17 = arith.addf %arg4, %arg5 : f32
      tt.reduce.return %17 : f32
    }) : (tensor<32xf32, #ttg.blocked<{sizePerThread = [1], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>>) -> f32
    %16 = tt.atomic_rmw fadd, acq_rel, gpu, %arg2, %15, %true : (!tt.ptr<f32>, f32, i1) -> f32
    tt.return
  }
}


// -----// SoftwarePipeliner internal IR Dump After: ExpandLoops
module attributes {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.target = "cuda:90", "ttg.threads-per-warp" = 32 : i32} {
  tt.func public @dot_kernel(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32}, %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32}, %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32}, %arg3: i32) attributes {noinline = false} {
    %true = arith.constant true
    %c32_i32 = arith.constant 32 : i32
    %0 = tt.get_program_id x : i32
    %1 = arith.muli %0, %c32_i32 : i32
    %2 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32, #ttg.blocked<{sizePerThread = [1], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>>
    %3 = tt.splat %1 : i32 -> tensor<32xi32, #ttg.blocked<{sizePerThread = [1], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>>
    %4 = arith.addi %3, %2 : tensor<32xi32, #ttg.blocked<{sizePerThread = [1], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>>
    %5 = tt.splat %arg3 : i32 -> tensor<32xi32, #ttg.blocked<{sizePerThread = [1], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>>
    %6 = arith.cmpi slt, %4, %5 : tensor<32xi32, #ttg.blocked<{sizePerThread = [1], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>>
    %7 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<32x!tt.ptr<f32>, #ttg.blocked<{sizePerThread = [1], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>>
    %8 = tt.addptr %7, %4 : tensor<32x!tt.ptr<f32>, #ttg.blocked<{sizePerThread = [1], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>>, tensor<32xi32, #ttg.blocked<{sizePerThread = [1], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>>
    %9 = tt.load %8, %6 : tensor<32x!tt.ptr<f32>, #ttg.blocked<{sizePerThread = [1], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>>
    %10 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<32x!tt.ptr<f32>, #ttg.blocked<{sizePerThread = [1], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>>
    %11 = tt.addptr %10, %4 : tensor<32x!tt.ptr<f32>, #ttg.blocked<{sizePerThread = [1], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>>, tensor<32xi32, #ttg.blocked<{sizePerThread = [1], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>>
    %12 = tt.load %11, %6 : tensor<32x!tt.ptr<f32>, #ttg.blocked<{sizePerThread = [1], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>>
    %13 = arith.mulf %9, %12 : tensor<32xf32, #ttg.blocked<{sizePerThread = [1], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>>
    %14 = tt.reshape %13 allow_reorder : tensor<32xf32, #ttg.blocked<{sizePerThread = [1], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>> -> tensor<32xf32, #ttg.blocked<{sizePerThread = [1], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>>
    %15 = "tt.reduce"(%14) <{axis = 0 : i32}> ({
    ^bb0(%arg4: f32, %arg5: f32):
      %17 = arith.addf %arg4, %arg5 : f32
      tt.reduce.return %17 : f32
    }) : (tensor<32xf32, #ttg.blocked<{sizePerThread = [1], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>>) -> f32
    %16 = tt.atomic_rmw fadd, acq_rel, gpu, %arg2, %15, %true : (!tt.ptr<f32>, f32, i1) -> f32
    tt.return
  }
}


// -----// IR Dump Before TritonGPUPingPongSync (tritongpu-ping-pong-sync) ('builtin.module' operation) //----- //
#blocked = #ttg.blocked<{sizePerThread = [1], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>
#loc = loc("/home/meiziyuan/triton/test_vdot.py":10:0)
#loc1 = loc(unknown)
#loc13 = loc("/home/meiziyuan/triton/test_vdot.py":26:17)
#loc18 = loc(callsite(#loc1 at #loc13))
module attributes {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.target = "cuda:90", "ttg.threads-per-warp" = 32 : i32} {
  tt.func public @dot_kernel(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/home/meiziyuan/triton/test_vdot.py":10:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/home/meiziyuan/triton/test_vdot.py":10:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/home/meiziyuan/triton/test_vdot.py":10:0), %arg3: i32 loc("/home/meiziyuan/triton/test_vdot.py":10:0)) attributes {noinline = false} {
    %true = arith.constant true loc(#loc1)
    %c32_i32 = arith.constant 32 : i32 loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.muli %0, %c32_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32, #blocked> loc(#loc4)
    %3 = tt.splat %1 : i32 -> tensor<32xi32, #blocked> loc(#loc5)
    %4 = arith.addi %3, %2 : tensor<32xi32, #blocked> loc(#loc5)
    %5 = tt.splat %arg3 : i32 -> tensor<32xi32, #blocked> loc(#loc6)
    %6 = arith.cmpi slt, %4, %5 : tensor<32xi32, #blocked> loc(#loc6)
    %7 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<32x!tt.ptr<f32>, #blocked> loc(#loc7)
    %8 = tt.addptr %7, %4 : tensor<32x!tt.ptr<f32>, #blocked>, tensor<32xi32, #blocked> loc(#loc7)
    %9 = tt.load %8, %6 : tensor<32x!tt.ptr<f32>, #blocked> loc(#loc8)
    %10 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<32x!tt.ptr<f32>, #blocked> loc(#loc9)
    %11 = tt.addptr %10, %4 : tensor<32x!tt.ptr<f32>, #blocked>, tensor<32xi32, #blocked> loc(#loc9)
    %12 = tt.load %11, %6 : tensor<32x!tt.ptr<f32>, #blocked> loc(#loc10)
    %13 = arith.mulf %9, %12 : tensor<32xf32, #blocked> loc(#loc11)
    %14 = tt.reshape %13 allow_reorder : tensor<32xf32, #blocked> -> tensor<32xf32, #blocked> loc(#loc17)
    %15 = "tt.reduce"(%14) <{axis = 0 : i32}> ({
    ^bb0(%arg4: f32 loc(callsite(#loc1 at #loc13)), %arg5: f32 loc(callsite(#loc1 at #loc13))):
      %17 = arith.addf %arg4, %arg5 : f32 loc(#loc20)
      tt.reduce.return %17 : f32 loc(#loc17)
    }) : (tensor<32xf32, #blocked>) -> f32 loc(#loc17)
    %16 = tt.atomic_rmw fadd, acq_rel, gpu, %arg2, %15, %true : (!tt.ptr<f32>, f32, i1) -> f32 loc(#loc15)
    tt.return loc(#loc16)
  } loc(#loc)
} loc(#loc)
#loc2 = loc("/home/meiziyuan/triton/test_vdot.py":19:24)
#loc3 = loc("/home/meiziyuan/triton/test_vdot.py":20:19)
#loc4 = loc("/home/meiziyuan/triton/test_vdot.py":20:45)
#loc5 = loc("/home/meiziyuan/triton/test_vdot.py":20:32)
#loc6 = loc("/home/meiziyuan/triton/test_vdot.py":21:20)
#loc7 = loc("/home/meiziyuan/triton/test_vdot.py":23:28)
#loc8 = loc("/home/meiziyuan/triton/test_vdot.py":23:18)
#loc9 = loc("/home/meiziyuan/triton/test_vdot.py":24:32)
#loc10 = loc("/home/meiziyuan/triton/test_vdot.py":24:20)
#loc11 = loc("/home/meiziyuan/triton/test_vdot.py":26:23)
#loc12 = loc("/root/miniconda3/envs/vllm/lib/python3.12/site-packages/triton/language/standard.py":286:36)
#loc14 = loc("/root/miniconda3/envs/vllm/lib/python3.12/site-packages/triton/language/standard.py":256:15)
#loc15 = loc("/home/meiziyuan/triton/test_vdot.py":27:27)
#loc16 = loc("/home/meiziyuan/triton/test_vdot.py":27:4)
#loc17 = loc(callsite(#loc12 at #loc13))
#loc19 = loc(callsite(#loc14 at #loc12))
#loc20 = loc(callsite(#loc19 at #loc13))


// -----// IR Dump Before TritonGPUWSLowering (tritongpu-warp-spec-lowering) ('builtin.module' operation) //----- //
#blocked = #ttg.blocked<{sizePerThread = [1], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>
#loc = loc("/home/meiziyuan/triton/test_vdot.py":10:0)
#loc1 = loc(unknown)
#loc13 = loc("/home/meiziyuan/triton/test_vdot.py":26:17)
#loc18 = loc(callsite(#loc1 at #loc13))
module attributes {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.target = "cuda:90", "ttg.threads-per-warp" = 32 : i32} {
  tt.func public @dot_kernel(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/home/meiziyuan/triton/test_vdot.py":10:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/home/meiziyuan/triton/test_vdot.py":10:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/home/meiziyuan/triton/test_vdot.py":10:0), %arg3: i32 loc("/home/meiziyuan/triton/test_vdot.py":10:0)) attributes {noinline = false} {
    %true = arith.constant true loc(#loc1)
    %c32_i32 = arith.constant 32 : i32 loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.muli %0, %c32_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32, #blocked> loc(#loc4)
    %3 = tt.splat %1 : i32 -> tensor<32xi32, #blocked> loc(#loc5)
    %4 = arith.addi %3, %2 : tensor<32xi32, #blocked> loc(#loc5)
    %5 = tt.splat %arg3 : i32 -> tensor<32xi32, #blocked> loc(#loc6)
    %6 = arith.cmpi slt, %4, %5 : tensor<32xi32, #blocked> loc(#loc6)
    %7 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<32x!tt.ptr<f32>, #blocked> loc(#loc7)
    %8 = tt.addptr %7, %4 : tensor<32x!tt.ptr<f32>, #blocked>, tensor<32xi32, #blocked> loc(#loc7)
    %9 = tt.load %8, %6 : tensor<32x!tt.ptr<f32>, #blocked> loc(#loc8)
    %10 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<32x!tt.ptr<f32>, #blocked> loc(#loc9)
    %11 = tt.addptr %10, %4 : tensor<32x!tt.ptr<f32>, #blocked>, tensor<32xi32, #blocked> loc(#loc9)
    %12 = tt.load %11, %6 : tensor<32x!tt.ptr<f32>, #blocked> loc(#loc10)
    %13 = arith.mulf %9, %12 : tensor<32xf32, #blocked> loc(#loc11)
    %14 = tt.reshape %13 allow_reorder : tensor<32xf32, #blocked> -> tensor<32xf32, #blocked> loc(#loc17)
    %15 = "tt.reduce"(%14) <{axis = 0 : i32}> ({
    ^bb0(%arg4: f32 loc(callsite(#loc1 at #loc13)), %arg5: f32 loc(callsite(#loc1 at #loc13))):
      %17 = arith.addf %arg4, %arg5 : f32 loc(#loc20)
      tt.reduce.return %17 : f32 loc(#loc17)
    }) : (tensor<32xf32, #blocked>) -> f32 loc(#loc17)
    %16 = tt.atomic_rmw fadd, acq_rel, gpu, %arg2, %15, %true : (!tt.ptr<f32>, f32, i1) -> f32 loc(#loc15)
    tt.return loc(#loc16)
  } loc(#loc)
} loc(#loc)
#loc2 = loc("/home/meiziyuan/triton/test_vdot.py":19:24)
#loc3 = loc("/home/meiziyuan/triton/test_vdot.py":20:19)
#loc4 = loc("/home/meiziyuan/triton/test_vdot.py":20:45)
#loc5 = loc("/home/meiziyuan/triton/test_vdot.py":20:32)
#loc6 = loc("/home/meiziyuan/triton/test_vdot.py":21:20)
#loc7 = loc("/home/meiziyuan/triton/test_vdot.py":23:28)
#loc8 = loc("/home/meiziyuan/triton/test_vdot.py":23:18)
#loc9 = loc("/home/meiziyuan/triton/test_vdot.py":24:32)
#loc10 = loc("/home/meiziyuan/triton/test_vdot.py":24:20)
#loc11 = loc("/home/meiziyuan/triton/test_vdot.py":26:23)
#loc12 = loc("/root/miniconda3/envs/vllm/lib/python3.12/site-packages/triton/language/standard.py":286:36)
#loc14 = loc("/root/miniconda3/envs/vllm/lib/python3.12/site-packages/triton/language/standard.py":256:15)
#loc15 = loc("/home/meiziyuan/triton/test_vdot.py":27:27)
#loc16 = loc("/home/meiziyuan/triton/test_vdot.py":27:4)
#loc17 = loc(callsite(#loc12 at #loc13))
#loc19 = loc(callsite(#loc14 at #loc12))
#loc20 = loc(callsite(#loc19 at #loc13))


// -----// IR Dump Before TritonGPUPrefetch (tritongpu-prefetch) ('builtin.module' operation) //----- //
#blocked = #ttg.blocked<{sizePerThread = [1], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>
#loc = loc("/home/meiziyuan/triton/test_vdot.py":10:0)
#loc1 = loc(unknown)
#loc13 = loc("/home/meiziyuan/triton/test_vdot.py":26:17)
#loc18 = loc(callsite(#loc1 at #loc13))
module attributes {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.target = "cuda:90", "ttg.threads-per-warp" = 32 : i32} {
  tt.func public @dot_kernel(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/home/meiziyuan/triton/test_vdot.py":10:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/home/meiziyuan/triton/test_vdot.py":10:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/home/meiziyuan/triton/test_vdot.py":10:0), %arg3: i32 loc("/home/meiziyuan/triton/test_vdot.py":10:0)) attributes {noinline = false} {
    %true = arith.constant true loc(#loc1)
    %c32_i32 = arith.constant 32 : i32 loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.muli %0, %c32_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32, #blocked> loc(#loc4)
    %3 = tt.splat %1 : i32 -> tensor<32xi32, #blocked> loc(#loc5)
    %4 = arith.addi %3, %2 : tensor<32xi32, #blocked> loc(#loc5)
    %5 = tt.splat %arg3 : i32 -> tensor<32xi32, #blocked> loc(#loc6)
    %6 = arith.cmpi slt, %4, %5 : tensor<32xi32, #blocked> loc(#loc6)
    %7 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<32x!tt.ptr<f32>, #blocked> loc(#loc7)
    %8 = tt.addptr %7, %4 : tensor<32x!tt.ptr<f32>, #blocked>, tensor<32xi32, #blocked> loc(#loc7)
    %9 = tt.load %8, %6 : tensor<32x!tt.ptr<f32>, #blocked> loc(#loc8)
    %10 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<32x!tt.ptr<f32>, #blocked> loc(#loc9)
    %11 = tt.addptr %10, %4 : tensor<32x!tt.ptr<f32>, #blocked>, tensor<32xi32, #blocked> loc(#loc9)
    %12 = tt.load %11, %6 : tensor<32x!tt.ptr<f32>, #blocked> loc(#loc10)
    %13 = arith.mulf %9, %12 : tensor<32xf32, #blocked> loc(#loc11)
    %14 = tt.reshape %13 allow_reorder : tensor<32xf32, #blocked> -> tensor<32xf32, #blocked> loc(#loc17)
    %15 = "tt.reduce"(%14) <{axis = 0 : i32}> ({
    ^bb0(%arg4: f32 loc(callsite(#loc1 at #loc13)), %arg5: f32 loc(callsite(#loc1 at #loc13))):
      %17 = arith.addf %arg4, %arg5 : f32 loc(#loc20)
      tt.reduce.return %17 : f32 loc(#loc17)
    }) : (tensor<32xf32, #blocked>) -> f32 loc(#loc17)
    %16 = tt.atomic_rmw fadd, acq_rel, gpu, %arg2, %15, %true : (!tt.ptr<f32>, f32, i1) -> f32 loc(#loc15)
    tt.return loc(#loc16)
  } loc(#loc)
} loc(#loc)
#loc2 = loc("/home/meiziyuan/triton/test_vdot.py":19:24)
#loc3 = loc("/home/meiziyuan/triton/test_vdot.py":20:19)
#loc4 = loc("/home/meiziyuan/triton/test_vdot.py":20:45)
#loc5 = loc("/home/meiziyuan/triton/test_vdot.py":20:32)
#loc6 = loc("/home/meiziyuan/triton/test_vdot.py":21:20)
#loc7 = loc("/home/meiziyuan/triton/test_vdot.py":23:28)
#loc8 = loc("/home/meiziyuan/triton/test_vdot.py":23:18)
#loc9 = loc("/home/meiziyuan/triton/test_vdot.py":24:32)
#loc10 = loc("/home/meiziyuan/triton/test_vdot.py":24:20)
#loc11 = loc("/home/meiziyuan/triton/test_vdot.py":26:23)
#loc12 = loc("/root/miniconda3/envs/vllm/lib/python3.12/site-packages/triton/language/standard.py":286:36)
#loc14 = loc("/root/miniconda3/envs/vllm/lib/python3.12/site-packages/triton/language/standard.py":256:15)
#loc15 = loc("/home/meiziyuan/triton/test_vdot.py":27:27)
#loc16 = loc("/home/meiziyuan/triton/test_vdot.py":27:4)
#loc17 = loc(callsite(#loc12 at #loc13))
#loc19 = loc(callsite(#loc14 at #loc12))
#loc20 = loc(callsite(#loc19 at #loc13))


// -----// IR Dump Before TritonGPUOptimizeDotOperands (tritongpu-optimize-dot-operands) ('builtin.module' operation) //----- //
#blocked = #ttg.blocked<{sizePerThread = [1], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>
#loc = loc("/home/meiziyuan/triton/test_vdot.py":10:0)
#loc1 = loc(unknown)
#loc13 = loc("/home/meiziyuan/triton/test_vdot.py":26:17)
#loc18 = loc(callsite(#loc1 at #loc13))
module attributes {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.target = "cuda:90", "ttg.threads-per-warp" = 32 : i32} {
  tt.func public @dot_kernel(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/home/meiziyuan/triton/test_vdot.py":10:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/home/meiziyuan/triton/test_vdot.py":10:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/home/meiziyuan/triton/test_vdot.py":10:0), %arg3: i32 loc("/home/meiziyuan/triton/test_vdot.py":10:0)) attributes {noinline = false} {
    %true = arith.constant true loc(#loc1)
    %c32_i32 = arith.constant 32 : i32 loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.muli %0, %c32_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32, #blocked> loc(#loc4)
    %3 = tt.splat %1 : i32 -> tensor<32xi32, #blocked> loc(#loc5)
    %4 = arith.addi %3, %2 : tensor<32xi32, #blocked> loc(#loc5)
    %5 = tt.splat %arg3 : i32 -> tensor<32xi32, #blocked> loc(#loc6)
    %6 = arith.cmpi slt, %4, %5 : tensor<32xi32, #blocked> loc(#loc6)
    %7 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<32x!tt.ptr<f32>, #blocked> loc(#loc7)
    %8 = tt.addptr %7, %4 : tensor<32x!tt.ptr<f32>, #blocked>, tensor<32xi32, #blocked> loc(#loc7)
    %9 = tt.load %8, %6 : tensor<32x!tt.ptr<f32>, #blocked> loc(#loc8)
    %10 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<32x!tt.ptr<f32>, #blocked> loc(#loc9)
    %11 = tt.addptr %10, %4 : tensor<32x!tt.ptr<f32>, #blocked>, tensor<32xi32, #blocked> loc(#loc9)
    %12 = tt.load %11, %6 : tensor<32x!tt.ptr<f32>, #blocked> loc(#loc10)
    %13 = arith.mulf %9, %12 : tensor<32xf32, #blocked> loc(#loc11)
    %14 = tt.reshape %13 allow_reorder : tensor<32xf32, #blocked> -> tensor<32xf32, #blocked> loc(#loc17)
    %15 = "tt.reduce"(%14) <{axis = 0 : i32}> ({
    ^bb0(%arg4: f32 loc(callsite(#loc1 at #loc13)), %arg5: f32 loc(callsite(#loc1 at #loc13))):
      %17 = arith.addf %arg4, %arg5 : f32 loc(#loc20)
      tt.reduce.return %17 : f32 loc(#loc17)
    }) : (tensor<32xf32, #blocked>) -> f32 loc(#loc17)
    %16 = tt.atomic_rmw fadd, acq_rel, gpu, %arg2, %15, %true : (!tt.ptr<f32>, f32, i1) -> f32 loc(#loc15)
    tt.return loc(#loc16)
  } loc(#loc)
} loc(#loc)
#loc2 = loc("/home/meiziyuan/triton/test_vdot.py":19:24)
#loc3 = loc("/home/meiziyuan/triton/test_vdot.py":20:19)
#loc4 = loc("/home/meiziyuan/triton/test_vdot.py":20:45)
#loc5 = loc("/home/meiziyuan/triton/test_vdot.py":20:32)
#loc6 = loc("/home/meiziyuan/triton/test_vdot.py":21:20)
#loc7 = loc("/home/meiziyuan/triton/test_vdot.py":23:28)
#loc8 = loc("/home/meiziyuan/triton/test_vdot.py":23:18)
#loc9 = loc("/home/meiziyuan/triton/test_vdot.py":24:32)
#loc10 = loc("/home/meiziyuan/triton/test_vdot.py":24:20)
#loc11 = loc("/home/meiziyuan/triton/test_vdot.py":26:23)
#loc12 = loc("/root/miniconda3/envs/vllm/lib/python3.12/site-packages/triton/language/standard.py":286:36)
#loc14 = loc("/root/miniconda3/envs/vllm/lib/python3.12/site-packages/triton/language/standard.py":256:15)
#loc15 = loc("/home/meiziyuan/triton/test_vdot.py":27:27)
#loc16 = loc("/home/meiziyuan/triton/test_vdot.py":27:4)
#loc17 = loc(callsite(#loc12 at #loc13))
#loc19 = loc(callsite(#loc14 at #loc12))
#loc20 = loc(callsite(#loc19 at #loc13))


// -----// IR Dump Before Canonicalizer (canonicalize) ('builtin.module' operation) //----- //
#blocked = #ttg.blocked<{sizePerThread = [1], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>
#loc = loc("/home/meiziyuan/triton/test_vdot.py":10:0)
#loc1 = loc(unknown)
#loc13 = loc("/home/meiziyuan/triton/test_vdot.py":26:17)
#loc18 = loc(callsite(#loc1 at #loc13))
module attributes {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.target = "cuda:90", "ttg.threads-per-warp" = 32 : i32} {
  tt.func public @dot_kernel(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/home/meiziyuan/triton/test_vdot.py":10:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/home/meiziyuan/triton/test_vdot.py":10:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/home/meiziyuan/triton/test_vdot.py":10:0), %arg3: i32 loc("/home/meiziyuan/triton/test_vdot.py":10:0)) attributes {noinline = false} {
    %true = arith.constant true loc(#loc1)
    %c32_i32 = arith.constant 32 : i32 loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.muli %0, %c32_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32, #blocked> loc(#loc4)
    %3 = tt.splat %1 : i32 -> tensor<32xi32, #blocked> loc(#loc5)
    %4 = arith.addi %3, %2 : tensor<32xi32, #blocked> loc(#loc5)
    %5 = tt.splat %arg3 : i32 -> tensor<32xi32, #blocked> loc(#loc6)
    %6 = arith.cmpi slt, %4, %5 : tensor<32xi32, #blocked> loc(#loc6)
    %7 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<32x!tt.ptr<f32>, #blocked> loc(#loc7)
    %8 = tt.addptr %7, %4 : tensor<32x!tt.ptr<f32>, #blocked>, tensor<32xi32, #blocked> loc(#loc7)
    %9 = tt.load %8, %6 : tensor<32x!tt.ptr<f32>, #blocked> loc(#loc8)
    %10 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<32x!tt.ptr<f32>, #blocked> loc(#loc9)
    %11 = tt.addptr %10, %4 : tensor<32x!tt.ptr<f32>, #blocked>, tensor<32xi32, #blocked> loc(#loc9)
    %12 = tt.load %11, %6 : tensor<32x!tt.ptr<f32>, #blocked> loc(#loc10)
    %13 = arith.mulf %9, %12 : tensor<32xf32, #blocked> loc(#loc11)
    %14 = tt.reshape %13 allow_reorder : tensor<32xf32, #blocked> -> tensor<32xf32, #blocked> loc(#loc17)
    %15 = "tt.reduce"(%14) <{axis = 0 : i32}> ({
    ^bb0(%arg4: f32 loc(callsite(#loc1 at #loc13)), %arg5: f32 loc(callsite(#loc1 at #loc13))):
      %17 = arith.addf %arg4, %arg5 : f32 loc(#loc20)
      tt.reduce.return %17 : f32 loc(#loc17)
    }) : (tensor<32xf32, #blocked>) -> f32 loc(#loc17)
    %16 = tt.atomic_rmw fadd, acq_rel, gpu, %arg2, %15, %true : (!tt.ptr<f32>, f32, i1) -> f32 loc(#loc15)
    tt.return loc(#loc16)
  } loc(#loc)
} loc(#loc)
#loc2 = loc("/home/meiziyuan/triton/test_vdot.py":19:24)
#loc3 = loc("/home/meiziyuan/triton/test_vdot.py":20:19)
#loc4 = loc("/home/meiziyuan/triton/test_vdot.py":20:45)
#loc5 = loc("/home/meiziyuan/triton/test_vdot.py":20:32)
#loc6 = loc("/home/meiziyuan/triton/test_vdot.py":21:20)
#loc7 = loc("/home/meiziyuan/triton/test_vdot.py":23:28)
#loc8 = loc("/home/meiziyuan/triton/test_vdot.py":23:18)
#loc9 = loc("/home/meiziyuan/triton/test_vdot.py":24:32)
#loc10 = loc("/home/meiziyuan/triton/test_vdot.py":24:20)
#loc11 = loc("/home/meiziyuan/triton/test_vdot.py":26:23)
#loc12 = loc("/root/miniconda3/envs/vllm/lib/python3.12/site-packages/triton/language/standard.py":286:36)
#loc14 = loc("/root/miniconda3/envs/vllm/lib/python3.12/site-packages/triton/language/standard.py":256:15)
#loc15 = loc("/home/meiziyuan/triton/test_vdot.py":27:27)
#loc16 = loc("/home/meiziyuan/triton/test_vdot.py":27:4)
#loc17 = loc(callsite(#loc12 at #loc13))
#loc19 = loc(callsite(#loc14 at #loc12))
#loc20 = loc(callsite(#loc19 at #loc13))


// -----// IR Dump Before TritonGPUCoalesceAsyncCopy (tritongpu-coalesce-async-copy) ('builtin.module' operation) //----- //
#blocked = #ttg.blocked<{sizePerThread = [1], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>
#loc = loc("/home/meiziyuan/triton/test_vdot.py":10:0)
#loc1 = loc(unknown)
#loc13 = loc("/home/meiziyuan/triton/test_vdot.py":26:17)
#loc18 = loc(callsite(#loc1 at #loc13))
module attributes {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.target = "cuda:90", "ttg.threads-per-warp" = 32 : i32} {
  tt.func public @dot_kernel(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/home/meiziyuan/triton/test_vdot.py":10:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/home/meiziyuan/triton/test_vdot.py":10:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/home/meiziyuan/triton/test_vdot.py":10:0), %arg3: i32 loc("/home/meiziyuan/triton/test_vdot.py":10:0)) attributes {noinline = false} {
    %true = arith.constant true loc(#loc1)
    %c32_i32 = arith.constant 32 : i32 loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.muli %0, %c32_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32, #blocked> loc(#loc4)
    %3 = tt.splat %1 : i32 -> tensor<32xi32, #blocked> loc(#loc5)
    %4 = arith.addi %3, %2 : tensor<32xi32, #blocked> loc(#loc5)
    %5 = tt.splat %arg3 : i32 -> tensor<32xi32, #blocked> loc(#loc6)
    %6 = arith.cmpi slt, %4, %5 : tensor<32xi32, #blocked> loc(#loc6)
    %7 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<32x!tt.ptr<f32>, #blocked> loc(#loc7)
    %8 = tt.addptr %7, %4 : tensor<32x!tt.ptr<f32>, #blocked>, tensor<32xi32, #blocked> loc(#loc7)
    %9 = tt.load %8, %6 : tensor<32x!tt.ptr<f32>, #blocked> loc(#loc8)
    %10 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<32x!tt.ptr<f32>, #blocked> loc(#loc9)
    %11 = tt.addptr %10, %4 : tensor<32x!tt.ptr<f32>, #blocked>, tensor<32xi32, #blocked> loc(#loc9)
    %12 = tt.load %11, %6 : tensor<32x!tt.ptr<f32>, #blocked> loc(#loc10)
    %13 = arith.mulf %9, %12 : tensor<32xf32, #blocked> loc(#loc11)
    %14 = tt.reshape %13 allow_reorder : tensor<32xf32, #blocked> -> tensor<32xf32, #blocked> loc(#loc17)
    %15 = "tt.reduce"(%14) <{axis = 0 : i32}> ({
    ^bb0(%arg4: f32 loc(callsite(#loc1 at #loc13)), %arg5: f32 loc(callsite(#loc1 at #loc13))):
      %17 = arith.addf %arg4, %arg5 : f32 loc(#loc20)
      tt.reduce.return %17 : f32 loc(#loc17)
    }) : (tensor<32xf32, #blocked>) -> f32 loc(#loc17)
    %16 = tt.atomic_rmw fadd, acq_rel, gpu, %arg2, %15, %true : (!tt.ptr<f32>, f32, i1) -> f32 loc(#loc15)
    tt.return loc(#loc16)
  } loc(#loc)
} loc(#loc)
#loc2 = loc("/home/meiziyuan/triton/test_vdot.py":19:24)
#loc3 = loc("/home/meiziyuan/triton/test_vdot.py":20:19)
#loc4 = loc("/home/meiziyuan/triton/test_vdot.py":20:45)
#loc5 = loc("/home/meiziyuan/triton/test_vdot.py":20:32)
#loc6 = loc("/home/meiziyuan/triton/test_vdot.py":21:20)
#loc7 = loc("/home/meiziyuan/triton/test_vdot.py":23:28)
#loc8 = loc("/home/meiziyuan/triton/test_vdot.py":23:18)
#loc9 = loc("/home/meiziyuan/triton/test_vdot.py":24:32)
#loc10 = loc("/home/meiziyuan/triton/test_vdot.py":24:20)
#loc11 = loc("/home/meiziyuan/triton/test_vdot.py":26:23)
#loc12 = loc("/root/miniconda3/envs/vllm/lib/python3.12/site-packages/triton/language/standard.py":286:36)
#loc14 = loc("/root/miniconda3/envs/vllm/lib/python3.12/site-packages/triton/language/standard.py":256:15)
#loc15 = loc("/home/meiziyuan/triton/test_vdot.py":27:27)
#loc16 = loc("/home/meiziyuan/triton/test_vdot.py":27:4)
#loc17 = loc(callsite(#loc12 at #loc13))
#loc19 = loc(callsite(#loc14 at #loc12))
#loc20 = loc(callsite(#loc19 at #loc13))


// -----// IR Dump Before TritonGPURemoveLayoutConversions (tritongpu-remove-layout-conversions) ('builtin.module' operation) //----- //
#blocked = #ttg.blocked<{sizePerThread = [1], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>
#loc = loc("/home/meiziyuan/triton/test_vdot.py":10:0)
#loc1 = loc(unknown)
#loc13 = loc("/home/meiziyuan/triton/test_vdot.py":26:17)
#loc18 = loc(callsite(#loc1 at #loc13))
module attributes {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.target = "cuda:90", "ttg.threads-per-warp" = 32 : i32} {
  tt.func public @dot_kernel(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/home/meiziyuan/triton/test_vdot.py":10:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/home/meiziyuan/triton/test_vdot.py":10:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/home/meiziyuan/triton/test_vdot.py":10:0), %arg3: i32 loc("/home/meiziyuan/triton/test_vdot.py":10:0)) attributes {noinline = false} {
    %true = arith.constant true loc(#loc1)
    %c32_i32 = arith.constant 32 : i32 loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.muli %0, %c32_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32, #blocked> loc(#loc4)
    %3 = tt.splat %1 : i32 -> tensor<32xi32, #blocked> loc(#loc5)
    %4 = arith.addi %3, %2 : tensor<32xi32, #blocked> loc(#loc5)
    %5 = tt.splat %arg3 : i32 -> tensor<32xi32, #blocked> loc(#loc6)
    %6 = arith.cmpi slt, %4, %5 : tensor<32xi32, #blocked> loc(#loc6)
    %7 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<32x!tt.ptr<f32>, #blocked> loc(#loc7)
    %8 = tt.addptr %7, %4 : tensor<32x!tt.ptr<f32>, #blocked>, tensor<32xi32, #blocked> loc(#loc7)
    %9 = tt.load %8, %6 : tensor<32x!tt.ptr<f32>, #blocked> loc(#loc8)
    %10 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<32x!tt.ptr<f32>, #blocked> loc(#loc9)
    %11 = tt.addptr %10, %4 : tensor<32x!tt.ptr<f32>, #blocked>, tensor<32xi32, #blocked> loc(#loc9)
    %12 = tt.load %11, %6 : tensor<32x!tt.ptr<f32>, #blocked> loc(#loc10)
    %13 = arith.mulf %9, %12 : tensor<32xf32, #blocked> loc(#loc11)
    %14 = tt.reshape %13 allow_reorder : tensor<32xf32, #blocked> -> tensor<32xf32, #blocked> loc(#loc17)
    %15 = "tt.reduce"(%14) <{axis = 0 : i32}> ({
    ^bb0(%arg4: f32 loc(callsite(#loc1 at #loc13)), %arg5: f32 loc(callsite(#loc1 at #loc13))):
      %17 = arith.addf %arg4, %arg5 : f32 loc(#loc20)
      tt.reduce.return %17 : f32 loc(#loc17)
    }) : (tensor<32xf32, #blocked>) -> f32 loc(#loc17)
    %16 = tt.atomic_rmw fadd, acq_rel, gpu, %arg2, %15, %true : (!tt.ptr<f32>, f32, i1) -> f32 loc(#loc15)
    tt.return loc(#loc16)
  } loc(#loc)
} loc(#loc)
#loc2 = loc("/home/meiziyuan/triton/test_vdot.py":19:24)
#loc3 = loc("/home/meiziyuan/triton/test_vdot.py":20:19)
#loc4 = loc("/home/meiziyuan/triton/test_vdot.py":20:45)
#loc5 = loc("/home/meiziyuan/triton/test_vdot.py":20:32)
#loc6 = loc("/home/meiziyuan/triton/test_vdot.py":21:20)
#loc7 = loc("/home/meiziyuan/triton/test_vdot.py":23:28)
#loc8 = loc("/home/meiziyuan/triton/test_vdot.py":23:18)
#loc9 = loc("/home/meiziyuan/triton/test_vdot.py":24:32)
#loc10 = loc("/home/meiziyuan/triton/test_vdot.py":24:20)
#loc11 = loc("/home/meiziyuan/triton/test_vdot.py":26:23)
#loc12 = loc("/root/miniconda3/envs/vllm/lib/python3.12/site-packages/triton/language/standard.py":286:36)
#loc14 = loc("/root/miniconda3/envs/vllm/lib/python3.12/site-packages/triton/language/standard.py":256:15)
#loc15 = loc("/home/meiziyuan/triton/test_vdot.py":27:27)
#loc16 = loc("/home/meiziyuan/triton/test_vdot.py":27:4)
#loc17 = loc(callsite(#loc12 at #loc13))
#loc19 = loc(callsite(#loc14 at #loc12))
#loc20 = loc(callsite(#loc19 at #loc13))


// -----// IR Dump Before TritonGPUReduceDataDuplication (tritongpu-reduce-data-duplication) ('builtin.module' operation) //----- //
#blocked = #ttg.blocked<{sizePerThread = [1], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>
#loc = loc("/home/meiziyuan/triton/test_vdot.py":10:0)
#loc1 = loc(unknown)
#loc13 = loc("/home/meiziyuan/triton/test_vdot.py":26:17)
#loc18 = loc(callsite(#loc1 at #loc13))
module attributes {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.target = "cuda:90", "ttg.threads-per-warp" = 32 : i32} {
  tt.func public @dot_kernel(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/home/meiziyuan/triton/test_vdot.py":10:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/home/meiziyuan/triton/test_vdot.py":10:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/home/meiziyuan/triton/test_vdot.py":10:0), %arg3: i32 loc("/home/meiziyuan/triton/test_vdot.py":10:0)) attributes {noinline = false} {
    %true = arith.constant true loc(#loc1)
    %c32_i32 = arith.constant 32 : i32 loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.muli %0, %c32_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32, #blocked> loc(#loc4)
    %3 = tt.splat %1 : i32 -> tensor<32xi32, #blocked> loc(#loc5)
    %4 = arith.addi %3, %2 : tensor<32xi32, #blocked> loc(#loc5)
    %5 = tt.splat %arg3 : i32 -> tensor<32xi32, #blocked> loc(#loc6)
    %6 = arith.cmpi slt, %4, %5 : tensor<32xi32, #blocked> loc(#loc6)
    %7 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<32x!tt.ptr<f32>, #blocked> loc(#loc7)
    %8 = tt.addptr %7, %4 : tensor<32x!tt.ptr<f32>, #blocked>, tensor<32xi32, #blocked> loc(#loc7)
    %9 = tt.load %8, %6 : tensor<32x!tt.ptr<f32>, #blocked> loc(#loc8)
    %10 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<32x!tt.ptr<f32>, #blocked> loc(#loc9)
    %11 = tt.addptr %10, %4 : tensor<32x!tt.ptr<f32>, #blocked>, tensor<32xi32, #blocked> loc(#loc9)
    %12 = tt.load %11, %6 : tensor<32x!tt.ptr<f32>, #blocked> loc(#loc10)
    %13 = arith.mulf %9, %12 : tensor<32xf32, #blocked> loc(#loc11)
    %14 = tt.reshape %13 allow_reorder : tensor<32xf32, #blocked> -> tensor<32xf32, #blocked> loc(#loc17)
    %15 = "tt.reduce"(%14) <{axis = 0 : i32}> ({
    ^bb0(%arg4: f32 loc(callsite(#loc1 at #loc13)), %arg5: f32 loc(callsite(#loc1 at #loc13))):
      %17 = arith.addf %arg4, %arg5 : f32 loc(#loc20)
      tt.reduce.return %17 : f32 loc(#loc17)
    }) : (tensor<32xf32, #blocked>) -> f32 loc(#loc17)
    %16 = tt.atomic_rmw fadd, acq_rel, gpu, %arg2, %15, %true : (!tt.ptr<f32>, f32, i1) -> f32 loc(#loc15)
    tt.return loc(#loc16)
  } loc(#loc)
} loc(#loc)
#loc2 = loc("/home/meiziyuan/triton/test_vdot.py":19:24)
#loc3 = loc("/home/meiziyuan/triton/test_vdot.py":20:19)
#loc4 = loc("/home/meiziyuan/triton/test_vdot.py":20:45)
#loc5 = loc("/home/meiziyuan/triton/test_vdot.py":20:32)
#loc6 = loc("/home/meiziyuan/triton/test_vdot.py":21:20)
#loc7 = loc("/home/meiziyuan/triton/test_vdot.py":23:28)
#loc8 = loc("/home/meiziyuan/triton/test_vdot.py":23:18)
#loc9 = loc("/home/meiziyuan/triton/test_vdot.py":24:32)
#loc10 = loc("/home/meiziyuan/triton/test_vdot.py":24:20)
#loc11 = loc("/home/meiziyuan/triton/test_vdot.py":26:23)
#loc12 = loc("/root/miniconda3/envs/vllm/lib/python3.12/site-packages/triton/language/standard.py":286:36)
#loc14 = loc("/root/miniconda3/envs/vllm/lib/python3.12/site-packages/triton/language/standard.py":256:15)
#loc15 = loc("/home/meiziyuan/triton/test_vdot.py":27:27)
#loc16 = loc("/home/meiziyuan/triton/test_vdot.py":27:4)
#loc17 = loc(callsite(#loc12 at #loc13))
#loc19 = loc(callsite(#loc14 at #loc12))
#loc20 = loc(callsite(#loc19 at #loc13))


// -----// IR Dump Before TritonGPUReorderInstructions (tritongpu-reorder-instructions) ('builtin.module' operation) //----- //
#blocked = #ttg.blocked<{sizePerThread = [1], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>
#loc = loc("/home/meiziyuan/triton/test_vdot.py":10:0)
#loc1 = loc(unknown)
#loc13 = loc("/home/meiziyuan/triton/test_vdot.py":26:17)
#loc18 = loc(callsite(#loc1 at #loc13))
module attributes {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.target = "cuda:90", "ttg.threads-per-warp" = 32 : i32} {
  tt.func public @dot_kernel(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/home/meiziyuan/triton/test_vdot.py":10:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/home/meiziyuan/triton/test_vdot.py":10:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/home/meiziyuan/triton/test_vdot.py":10:0), %arg3: i32 loc("/home/meiziyuan/triton/test_vdot.py":10:0)) attributes {noinline = false} {
    %true = arith.constant true loc(#loc1)
    %c32_i32 = arith.constant 32 : i32 loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.muli %0, %c32_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32, #blocked> loc(#loc4)
    %3 = tt.splat %1 : i32 -> tensor<32xi32, #blocked> loc(#loc5)
    %4 = arith.addi %3, %2 : tensor<32xi32, #blocked> loc(#loc5)
    %5 = tt.splat %arg3 : i32 -> tensor<32xi32, #blocked> loc(#loc6)
    %6 = arith.cmpi slt, %4, %5 : tensor<32xi32, #blocked> loc(#loc6)
    %7 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<32x!tt.ptr<f32>, #blocked> loc(#loc7)
    %8 = tt.addptr %7, %4 : tensor<32x!tt.ptr<f32>, #blocked>, tensor<32xi32, #blocked> loc(#loc7)
    %9 = tt.load %8, %6 : tensor<32x!tt.ptr<f32>, #blocked> loc(#loc8)
    %10 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<32x!tt.ptr<f32>, #blocked> loc(#loc9)
    %11 = tt.addptr %10, %4 : tensor<32x!tt.ptr<f32>, #blocked>, tensor<32xi32, #blocked> loc(#loc9)
    %12 = tt.load %11, %6 : tensor<32x!tt.ptr<f32>, #blocked> loc(#loc10)
    %13 = arith.mulf %9, %12 : tensor<32xf32, #blocked> loc(#loc11)
    %14 = tt.reshape %13 allow_reorder : tensor<32xf32, #blocked> -> tensor<32xf32, #blocked> loc(#loc17)
    %15 = "tt.reduce"(%14) <{axis = 0 : i32}> ({
    ^bb0(%arg4: f32 loc(callsite(#loc1 at #loc13)), %arg5: f32 loc(callsite(#loc1 at #loc13))):
      %17 = arith.addf %arg4, %arg5 : f32 loc(#loc20)
      tt.reduce.return %17 : f32 loc(#loc17)
    }) : (tensor<32xf32, #blocked>) -> f32 loc(#loc17)
    %16 = tt.atomic_rmw fadd, acq_rel, gpu, %arg2, %15, %true : (!tt.ptr<f32>, f32, i1) -> f32 loc(#loc15)
    tt.return loc(#loc16)
  } loc(#loc)
} loc(#loc)
#loc2 = loc("/home/meiziyuan/triton/test_vdot.py":19:24)
#loc3 = loc("/home/meiziyuan/triton/test_vdot.py":20:19)
#loc4 = loc("/home/meiziyuan/triton/test_vdot.py":20:45)
#loc5 = loc("/home/meiziyuan/triton/test_vdot.py":20:32)
#loc6 = loc("/home/meiziyuan/triton/test_vdot.py":21:20)
#loc7 = loc("/home/meiziyuan/triton/test_vdot.py":23:28)
#loc8 = loc("/home/meiziyuan/triton/test_vdot.py":23:18)
#loc9 = loc("/home/meiziyuan/triton/test_vdot.py":24:32)
#loc10 = loc("/home/meiziyuan/triton/test_vdot.py":24:20)
#loc11 = loc("/home/meiziyuan/triton/test_vdot.py":26:23)
#loc12 = loc("/root/miniconda3/envs/vllm/lib/python3.12/site-packages/triton/language/standard.py":286:36)
#loc14 = loc("/root/miniconda3/envs/vllm/lib/python3.12/site-packages/triton/language/standard.py":256:15)
#loc15 = loc("/home/meiziyuan/triton/test_vdot.py":27:27)
#loc16 = loc("/home/meiziyuan/triton/test_vdot.py":27:4)
#loc17 = loc(callsite(#loc12 at #loc13))
#loc19 = loc(callsite(#loc14 at #loc12))
#loc20 = loc(callsite(#loc19 at #loc13))


// -----// IR Dump Before CSE (cse) ('builtin.module' operation) //----- //
#blocked = #ttg.blocked<{sizePerThread = [1], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>
#loc = loc("/home/meiziyuan/triton/test_vdot.py":10:0)
#loc1 = loc(unknown)
#loc13 = loc("/home/meiziyuan/triton/test_vdot.py":26:17)
#loc18 = loc(callsite(#loc1 at #loc13))
module attributes {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.target = "cuda:90", "ttg.threads-per-warp" = 32 : i32} {
  tt.func public @dot_kernel(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/home/meiziyuan/triton/test_vdot.py":10:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/home/meiziyuan/triton/test_vdot.py":10:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/home/meiziyuan/triton/test_vdot.py":10:0), %arg3: i32 loc("/home/meiziyuan/triton/test_vdot.py":10:0)) attributes {noinline = false} {
    %true = arith.constant true loc(#loc1)
    %c32_i32 = arith.constant 32 : i32 loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.muli %0, %c32_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32, #blocked> loc(#loc4)
    %3 = tt.splat %1 : i32 -> tensor<32xi32, #blocked> loc(#loc5)
    %4 = arith.addi %3, %2 : tensor<32xi32, #blocked> loc(#loc5)
    %5 = tt.splat %arg3 : i32 -> tensor<32xi32, #blocked> loc(#loc6)
    %6 = arith.cmpi slt, %4, %5 : tensor<32xi32, #blocked> loc(#loc6)
    %7 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<32x!tt.ptr<f32>, #blocked> loc(#loc7)
    %8 = tt.addptr %7, %4 : tensor<32x!tt.ptr<f32>, #blocked>, tensor<32xi32, #blocked> loc(#loc7)
    %9 = tt.load %8, %6 : tensor<32x!tt.ptr<f32>, #blocked> loc(#loc8)
    %10 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<32x!tt.ptr<f32>, #blocked> loc(#loc9)
    %11 = tt.addptr %10, %4 : tensor<32x!tt.ptr<f32>, #blocked>, tensor<32xi32, #blocked> loc(#loc9)
    %12 = tt.load %11, %6 : tensor<32x!tt.ptr<f32>, #blocked> loc(#loc10)
    %13 = arith.mulf %9, %12 : tensor<32xf32, #blocked> loc(#loc11)
    %14 = tt.reshape %13 allow_reorder : tensor<32xf32, #blocked> -> tensor<32xf32, #blocked> loc(#loc17)
    %15 = "tt.reduce"(%14) <{axis = 0 : i32}> ({
    ^bb0(%arg4: f32 loc(callsite(#loc1 at #loc13)), %arg5: f32 loc(callsite(#loc1 at #loc13))):
      %17 = arith.addf %arg4, %arg5 : f32 loc(#loc20)
      tt.reduce.return %17 : f32 loc(#loc17)
    }) : (tensor<32xf32, #blocked>) -> f32 loc(#loc17)
    %16 = tt.atomic_rmw fadd, acq_rel, gpu, %arg2, %15, %true : (!tt.ptr<f32>, f32, i1) -> f32 loc(#loc15)
    tt.return loc(#loc16)
  } loc(#loc)
} loc(#loc)
#loc2 = loc("/home/meiziyuan/triton/test_vdot.py":19:24)
#loc3 = loc("/home/meiziyuan/triton/test_vdot.py":20:19)
#loc4 = loc("/home/meiziyuan/triton/test_vdot.py":20:45)
#loc5 = loc("/home/meiziyuan/triton/test_vdot.py":20:32)
#loc6 = loc("/home/meiziyuan/triton/test_vdot.py":21:20)
#loc7 = loc("/home/meiziyuan/triton/test_vdot.py":23:28)
#loc8 = loc("/home/meiziyuan/triton/test_vdot.py":23:18)
#loc9 = loc("/home/meiziyuan/triton/test_vdot.py":24:32)
#loc10 = loc("/home/meiziyuan/triton/test_vdot.py":24:20)
#loc11 = loc("/home/meiziyuan/triton/test_vdot.py":26:23)
#loc12 = loc("/root/miniconda3/envs/vllm/lib/python3.12/site-packages/triton/language/standard.py":286:36)
#loc14 = loc("/root/miniconda3/envs/vllm/lib/python3.12/site-packages/triton/language/standard.py":256:15)
#loc15 = loc("/home/meiziyuan/triton/test_vdot.py":27:27)
#loc16 = loc("/home/meiziyuan/triton/test_vdot.py":27:4)
#loc17 = loc(callsite(#loc12 at #loc13))
#loc19 = loc(callsite(#loc14 at #loc12))
#loc20 = loc(callsite(#loc19 at #loc13))


// -----// IR Dump Before SymbolDCE (symbol-dce) ('builtin.module' operation) //----- //
#blocked = #ttg.blocked<{sizePerThread = [1], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>
#loc = loc("/home/meiziyuan/triton/test_vdot.py":10:0)
#loc1 = loc(unknown)
#loc13 = loc("/home/meiziyuan/triton/test_vdot.py":26:17)
#loc18 = loc(callsite(#loc1 at #loc13))
module attributes {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.target = "cuda:90", "ttg.threads-per-warp" = 32 : i32} {
  tt.func public @dot_kernel(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/home/meiziyuan/triton/test_vdot.py":10:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/home/meiziyuan/triton/test_vdot.py":10:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/home/meiziyuan/triton/test_vdot.py":10:0), %arg3: i32 loc("/home/meiziyuan/triton/test_vdot.py":10:0)) attributes {noinline = false} {
    %true = arith.constant true loc(#loc1)
    %c32_i32 = arith.constant 32 : i32 loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.muli %0, %c32_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32, #blocked> loc(#loc4)
    %3 = tt.splat %1 : i32 -> tensor<32xi32, #blocked> loc(#loc5)
    %4 = arith.addi %3, %2 : tensor<32xi32, #blocked> loc(#loc5)
    %5 = tt.splat %arg3 : i32 -> tensor<32xi32, #blocked> loc(#loc6)
    %6 = arith.cmpi slt, %4, %5 : tensor<32xi32, #blocked> loc(#loc6)
    %7 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<32x!tt.ptr<f32>, #blocked> loc(#loc7)
    %8 = tt.addptr %7, %4 : tensor<32x!tt.ptr<f32>, #blocked>, tensor<32xi32, #blocked> loc(#loc7)
    %9 = tt.load %8, %6 : tensor<32x!tt.ptr<f32>, #blocked> loc(#loc8)
    %10 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<32x!tt.ptr<f32>, #blocked> loc(#loc9)
    %11 = tt.addptr %10, %4 : tensor<32x!tt.ptr<f32>, #blocked>, tensor<32xi32, #blocked> loc(#loc9)
    %12 = tt.load %11, %6 : tensor<32x!tt.ptr<f32>, #blocked> loc(#loc10)
    %13 = arith.mulf %9, %12 : tensor<32xf32, #blocked> loc(#loc11)
    %14 = tt.reshape %13 allow_reorder : tensor<32xf32, #blocked> -> tensor<32xf32, #blocked> loc(#loc17)
    %15 = "tt.reduce"(%14) <{axis = 0 : i32}> ({
    ^bb0(%arg4: f32 loc(callsite(#loc1 at #loc13)), %arg5: f32 loc(callsite(#loc1 at #loc13))):
      %17 = arith.addf %arg4, %arg5 : f32 loc(#loc20)
      tt.reduce.return %17 : f32 loc(#loc17)
    }) : (tensor<32xf32, #blocked>) -> f32 loc(#loc17)
    %16 = tt.atomic_rmw fadd, acq_rel, gpu, %arg2, %15, %true : (!tt.ptr<f32>, f32, i1) -> f32 loc(#loc15)
    tt.return loc(#loc16)
  } loc(#loc)
} loc(#loc)
#loc2 = loc("/home/meiziyuan/triton/test_vdot.py":19:24)
#loc3 = loc("/home/meiziyuan/triton/test_vdot.py":20:19)
#loc4 = loc("/home/meiziyuan/triton/test_vdot.py":20:45)
#loc5 = loc("/home/meiziyuan/triton/test_vdot.py":20:32)
#loc6 = loc("/home/meiziyuan/triton/test_vdot.py":21:20)
#loc7 = loc("/home/meiziyuan/triton/test_vdot.py":23:28)
#loc8 = loc("/home/meiziyuan/triton/test_vdot.py":23:18)
#loc9 = loc("/home/meiziyuan/triton/test_vdot.py":24:32)
#loc10 = loc("/home/meiziyuan/triton/test_vdot.py":24:20)
#loc11 = loc("/home/meiziyuan/triton/test_vdot.py":26:23)
#loc12 = loc("/root/miniconda3/envs/vllm/lib/python3.12/site-packages/triton/language/standard.py":286:36)
#loc14 = loc("/root/miniconda3/envs/vllm/lib/python3.12/site-packages/triton/language/standard.py":256:15)
#loc15 = loc("/home/meiziyuan/triton/test_vdot.py":27:27)
#loc16 = loc("/home/meiziyuan/triton/test_vdot.py":27:4)
#loc17 = loc(callsite(#loc12 at #loc13))
#loc19 = loc(callsite(#loc14 at #loc12))
#loc20 = loc(callsite(#loc19 at #loc13))


// -----// IR Dump Before TritonGPUFenceInsertion (triton-nvidia-gpu-fence-insertion) ('builtin.module' operation) //----- //
#blocked = #ttg.blocked<{sizePerThread = [1], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>
#loc = loc("/home/meiziyuan/triton/test_vdot.py":10:0)
#loc1 = loc(unknown)
#loc13 = loc("/home/meiziyuan/triton/test_vdot.py":26:17)
#loc18 = loc(callsite(#loc1 at #loc13))
module attributes {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.target = "cuda:90", "ttg.threads-per-warp" = 32 : i32} {
  tt.func public @dot_kernel(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/home/meiziyuan/triton/test_vdot.py":10:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/home/meiziyuan/triton/test_vdot.py":10:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/home/meiziyuan/triton/test_vdot.py":10:0), %arg3: i32 loc("/home/meiziyuan/triton/test_vdot.py":10:0)) attributes {noinline = false} {
    %true = arith.constant true loc(#loc1)
    %c32_i32 = arith.constant 32 : i32 loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.muli %0, %c32_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32, #blocked> loc(#loc4)
    %3 = tt.splat %1 : i32 -> tensor<32xi32, #blocked> loc(#loc5)
    %4 = arith.addi %3, %2 : tensor<32xi32, #blocked> loc(#loc5)
    %5 = tt.splat %arg3 : i32 -> tensor<32xi32, #blocked> loc(#loc6)
    %6 = arith.cmpi slt, %4, %5 : tensor<32xi32, #blocked> loc(#loc6)
    %7 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<32x!tt.ptr<f32>, #blocked> loc(#loc7)
    %8 = tt.addptr %7, %4 : tensor<32x!tt.ptr<f32>, #blocked>, tensor<32xi32, #blocked> loc(#loc7)
    %9 = tt.load %8, %6 : tensor<32x!tt.ptr<f32>, #blocked> loc(#loc8)
    %10 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<32x!tt.ptr<f32>, #blocked> loc(#loc9)
    %11 = tt.addptr %10, %4 : tensor<32x!tt.ptr<f32>, #blocked>, tensor<32xi32, #blocked> loc(#loc9)
    %12 = tt.load %11, %6 : tensor<32x!tt.ptr<f32>, #blocked> loc(#loc10)
    %13 = arith.mulf %9, %12 : tensor<32xf32, #blocked> loc(#loc11)
    %14 = tt.reshape %13 allow_reorder : tensor<32xf32, #blocked> -> tensor<32xf32, #blocked> loc(#loc17)
    %15 = "tt.reduce"(%14) <{axis = 0 : i32}> ({
    ^bb0(%arg4: f32 loc(callsite(#loc1 at #loc13)), %arg5: f32 loc(callsite(#loc1 at #loc13))):
      %17 = arith.addf %arg4, %arg5 : f32 loc(#loc20)
      tt.reduce.return %17 : f32 loc(#loc17)
    }) : (tensor<32xf32, #blocked>) -> f32 loc(#loc17)
    %16 = tt.atomic_rmw fadd, acq_rel, gpu, %arg2, %15, %true : (!tt.ptr<f32>, f32, i1) -> f32 loc(#loc15)
    tt.return loc(#loc16)
  } loc(#loc)
} loc(#loc)
#loc2 = loc("/home/meiziyuan/triton/test_vdot.py":19:24)
#loc3 = loc("/home/meiziyuan/triton/test_vdot.py":20:19)
#loc4 = loc("/home/meiziyuan/triton/test_vdot.py":20:45)
#loc5 = loc("/home/meiziyuan/triton/test_vdot.py":20:32)
#loc6 = loc("/home/meiziyuan/triton/test_vdot.py":21:20)
#loc7 = loc("/home/meiziyuan/triton/test_vdot.py":23:28)
#loc8 = loc("/home/meiziyuan/triton/test_vdot.py":23:18)
#loc9 = loc("/home/meiziyuan/triton/test_vdot.py":24:32)
#loc10 = loc("/home/meiziyuan/triton/test_vdot.py":24:20)
#loc11 = loc("/home/meiziyuan/triton/test_vdot.py":26:23)
#loc12 = loc("/root/miniconda3/envs/vllm/lib/python3.12/site-packages/triton/language/standard.py":286:36)
#loc14 = loc("/root/miniconda3/envs/vllm/lib/python3.12/site-packages/triton/language/standard.py":256:15)
#loc15 = loc("/home/meiziyuan/triton/test_vdot.py":27:27)
#loc16 = loc("/home/meiziyuan/triton/test_vdot.py":27:4)
#loc17 = loc(callsite(#loc12 at #loc13))
#loc19 = loc(callsite(#loc14 at #loc12))
#loc20 = loc(callsite(#loc19 at #loc13))


// -----// IR Dump Before TritonNvidiaGPUTMALoweringPass (triton-nvidia-tma-lowering) ('builtin.module' operation) //----- //
#blocked = #ttg.blocked<{sizePerThread = [1], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>
#loc = loc("/home/meiziyuan/triton/test_vdot.py":10:0)
#loc1 = loc(unknown)
#loc13 = loc("/home/meiziyuan/triton/test_vdot.py":26:17)
#loc18 = loc(callsite(#loc1 at #loc13))
module attributes {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.target = "cuda:90", "ttg.threads-per-warp" = 32 : i32} {
  tt.func public @dot_kernel(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/home/meiziyuan/triton/test_vdot.py":10:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/home/meiziyuan/triton/test_vdot.py":10:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/home/meiziyuan/triton/test_vdot.py":10:0), %arg3: i32 loc("/home/meiziyuan/triton/test_vdot.py":10:0)) attributes {noinline = false} {
    %true = arith.constant true loc(#loc1)
    %c32_i32 = arith.constant 32 : i32 loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.muli %0, %c32_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32, #blocked> loc(#loc4)
    %3 = tt.splat %1 : i32 -> tensor<32xi32, #blocked> loc(#loc5)
    %4 = arith.addi %3, %2 : tensor<32xi32, #blocked> loc(#loc5)
    %5 = tt.splat %arg3 : i32 -> tensor<32xi32, #blocked> loc(#loc6)
    %6 = arith.cmpi slt, %4, %5 : tensor<32xi32, #blocked> loc(#loc6)
    %7 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<32x!tt.ptr<f32>, #blocked> loc(#loc7)
    %8 = tt.addptr %7, %4 : tensor<32x!tt.ptr<f32>, #blocked>, tensor<32xi32, #blocked> loc(#loc7)
    %9 = tt.load %8, %6 : tensor<32x!tt.ptr<f32>, #blocked> loc(#loc8)
    %10 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<32x!tt.ptr<f32>, #blocked> loc(#loc9)
    %11 = tt.addptr %10, %4 : tensor<32x!tt.ptr<f32>, #blocked>, tensor<32xi32, #blocked> loc(#loc9)
    %12 = tt.load %11, %6 : tensor<32x!tt.ptr<f32>, #blocked> loc(#loc10)
    %13 = arith.mulf %9, %12 : tensor<32xf32, #blocked> loc(#loc11)
    %14 = tt.reshape %13 allow_reorder : tensor<32xf32, #blocked> -> tensor<32xf32, #blocked> loc(#loc17)
    %15 = "tt.reduce"(%14) <{axis = 0 : i32}> ({
    ^bb0(%arg4: f32 loc(callsite(#loc1 at #loc13)), %arg5: f32 loc(callsite(#loc1 at #loc13))):
      %17 = arith.addf %arg4, %arg5 : f32 loc(#loc20)
      tt.reduce.return %17 : f32 loc(#loc17)
    }) : (tensor<32xf32, #blocked>) -> f32 loc(#loc17)
    %16 = tt.atomic_rmw fadd, acq_rel, gpu, %arg2, %15, %true : (!tt.ptr<f32>, f32, i1) -> f32 loc(#loc15)
    tt.return loc(#loc16)
  } loc(#loc)
} loc(#loc)
#loc2 = loc("/home/meiziyuan/triton/test_vdot.py":19:24)
#loc3 = loc("/home/meiziyuan/triton/test_vdot.py":20:19)
#loc4 = loc("/home/meiziyuan/triton/test_vdot.py":20:45)
#loc5 = loc("/home/meiziyuan/triton/test_vdot.py":20:32)
#loc6 = loc("/home/meiziyuan/triton/test_vdot.py":21:20)
#loc7 = loc("/home/meiziyuan/triton/test_vdot.py":23:28)
#loc8 = loc("/home/meiziyuan/triton/test_vdot.py":23:18)
#loc9 = loc("/home/meiziyuan/triton/test_vdot.py":24:32)
#loc10 = loc("/home/meiziyuan/triton/test_vdot.py":24:20)
#loc11 = loc("/home/meiziyuan/triton/test_vdot.py":26:23)
#loc12 = loc("/root/miniconda3/envs/vllm/lib/python3.12/site-packages/triton/language/standard.py":286:36)
#loc14 = loc("/root/miniconda3/envs/vllm/lib/python3.12/site-packages/triton/language/standard.py":256:15)
#loc15 = loc("/home/meiziyuan/triton/test_vdot.py":27:27)
#loc16 = loc("/home/meiziyuan/triton/test_vdot.py":27:4)
#loc17 = loc(callsite(#loc12 at #loc13))
#loc19 = loc(callsite(#loc14 at #loc12))
#loc20 = loc(callsite(#loc19 at #loc13))


// -----// IR Dump Before Canonicalizer (canonicalize) ('builtin.module' operation) //----- //
#blocked = #ttg.blocked<{sizePerThread = [1], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>
#loc = loc("/home/meiziyuan/triton/test_vdot.py":10:0)
#loc1 = loc(unknown)
#loc13 = loc("/home/meiziyuan/triton/test_vdot.py":26:17)
#loc18 = loc(callsite(#loc1 at #loc13))
module attributes {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.target = "cuda:90", "ttg.threads-per-warp" = 32 : i32} {
  tt.func public @dot_kernel(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/home/meiziyuan/triton/test_vdot.py":10:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/home/meiziyuan/triton/test_vdot.py":10:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/home/meiziyuan/triton/test_vdot.py":10:0), %arg3: i32 loc("/home/meiziyuan/triton/test_vdot.py":10:0)) attributes {noinline = false} {
    %true = arith.constant true loc(#loc1)
    %c32_i32 = arith.constant 32 : i32 loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.muli %0, %c32_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32, #blocked> loc(#loc4)
    %3 = tt.splat %1 : i32 -> tensor<32xi32, #blocked> loc(#loc5)
    %4 = arith.addi %3, %2 : tensor<32xi32, #blocked> loc(#loc5)
    %5 = tt.splat %arg3 : i32 -> tensor<32xi32, #blocked> loc(#loc6)
    %6 = arith.cmpi slt, %4, %5 : tensor<32xi32, #blocked> loc(#loc6)
    %7 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<32x!tt.ptr<f32>, #blocked> loc(#loc7)
    %8 = tt.addptr %7, %4 : tensor<32x!tt.ptr<f32>, #blocked>, tensor<32xi32, #blocked> loc(#loc7)
    %9 = tt.load %8, %6 : tensor<32x!tt.ptr<f32>, #blocked> loc(#loc8)
    %10 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<32x!tt.ptr<f32>, #blocked> loc(#loc9)
    %11 = tt.addptr %10, %4 : tensor<32x!tt.ptr<f32>, #blocked>, tensor<32xi32, #blocked> loc(#loc9)
    %12 = tt.load %11, %6 : tensor<32x!tt.ptr<f32>, #blocked> loc(#loc10)
    %13 = arith.mulf %9, %12 : tensor<32xf32, #blocked> loc(#loc11)
    %14 = tt.reshape %13 allow_reorder : tensor<32xf32, #blocked> -> tensor<32xf32, #blocked> loc(#loc17)
    %15 = "tt.reduce"(%14) <{axis = 0 : i32}> ({
    ^bb0(%arg4: f32 loc(callsite(#loc1 at #loc13)), %arg5: f32 loc(callsite(#loc1 at #loc13))):
      %17 = arith.addf %arg4, %arg5 : f32 loc(#loc20)
      tt.reduce.return %17 : f32 loc(#loc17)
    }) : (tensor<32xf32, #blocked>) -> f32 loc(#loc17)
    %16 = tt.atomic_rmw fadd, acq_rel, gpu, %arg2, %15, %true : (!tt.ptr<f32>, f32, i1) -> f32 loc(#loc15)
    tt.return loc(#loc16)
  } loc(#loc)
} loc(#loc)
#loc2 = loc("/home/meiziyuan/triton/test_vdot.py":19:24)
#loc3 = loc("/home/meiziyuan/triton/test_vdot.py":20:19)
#loc4 = loc("/home/meiziyuan/triton/test_vdot.py":20:45)
#loc5 = loc("/home/meiziyuan/triton/test_vdot.py":20:32)
#loc6 = loc("/home/meiziyuan/triton/test_vdot.py":21:20)
#loc7 = loc("/home/meiziyuan/triton/test_vdot.py":23:28)
#loc8 = loc("/home/meiziyuan/triton/test_vdot.py":23:18)
#loc9 = loc("/home/meiziyuan/triton/test_vdot.py":24:32)
#loc10 = loc("/home/meiziyuan/triton/test_vdot.py":24:20)
#loc11 = loc("/home/meiziyuan/triton/test_vdot.py":26:23)
#loc12 = loc("/root/miniconda3/envs/vllm/lib/python3.12/site-packages/triton/language/standard.py":286:36)
#loc14 = loc("/root/miniconda3/envs/vllm/lib/python3.12/site-packages/triton/language/standard.py":256:15)
#loc15 = loc("/home/meiziyuan/triton/test_vdot.py":27:27)
#loc16 = loc("/home/meiziyuan/triton/test_vdot.py":27:4)
#loc17 = loc(callsite(#loc12 at #loc13))
#loc19 = loc(callsite(#loc14 at #loc12))
#loc20 = loc(callsite(#loc19 at #loc13))


// -----// IR Dump Before TritonGPUWSCanonicalization (tritongpu-warp-spec-canonicalization) ('builtin.module' operation) //----- //
#blocked = #ttg.blocked<{sizePerThread = [1], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>
#loc = loc("/home/meiziyuan/triton/test_vdot.py":10:0)
#loc1 = loc(unknown)
#loc13 = loc("/home/meiziyuan/triton/test_vdot.py":26:17)
#loc18 = loc(callsite(#loc1 at #loc13))
module attributes {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.target = "cuda:90", "ttg.threads-per-warp" = 32 : i32} {
  tt.func public @dot_kernel(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/home/meiziyuan/triton/test_vdot.py":10:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/home/meiziyuan/triton/test_vdot.py":10:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/home/meiziyuan/triton/test_vdot.py":10:0), %arg3: i32 loc("/home/meiziyuan/triton/test_vdot.py":10:0)) attributes {noinline = false} {
    %true = arith.constant true loc(#loc1)
    %c32_i32 = arith.constant 32 : i32 loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.muli %0, %c32_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32, #blocked> loc(#loc4)
    %3 = tt.splat %1 : i32 -> tensor<32xi32, #blocked> loc(#loc5)
    %4 = arith.addi %3, %2 : tensor<32xi32, #blocked> loc(#loc5)
    %5 = tt.splat %arg3 : i32 -> tensor<32xi32, #blocked> loc(#loc6)
    %6 = arith.cmpi slt, %4, %5 : tensor<32xi32, #blocked> loc(#loc6)
    %7 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<32x!tt.ptr<f32>, #blocked> loc(#loc7)
    %8 = tt.addptr %7, %4 : tensor<32x!tt.ptr<f32>, #blocked>, tensor<32xi32, #blocked> loc(#loc7)
    %9 = tt.load %8, %6 : tensor<32x!tt.ptr<f32>, #blocked> loc(#loc8)
    %10 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<32x!tt.ptr<f32>, #blocked> loc(#loc9)
    %11 = tt.addptr %10, %4 : tensor<32x!tt.ptr<f32>, #blocked>, tensor<32xi32, #blocked> loc(#loc9)
    %12 = tt.load %11, %6 : tensor<32x!tt.ptr<f32>, #blocked> loc(#loc10)
    %13 = arith.mulf %9, %12 : tensor<32xf32, #blocked> loc(#loc11)
    %14 = tt.reshape %13 allow_reorder : tensor<32xf32, #blocked> -> tensor<32xf32, #blocked> loc(#loc17)
    %15 = "tt.reduce"(%14) <{axis = 0 : i32}> ({
    ^bb0(%arg4: f32 loc(callsite(#loc1 at #loc13)), %arg5: f32 loc(callsite(#loc1 at #loc13))):
      %17 = arith.addf %arg4, %arg5 : f32 loc(#loc20)
      tt.reduce.return %17 : f32 loc(#loc17)
    }) : (tensor<32xf32, #blocked>) -> f32 loc(#loc17)
    %16 = tt.atomic_rmw fadd, acq_rel, gpu, %arg2, %15, %true : (!tt.ptr<f32>, f32, i1) -> f32 loc(#loc15)
    tt.return loc(#loc16)
  } loc(#loc)
} loc(#loc)
#loc2 = loc("/home/meiziyuan/triton/test_vdot.py":19:24)
#loc3 = loc("/home/meiziyuan/triton/test_vdot.py":20:19)
#loc4 = loc("/home/meiziyuan/triton/test_vdot.py":20:45)
#loc5 = loc("/home/meiziyuan/triton/test_vdot.py":20:32)
#loc6 = loc("/home/meiziyuan/triton/test_vdot.py":21:20)
#loc7 = loc("/home/meiziyuan/triton/test_vdot.py":23:28)
#loc8 = loc("/home/meiziyuan/triton/test_vdot.py":23:18)
#loc9 = loc("/home/meiziyuan/triton/test_vdot.py":24:32)
#loc10 = loc("/home/meiziyuan/triton/test_vdot.py":24:20)
#loc11 = loc("/home/meiziyuan/triton/test_vdot.py":26:23)
#loc12 = loc("/root/miniconda3/envs/vllm/lib/python3.12/site-packages/triton/language/standard.py":286:36)
#loc14 = loc("/root/miniconda3/envs/vllm/lib/python3.12/site-packages/triton/language/standard.py":256:15)
#loc15 = loc("/home/meiziyuan/triton/test_vdot.py":27:27)
#loc16 = loc("/home/meiziyuan/triton/test_vdot.py":27:4)
#loc17 = loc(callsite(#loc12 at #loc13))
#loc19 = loc(callsite(#loc14 at #loc12))
#loc20 = loc(callsite(#loc19 at #loc13))


// -----// IR Dump Before TritonNvidiaGPUMMALoweringPass (triton-nvidia-mma-lowering) ('builtin.module' operation) //----- //
#blocked = #ttg.blocked<{sizePerThread = [1], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>
#loc = loc("/home/meiziyuan/triton/test_vdot.py":10:0)
#loc1 = loc(unknown)
#loc13 = loc("/home/meiziyuan/triton/test_vdot.py":26:17)
#loc18 = loc(callsite(#loc1 at #loc13))
module attributes {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.target = "cuda:90", "ttg.threads-per-warp" = 32 : i32} {
  tt.func public @dot_kernel(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/home/meiziyuan/triton/test_vdot.py":10:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/home/meiziyuan/triton/test_vdot.py":10:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/home/meiziyuan/triton/test_vdot.py":10:0), %arg3: i32 loc("/home/meiziyuan/triton/test_vdot.py":10:0)) attributes {noinline = false} {
    %true = arith.constant true loc(#loc1)
    %c32_i32 = arith.constant 32 : i32 loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.muli %0, %c32_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32, #blocked> loc(#loc4)
    %3 = tt.splat %1 : i32 -> tensor<32xi32, #blocked> loc(#loc5)
    %4 = arith.addi %3, %2 : tensor<32xi32, #blocked> loc(#loc5)
    %5 = tt.splat %arg3 : i32 -> tensor<32xi32, #blocked> loc(#loc6)
    %6 = arith.cmpi slt, %4, %5 : tensor<32xi32, #blocked> loc(#loc6)
    %7 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<32x!tt.ptr<f32>, #blocked> loc(#loc7)
    %8 = tt.addptr %7, %4 : tensor<32x!tt.ptr<f32>, #blocked>, tensor<32xi32, #blocked> loc(#loc7)
    %9 = tt.load %8, %6 : tensor<32x!tt.ptr<f32>, #blocked> loc(#loc8)
    %10 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<32x!tt.ptr<f32>, #blocked> loc(#loc9)
    %11 = tt.addptr %10, %4 : tensor<32x!tt.ptr<f32>, #blocked>, tensor<32xi32, #blocked> loc(#loc9)
    %12 = tt.load %11, %6 : tensor<32x!tt.ptr<f32>, #blocked> loc(#loc10)
    %13 = arith.mulf %9, %12 : tensor<32xf32, #blocked> loc(#loc11)
    %14 = tt.reshape %13 allow_reorder : tensor<32xf32, #blocked> -> tensor<32xf32, #blocked> loc(#loc17)
    %15 = "tt.reduce"(%14) <{axis = 0 : i32}> ({
    ^bb0(%arg4: f32 loc(callsite(#loc1 at #loc13)), %arg5: f32 loc(callsite(#loc1 at #loc13))):
      %17 = arith.addf %arg4, %arg5 : f32 loc(#loc20)
      tt.reduce.return %17 : f32 loc(#loc17)
    }) : (tensor<32xf32, #blocked>) -> f32 loc(#loc17)
    %16 = tt.atomic_rmw fadd, acq_rel, gpu, %arg2, %15, %true : (!tt.ptr<f32>, f32, i1) -> f32 loc(#loc15)
    tt.return loc(#loc16)
  } loc(#loc)
} loc(#loc)
#loc2 = loc("/home/meiziyuan/triton/test_vdot.py":19:24)
#loc3 = loc("/home/meiziyuan/triton/test_vdot.py":20:19)
#loc4 = loc("/home/meiziyuan/triton/test_vdot.py":20:45)
#loc5 = loc("/home/meiziyuan/triton/test_vdot.py":20:32)
#loc6 = loc("/home/meiziyuan/triton/test_vdot.py":21:20)
#loc7 = loc("/home/meiziyuan/triton/test_vdot.py":23:28)
#loc8 = loc("/home/meiziyuan/triton/test_vdot.py":23:18)
#loc9 = loc("/home/meiziyuan/triton/test_vdot.py":24:32)
#loc10 = loc("/home/meiziyuan/triton/test_vdot.py":24:20)
#loc11 = loc("/home/meiziyuan/triton/test_vdot.py":26:23)
#loc12 = loc("/root/miniconda3/envs/vllm/lib/python3.12/site-packages/triton/language/standard.py":286:36)
#loc14 = loc("/root/miniconda3/envs/vllm/lib/python3.12/site-packages/triton/language/standard.py":256:15)
#loc15 = loc("/home/meiziyuan/triton/test_vdot.py":27:27)
#loc16 = loc("/home/meiziyuan/triton/test_vdot.py":27:4)
#loc17 = loc(callsite(#loc12 at #loc13))
#loc19 = loc(callsite(#loc14 at #loc12))
#loc20 = loc(callsite(#loc19 at #loc13))


// -----// IR Dump Before TritonGPUCombineTensorSelectAndIf (tritongpu-combine-tensor-select-and-if) ('builtin.module' operation) //----- //
#blocked = #ttg.blocked<{sizePerThread = [1], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>
#loc = loc("/home/meiziyuan/triton/test_vdot.py":10:0)
#loc1 = loc(unknown)
#loc13 = loc("/home/meiziyuan/triton/test_vdot.py":26:17)
#loc18 = loc(callsite(#loc1 at #loc13))
module attributes {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.target = "cuda:90", "ttg.threads-per-warp" = 32 : i32} {
  tt.func public @dot_kernel(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/home/meiziyuan/triton/test_vdot.py":10:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/home/meiziyuan/triton/test_vdot.py":10:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/home/meiziyuan/triton/test_vdot.py":10:0), %arg3: i32 loc("/home/meiziyuan/triton/test_vdot.py":10:0)) attributes {noinline = false} {
    %true = arith.constant true loc(#loc1)
    %c32_i32 = arith.constant 32 : i32 loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.muli %0, %c32_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32, #blocked> loc(#loc4)
    %3 = tt.splat %1 : i32 -> tensor<32xi32, #blocked> loc(#loc5)
    %4 = arith.addi %3, %2 : tensor<32xi32, #blocked> loc(#loc5)
    %5 = tt.splat %arg3 : i32 -> tensor<32xi32, #blocked> loc(#loc6)
    %6 = arith.cmpi slt, %4, %5 : tensor<32xi32, #blocked> loc(#loc6)
    %7 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<32x!tt.ptr<f32>, #blocked> loc(#loc7)
    %8 = tt.addptr %7, %4 : tensor<32x!tt.ptr<f32>, #blocked>, tensor<32xi32, #blocked> loc(#loc7)
    %9 = tt.load %8, %6 : tensor<32x!tt.ptr<f32>, #blocked> loc(#loc8)
    %10 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<32x!tt.ptr<f32>, #blocked> loc(#loc9)
    %11 = tt.addptr %10, %4 : tensor<32x!tt.ptr<f32>, #blocked>, tensor<32xi32, #blocked> loc(#loc9)
    %12 = tt.load %11, %6 : tensor<32x!tt.ptr<f32>, #blocked> loc(#loc10)
    %13 = arith.mulf %9, %12 : tensor<32xf32, #blocked> loc(#loc11)
    %14 = tt.reshape %13 allow_reorder : tensor<32xf32, #blocked> -> tensor<32xf32, #blocked> loc(#loc17)
    %15 = "tt.reduce"(%14) <{axis = 0 : i32}> ({
    ^bb0(%arg4: f32 loc(callsite(#loc1 at #loc13)), %arg5: f32 loc(callsite(#loc1 at #loc13))):
      %17 = arith.addf %arg4, %arg5 : f32 loc(#loc20)
      tt.reduce.return %17 : f32 loc(#loc17)
    }) : (tensor<32xf32, #blocked>) -> f32 loc(#loc17)
    %16 = tt.atomic_rmw fadd, acq_rel, gpu, %arg2, %15, %true : (!tt.ptr<f32>, f32, i1) -> f32 loc(#loc15)
    tt.return loc(#loc16)
  } loc(#loc)
} loc(#loc)
#loc2 = loc("/home/meiziyuan/triton/test_vdot.py":19:24)
#loc3 = loc("/home/meiziyuan/triton/test_vdot.py":20:19)
#loc4 = loc("/home/meiziyuan/triton/test_vdot.py":20:45)
#loc5 = loc("/home/meiziyuan/triton/test_vdot.py":20:32)
#loc6 = loc("/home/meiziyuan/triton/test_vdot.py":21:20)
#loc7 = loc("/home/meiziyuan/triton/test_vdot.py":23:28)
#loc8 = loc("/home/meiziyuan/triton/test_vdot.py":23:18)
#loc9 = loc("/home/meiziyuan/triton/test_vdot.py":24:32)
#loc10 = loc("/home/meiziyuan/triton/test_vdot.py":24:20)
#loc11 = loc("/home/meiziyuan/triton/test_vdot.py":26:23)
#loc12 = loc("/root/miniconda3/envs/vllm/lib/python3.12/site-packages/triton/language/standard.py":286:36)
#loc14 = loc("/root/miniconda3/envs/vllm/lib/python3.12/site-packages/triton/language/standard.py":256:15)
#loc15 = loc("/home/meiziyuan/triton/test_vdot.py":27:27)
#loc16 = loc("/home/meiziyuan/triton/test_vdot.py":27:4)
#loc17 = loc(callsite(#loc12 at #loc13))
#loc19 = loc(callsite(#loc14 at #loc12))
#loc20 = loc(callsite(#loc19 at #loc13))


// -----// IR Dump Before TritonGPUAllocateWarpGroups (tritongpu-allocate-warp-groups) ('builtin.module' operation) //----- //
#blocked = #ttg.blocked<{sizePerThread = [1], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>
#loc = loc("/home/meiziyuan/triton/test_vdot.py":10:0)
#loc1 = loc(unknown)
#loc13 = loc("/home/meiziyuan/triton/test_vdot.py":26:17)
#loc18 = loc(callsite(#loc1 at #loc13))
module attributes {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.target = "cuda:90", "ttg.threads-per-warp" = 32 : i32} {
  tt.func public @dot_kernel(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/home/meiziyuan/triton/test_vdot.py":10:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/home/meiziyuan/triton/test_vdot.py":10:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/home/meiziyuan/triton/test_vdot.py":10:0), %arg3: i32 loc("/home/meiziyuan/triton/test_vdot.py":10:0)) attributes {noinline = false} {
    %true = arith.constant true loc(#loc1)
    %c32_i32 = arith.constant 32 : i32 loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.muli %0, %c32_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32, #blocked> loc(#loc4)
    %3 = tt.splat %1 : i32 -> tensor<32xi32, #blocked> loc(#loc5)
    %4 = arith.addi %3, %2 : tensor<32xi32, #blocked> loc(#loc5)
    %5 = tt.splat %arg3 : i32 -> tensor<32xi32, #blocked> loc(#loc6)
    %6 = arith.cmpi slt, %4, %5 : tensor<32xi32, #blocked> loc(#loc6)
    %7 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<32x!tt.ptr<f32>, #blocked> loc(#loc7)
    %8 = tt.addptr %7, %4 : tensor<32x!tt.ptr<f32>, #blocked>, tensor<32xi32, #blocked> loc(#loc7)
    %9 = tt.load %8, %6 : tensor<32x!tt.ptr<f32>, #blocked> loc(#loc8)
    %10 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<32x!tt.ptr<f32>, #blocked> loc(#loc9)
    %11 = tt.addptr %10, %4 : tensor<32x!tt.ptr<f32>, #blocked>, tensor<32xi32, #blocked> loc(#loc9)
    %12 = tt.load %11, %6 : tensor<32x!tt.ptr<f32>, #blocked> loc(#loc10)
    %13 = arith.mulf %9, %12 : tensor<32xf32, #blocked> loc(#loc11)
    %14 = tt.reshape %13 allow_reorder : tensor<32xf32, #blocked> -> tensor<32xf32, #blocked> loc(#loc17)
    %15 = "tt.reduce"(%14) <{axis = 0 : i32}> ({
    ^bb0(%arg4: f32 loc(callsite(#loc1 at #loc13)), %arg5: f32 loc(callsite(#loc1 at #loc13))):
      %17 = arith.addf %arg4, %arg5 : f32 loc(#loc20)
      tt.reduce.return %17 : f32 loc(#loc17)
    }) : (tensor<32xf32, #blocked>) -> f32 loc(#loc17)
    %16 = tt.atomic_rmw fadd, acq_rel, gpu, %arg2, %15, %true : (!tt.ptr<f32>, f32, i1) -> f32 loc(#loc15)
    tt.return loc(#loc16)
  } loc(#loc)
} loc(#loc)
#loc2 = loc("/home/meiziyuan/triton/test_vdot.py":19:24)
#loc3 = loc("/home/meiziyuan/triton/test_vdot.py":20:19)
#loc4 = loc("/home/meiziyuan/triton/test_vdot.py":20:45)
#loc5 = loc("/home/meiziyuan/triton/test_vdot.py":20:32)
#loc6 = loc("/home/meiziyuan/triton/test_vdot.py":21:20)
#loc7 = loc("/home/meiziyuan/triton/test_vdot.py":23:28)
#loc8 = loc("/home/meiziyuan/triton/test_vdot.py":23:18)
#loc9 = loc("/home/meiziyuan/triton/test_vdot.py":24:32)
#loc10 = loc("/home/meiziyuan/triton/test_vdot.py":24:20)
#loc11 = loc("/home/meiziyuan/triton/test_vdot.py":26:23)
#loc12 = loc("/root/miniconda3/envs/vllm/lib/python3.12/site-packages/triton/language/standard.py":286:36)
#loc14 = loc("/root/miniconda3/envs/vllm/lib/python3.12/site-packages/triton/language/standard.py":256:15)
#loc15 = loc("/home/meiziyuan/triton/test_vdot.py":27:27)
#loc16 = loc("/home/meiziyuan/triton/test_vdot.py":27:4)
#loc17 = loc(callsite(#loc12 at #loc13))
#loc19 = loc(callsite(#loc14 at #loc12))
#loc20 = loc(callsite(#loc19 at #loc13))


// -----// IR Dump Before SCFToControlFlowPass (convert-scf-to-cf) ('builtin.module' operation) //----- //
#blocked = #ttg.blocked<{sizePerThread = [1], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>
#loc = loc("/home/meiziyuan/triton/test_vdot.py":10:0)
#loc1 = loc(unknown)
#loc13 = loc("/home/meiziyuan/triton/test_vdot.py":26:17)
#loc18 = loc(callsite(#loc1 at #loc13))
module attributes {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.target = "cuda:90", "ttg.threads-per-warp" = 32 : i32, "ttg.total-num-warps" = 4 : i32} {
  tt.func public @dot_kernel(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/home/meiziyuan/triton/test_vdot.py":10:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/home/meiziyuan/triton/test_vdot.py":10:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/home/meiziyuan/triton/test_vdot.py":10:0), %arg3: i32 loc("/home/meiziyuan/triton/test_vdot.py":10:0)) attributes {noinline = false} {
    %true = arith.constant true loc(#loc1)
    %c32_i32 = arith.constant 32 : i32 loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.muli %0, %c32_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32, #blocked> loc(#loc4)
    %3 = tt.splat %1 : i32 -> tensor<32xi32, #blocked> loc(#loc5)
    %4 = arith.addi %3, %2 : tensor<32xi32, #blocked> loc(#loc5)
    %5 = tt.splat %arg3 : i32 -> tensor<32xi32, #blocked> loc(#loc6)
    %6 = arith.cmpi slt, %4, %5 : tensor<32xi32, #blocked> loc(#loc6)
    %7 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<32x!tt.ptr<f32>, #blocked> loc(#loc7)
    %8 = tt.addptr %7, %4 : tensor<32x!tt.ptr<f32>, #blocked>, tensor<32xi32, #blocked> loc(#loc7)
    %9 = tt.load %8, %6 : tensor<32x!tt.ptr<f32>, #blocked> loc(#loc8)
    %10 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<32x!tt.ptr<f32>, #blocked> loc(#loc9)
    %11 = tt.addptr %10, %4 : tensor<32x!tt.ptr<f32>, #blocked>, tensor<32xi32, #blocked> loc(#loc9)
    %12 = tt.load %11, %6 : tensor<32x!tt.ptr<f32>, #blocked> loc(#loc10)
    %13 = arith.mulf %9, %12 : tensor<32xf32, #blocked> loc(#loc11)
    %14 = tt.reshape %13 allow_reorder : tensor<32xf32, #blocked> -> tensor<32xf32, #blocked> loc(#loc17)
    %15 = "tt.reduce"(%14) <{axis = 0 : i32}> ({
    ^bb0(%arg4: f32 loc(callsite(#loc1 at #loc13)), %arg5: f32 loc(callsite(#loc1 at #loc13))):
      %17 = arith.addf %arg4, %arg5 : f32 loc(#loc20)
      tt.reduce.return %17 : f32 loc(#loc17)
    }) : (tensor<32xf32, #blocked>) -> f32 loc(#loc17)
    %16 = tt.atomic_rmw fadd, acq_rel, gpu, %arg2, %15, %true : (!tt.ptr<f32>, f32, i1) -> f32 loc(#loc15)
    tt.return loc(#loc16)
  } loc(#loc)
} loc(#loc)
#loc2 = loc("/home/meiziyuan/triton/test_vdot.py":19:24)
#loc3 = loc("/home/meiziyuan/triton/test_vdot.py":20:19)
#loc4 = loc("/home/meiziyuan/triton/test_vdot.py":20:45)
#loc5 = loc("/home/meiziyuan/triton/test_vdot.py":20:32)
#loc6 = loc("/home/meiziyuan/triton/test_vdot.py":21:20)
#loc7 = loc("/home/meiziyuan/triton/test_vdot.py":23:28)
#loc8 = loc("/home/meiziyuan/triton/test_vdot.py":23:18)
#loc9 = loc("/home/meiziyuan/triton/test_vdot.py":24:32)
#loc10 = loc("/home/meiziyuan/triton/test_vdot.py":24:20)
#loc11 = loc("/home/meiziyuan/triton/test_vdot.py":26:23)
#loc12 = loc("/root/miniconda3/envs/vllm/lib/python3.12/site-packages/triton/language/standard.py":286:36)
#loc14 = loc("/root/miniconda3/envs/vllm/lib/python3.12/site-packages/triton/language/standard.py":256:15)
#loc15 = loc("/home/meiziyuan/triton/test_vdot.py":27:27)
#loc16 = loc("/home/meiziyuan/triton/test_vdot.py":27:4)
#loc17 = loc(callsite(#loc12 at #loc13))
#loc19 = loc(callsite(#loc14 at #loc12))
#loc20 = loc(callsite(#loc19 at #loc13))


// -----// IR Dump Before AllocateSharedMemory (allocate-shared-memory) ('builtin.module' operation) //----- //
#blocked = #ttg.blocked<{sizePerThread = [1], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>
#loc = loc("/home/meiziyuan/triton/test_vdot.py":10:0)
#loc1 = loc(unknown)
#loc13 = loc("/home/meiziyuan/triton/test_vdot.py":26:17)
#loc18 = loc(callsite(#loc1 at #loc13))
module attributes {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.target = "cuda:90", "ttg.threads-per-warp" = 32 : i32, "ttg.total-num-warps" = 4 : i32} {
  tt.func public @dot_kernel(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/home/meiziyuan/triton/test_vdot.py":10:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/home/meiziyuan/triton/test_vdot.py":10:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/home/meiziyuan/triton/test_vdot.py":10:0), %arg3: i32 loc("/home/meiziyuan/triton/test_vdot.py":10:0)) attributes {noinline = false} {
    %true = arith.constant true loc(#loc1)
    %c32_i32 = arith.constant 32 : i32 loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.muli %0, %c32_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32, #blocked> loc(#loc4)
    %3 = tt.splat %1 : i32 -> tensor<32xi32, #blocked> loc(#loc5)
    %4 = arith.addi %3, %2 : tensor<32xi32, #blocked> loc(#loc5)
    %5 = tt.splat %arg3 : i32 -> tensor<32xi32, #blocked> loc(#loc6)
    %6 = arith.cmpi slt, %4, %5 : tensor<32xi32, #blocked> loc(#loc6)
    %7 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<32x!tt.ptr<f32>, #blocked> loc(#loc7)
    %8 = tt.addptr %7, %4 : tensor<32x!tt.ptr<f32>, #blocked>, tensor<32xi32, #blocked> loc(#loc7)
    %9 = tt.load %8, %6 : tensor<32x!tt.ptr<f32>, #blocked> loc(#loc8)
    %10 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<32x!tt.ptr<f32>, #blocked> loc(#loc9)
    %11 = tt.addptr %10, %4 : tensor<32x!tt.ptr<f32>, #blocked>, tensor<32xi32, #blocked> loc(#loc9)
    %12 = tt.load %11, %6 : tensor<32x!tt.ptr<f32>, #blocked> loc(#loc10)
    %13 = arith.mulf %9, %12 : tensor<32xf32, #blocked> loc(#loc11)
    %14 = tt.reshape %13 allow_reorder : tensor<32xf32, #blocked> -> tensor<32xf32, #blocked> loc(#loc17)
    %15 = "tt.reduce"(%14) <{axis = 0 : i32}> ({
    ^bb0(%arg4: f32 loc(callsite(#loc1 at #loc13)), %arg5: f32 loc(callsite(#loc1 at #loc13))):
      %17 = arith.addf %arg4, %arg5 : f32 loc(#loc20)
      tt.reduce.return %17 : f32 loc(#loc17)
    }) : (tensor<32xf32, #blocked>) -> f32 loc(#loc17)
    %16 = tt.atomic_rmw fadd, acq_rel, gpu, %arg2, %15, %true : (!tt.ptr<f32>, f32, i1) -> f32 loc(#loc15)
    tt.return loc(#loc16)
  } loc(#loc)
} loc(#loc)
#loc2 = loc("/home/meiziyuan/triton/test_vdot.py":19:24)
#loc3 = loc("/home/meiziyuan/triton/test_vdot.py":20:19)
#loc4 = loc("/home/meiziyuan/triton/test_vdot.py":20:45)
#loc5 = loc("/home/meiziyuan/triton/test_vdot.py":20:32)
#loc6 = loc("/home/meiziyuan/triton/test_vdot.py":21:20)
#loc7 = loc("/home/meiziyuan/triton/test_vdot.py":23:28)
#loc8 = loc("/home/meiziyuan/triton/test_vdot.py":23:18)
#loc9 = loc("/home/meiziyuan/triton/test_vdot.py":24:32)
#loc10 = loc("/home/meiziyuan/triton/test_vdot.py":24:20)
#loc11 = loc("/home/meiziyuan/triton/test_vdot.py":26:23)
#loc12 = loc("/root/miniconda3/envs/vllm/lib/python3.12/site-packages/triton/language/standard.py":286:36)
#loc14 = loc("/root/miniconda3/envs/vllm/lib/python3.12/site-packages/triton/language/standard.py":256:15)
#loc15 = loc("/home/meiziyuan/triton/test_vdot.py":27:27)
#loc16 = loc("/home/meiziyuan/triton/test_vdot.py":27:4)
#loc17 = loc(callsite(#loc12 at #loc13))
#loc19 = loc(callsite(#loc14 at #loc12))
#loc20 = loc(callsite(#loc19 at #loc13))


// -----// IR Dump Before TritionTensorMemoryAllocationPass (triton-tensor-memory-allocation) ('builtin.module' operation) //----- //
#blocked = #ttg.blocked<{sizePerThread = [1], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>
#loc = loc("/home/meiziyuan/triton/test_vdot.py":10:0)
#loc1 = loc(unknown)
#loc13 = loc("/home/meiziyuan/triton/test_vdot.py":26:17)
#loc18 = loc(callsite(#loc1 at #loc13))
module attributes {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.shared = 0 : i32, ttg.target = "cuda:90", "ttg.threads-per-warp" = 32 : i32, "ttg.total-num-warps" = 4 : i32} {
  tt.func public @dot_kernel(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/home/meiziyuan/triton/test_vdot.py":10:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/home/meiziyuan/triton/test_vdot.py":10:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/home/meiziyuan/triton/test_vdot.py":10:0), %arg3: i32 loc("/home/meiziyuan/triton/test_vdot.py":10:0)) attributes {noinline = false} {
    %true = arith.constant true loc(#loc1)
    %c32_i32 = arith.constant 32 : i32 loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.muli %0, %c32_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32, #blocked> loc(#loc4)
    %3 = tt.splat %1 : i32 -> tensor<32xi32, #blocked> loc(#loc5)
    %4 = arith.addi %3, %2 : tensor<32xi32, #blocked> loc(#loc5)
    %5 = tt.splat %arg3 : i32 -> tensor<32xi32, #blocked> loc(#loc6)
    %6 = arith.cmpi slt, %4, %5 : tensor<32xi32, #blocked> loc(#loc6)
    %7 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<32x!tt.ptr<f32>, #blocked> loc(#loc7)
    %8 = tt.addptr %7, %4 : tensor<32x!tt.ptr<f32>, #blocked>, tensor<32xi32, #blocked> loc(#loc7)
    %9 = tt.load %8, %6 : tensor<32x!tt.ptr<f32>, #blocked> loc(#loc8)
    %10 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<32x!tt.ptr<f32>, #blocked> loc(#loc9)
    %11 = tt.addptr %10, %4 : tensor<32x!tt.ptr<f32>, #blocked>, tensor<32xi32, #blocked> loc(#loc9)
    %12 = tt.load %11, %6 : tensor<32x!tt.ptr<f32>, #blocked> loc(#loc10)
    %13 = arith.mulf %9, %12 : tensor<32xf32, #blocked> loc(#loc11)
    %14 = tt.reshape %13 allow_reorder : tensor<32xf32, #blocked> -> tensor<32xf32, #blocked> loc(#loc17)
    %15 = "tt.reduce"(%14) <{axis = 0 : i32}> ({
    ^bb0(%arg4: f32 loc(callsite(#loc1 at #loc13)), %arg5: f32 loc(callsite(#loc1 at #loc13))):
      %17 = arith.addf %arg4, %arg5 : f32 loc(#loc20)
      tt.reduce.return %17 : f32 loc(#loc17)
    }) : (tensor<32xf32, #blocked>) -> f32 loc(#loc17)
    %16 = tt.atomic_rmw fadd, acq_rel, gpu, %arg2, %15, %true : (!tt.ptr<f32>, f32, i1) -> f32 loc(#loc15)
    tt.return loc(#loc16)
  } loc(#loc)
} loc(#loc)
#loc2 = loc("/home/meiziyuan/triton/test_vdot.py":19:24)
#loc3 = loc("/home/meiziyuan/triton/test_vdot.py":20:19)
#loc4 = loc("/home/meiziyuan/triton/test_vdot.py":20:45)
#loc5 = loc("/home/meiziyuan/triton/test_vdot.py":20:32)
#loc6 = loc("/home/meiziyuan/triton/test_vdot.py":21:20)
#loc7 = loc("/home/meiziyuan/triton/test_vdot.py":23:28)
#loc8 = loc("/home/meiziyuan/triton/test_vdot.py":23:18)
#loc9 = loc("/home/meiziyuan/triton/test_vdot.py":24:32)
#loc10 = loc("/home/meiziyuan/triton/test_vdot.py":24:20)
#loc11 = loc("/home/meiziyuan/triton/test_vdot.py":26:23)
#loc12 = loc("/root/miniconda3/envs/vllm/lib/python3.12/site-packages/triton/language/standard.py":286:36)
#loc14 = loc("/root/miniconda3/envs/vllm/lib/python3.12/site-packages/triton/language/standard.py":256:15)
#loc15 = loc("/home/meiziyuan/triton/test_vdot.py":27:27)
#loc16 = loc("/home/meiziyuan/triton/test_vdot.py":27:4)
#loc17 = loc(callsite(#loc12 at #loc13))
#loc19 = loc(callsite(#loc14 at #loc12))
#loc20 = loc(callsite(#loc19 at #loc13))


// -----// IR Dump Before TritonGPUGlobalScratchAllocationPass (tritongpu-global-scratch-memory-allocation) ('builtin.module' operation) //----- //
#blocked = #ttg.blocked<{sizePerThread = [1], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>
#loc = loc("/home/meiziyuan/triton/test_vdot.py":10:0)
#loc1 = loc(unknown)
#loc13 = loc("/home/meiziyuan/triton/test_vdot.py":26:17)
#loc18 = loc(callsite(#loc1 at #loc13))
module attributes {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.shared = 0 : i32, ttg.target = "cuda:90", ttg.tensor_memory_size = 0 : i32, "ttg.threads-per-warp" = 32 : i32, "ttg.total-num-warps" = 4 : i32} {
  tt.func public @dot_kernel(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/home/meiziyuan/triton/test_vdot.py":10:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/home/meiziyuan/triton/test_vdot.py":10:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/home/meiziyuan/triton/test_vdot.py":10:0), %arg3: i32 loc("/home/meiziyuan/triton/test_vdot.py":10:0)) attributes {noinline = false} {
    %true = arith.constant true loc(#loc1)
    %c32_i32 = arith.constant 32 : i32 loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.muli %0, %c32_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32, #blocked> loc(#loc4)
    %3 = tt.splat %1 : i32 -> tensor<32xi32, #blocked> loc(#loc5)
    %4 = arith.addi %3, %2 : tensor<32xi32, #blocked> loc(#loc5)
    %5 = tt.splat %arg3 : i32 -> tensor<32xi32, #blocked> loc(#loc6)
    %6 = arith.cmpi slt, %4, %5 : tensor<32xi32, #blocked> loc(#loc6)
    %7 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<32x!tt.ptr<f32>, #blocked> loc(#loc7)
    %8 = tt.addptr %7, %4 : tensor<32x!tt.ptr<f32>, #blocked>, tensor<32xi32, #blocked> loc(#loc7)
    %9 = tt.load %8, %6 : tensor<32x!tt.ptr<f32>, #blocked> loc(#loc8)
    %10 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<32x!tt.ptr<f32>, #blocked> loc(#loc9)
    %11 = tt.addptr %10, %4 : tensor<32x!tt.ptr<f32>, #blocked>, tensor<32xi32, #blocked> loc(#loc9)
    %12 = tt.load %11, %6 : tensor<32x!tt.ptr<f32>, #blocked> loc(#loc10)
    %13 = arith.mulf %9, %12 : tensor<32xf32, #blocked> loc(#loc11)
    %14 = tt.reshape %13 allow_reorder : tensor<32xf32, #blocked> -> tensor<32xf32, #blocked> loc(#loc17)
    %15 = "tt.reduce"(%14) <{axis = 0 : i32}> ({
    ^bb0(%arg4: f32 loc(callsite(#loc1 at #loc13)), %arg5: f32 loc(callsite(#loc1 at #loc13))):
      %17 = arith.addf %arg4, %arg5 : f32 loc(#loc20)
      tt.reduce.return %17 : f32 loc(#loc17)
    }) : (tensor<32xf32, #blocked>) -> f32 loc(#loc17)
    %16 = tt.atomic_rmw fadd, acq_rel, gpu, %arg2, %15, %true : (!tt.ptr<f32>, f32, i1) -> f32 loc(#loc15)
    tt.return loc(#loc16)
  } loc(#loc)
} loc(#loc)
#loc2 = loc("/home/meiziyuan/triton/test_vdot.py":19:24)
#loc3 = loc("/home/meiziyuan/triton/test_vdot.py":20:19)
#loc4 = loc("/home/meiziyuan/triton/test_vdot.py":20:45)
#loc5 = loc("/home/meiziyuan/triton/test_vdot.py":20:32)
#loc6 = loc("/home/meiziyuan/triton/test_vdot.py":21:20)
#loc7 = loc("/home/meiziyuan/triton/test_vdot.py":23:28)
#loc8 = loc("/home/meiziyuan/triton/test_vdot.py":23:18)
#loc9 = loc("/home/meiziyuan/triton/test_vdot.py":24:32)
#loc10 = loc("/home/meiziyuan/triton/test_vdot.py":24:20)
#loc11 = loc("/home/meiziyuan/triton/test_vdot.py":26:23)
#loc12 = loc("/root/miniconda3/envs/vllm/lib/python3.12/site-packages/triton/language/standard.py":286:36)
#loc14 = loc("/root/miniconda3/envs/vllm/lib/python3.12/site-packages/triton/language/standard.py":256:15)
#loc15 = loc("/home/meiziyuan/triton/test_vdot.py":27:27)
#loc16 = loc("/home/meiziyuan/triton/test_vdot.py":27:4)
#loc17 = loc(callsite(#loc12 at #loc13))
#loc19 = loc(callsite(#loc14 at #loc12))
#loc20 = loc(callsite(#loc19 at #loc13))


// -----// IR Dump Before ConvertTritonGPUToLLVM (convert-triton-gpu-to-llvm) ('builtin.module' operation) //----- //
#blocked = #ttg.blocked<{sizePerThread = [1], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>
#loc = loc("/home/meiziyuan/triton/test_vdot.py":10:0)
#loc1 = loc(unknown)
#loc13 = loc("/home/meiziyuan/triton/test_vdot.py":26:17)
#loc18 = loc(callsite(#loc1 at #loc13))
module attributes {ttg.global_scratch_memory_alignment = 1 : i32, ttg.global_scratch_memory_size = 0 : i32, "ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.shared = 0 : i32, ttg.target = "cuda:90", ttg.tensor_memory_size = 0 : i32, "ttg.threads-per-warp" = 32 : i32, "ttg.total-num-warps" = 4 : i32} {
  tt.func public @dot_kernel(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/home/meiziyuan/triton/test_vdot.py":10:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/home/meiziyuan/triton/test_vdot.py":10:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/home/meiziyuan/triton/test_vdot.py":10:0), %arg3: i32 loc("/home/meiziyuan/triton/test_vdot.py":10:0)) attributes {noinline = false, ttg.global_scratch_memory_alignment = 1 : i32, ttg.global_scratch_memory_size = 0 : i32} {
    %true = arith.constant true loc(#loc1)
    %c32_i32 = arith.constant 32 : i32 loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.muli %0, %c32_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32, #blocked> loc(#loc4)
    %3 = tt.splat %1 : i32 -> tensor<32xi32, #blocked> loc(#loc5)
    %4 = arith.addi %3, %2 : tensor<32xi32, #blocked> loc(#loc5)
    %5 = tt.splat %arg3 : i32 -> tensor<32xi32, #blocked> loc(#loc6)
    %6 = arith.cmpi slt, %4, %5 : tensor<32xi32, #blocked> loc(#loc6)
    %7 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<32x!tt.ptr<f32>, #blocked> loc(#loc7)
    %8 = tt.addptr %7, %4 : tensor<32x!tt.ptr<f32>, #blocked>, tensor<32xi32, #blocked> loc(#loc7)
    %9 = tt.load %8, %6 : tensor<32x!tt.ptr<f32>, #blocked> loc(#loc8)
    %10 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<32x!tt.ptr<f32>, #blocked> loc(#loc9)
    %11 = tt.addptr %10, %4 : tensor<32x!tt.ptr<f32>, #blocked>, tensor<32xi32, #blocked> loc(#loc9)
    %12 = tt.load %11, %6 : tensor<32x!tt.ptr<f32>, #blocked> loc(#loc10)
    %13 = arith.mulf %9, %12 : tensor<32xf32, #blocked> loc(#loc11)
    %14 = tt.reshape %13 allow_reorder : tensor<32xf32, #blocked> -> tensor<32xf32, #blocked> loc(#loc17)
    %15 = "tt.reduce"(%14) <{axis = 0 : i32}> ({
    ^bb0(%arg4: f32 loc(callsite(#loc1 at #loc13)), %arg5: f32 loc(callsite(#loc1 at #loc13))):
      %17 = arith.addf %arg4, %arg5 : f32 loc(#loc20)
      tt.reduce.return %17 : f32 loc(#loc17)
    }) : (tensor<32xf32, #blocked>) -> f32 loc(#loc17)
    %16 = tt.atomic_rmw fadd, acq_rel, gpu, %arg2, %15, %true : (!tt.ptr<f32>, f32, i1) -> f32 loc(#loc15)
    tt.return loc(#loc16)
  } loc(#loc)
} loc(#loc)
#loc2 = loc("/home/meiziyuan/triton/test_vdot.py":19:24)
#loc3 = loc("/home/meiziyuan/triton/test_vdot.py":20:19)
#loc4 = loc("/home/meiziyuan/triton/test_vdot.py":20:45)
#loc5 = loc("/home/meiziyuan/triton/test_vdot.py":20:32)
#loc6 = loc("/home/meiziyuan/triton/test_vdot.py":21:20)
#loc7 = loc("/home/meiziyuan/triton/test_vdot.py":23:28)
#loc8 = loc("/home/meiziyuan/triton/test_vdot.py":23:18)
#loc9 = loc("/home/meiziyuan/triton/test_vdot.py":24:32)
#loc10 = loc("/home/meiziyuan/triton/test_vdot.py":24:20)
#loc11 = loc("/home/meiziyuan/triton/test_vdot.py":26:23)
#loc12 = loc("/root/miniconda3/envs/vllm/lib/python3.12/site-packages/triton/language/standard.py":286:36)
#loc14 = loc("/root/miniconda3/envs/vllm/lib/python3.12/site-packages/triton/language/standard.py":256:15)
#loc15 = loc("/home/meiziyuan/triton/test_vdot.py":27:27)
#loc16 = loc("/home/meiziyuan/triton/test_vdot.py":27:4)
#loc17 = loc(callsite(#loc12 at #loc13))
#loc19 = loc(callsite(#loc14 at #loc12))
#loc20 = loc(callsite(#loc19 at #loc13))


// -----// IR Dump Before Canonicalizer (canonicalize) ('builtin.module' operation) //----- //
#loc = loc("/home/meiziyuan/triton/test_vdot.py":10:0)
module attributes {ttg.global_scratch_memory_alignment = 1 : i32, ttg.global_scratch_memory_size = 0 : i32, "ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.shared = 0 : i32, ttg.target = "cuda:90", ttg.tensor_memory_size = 0 : i32, "ttg.threads-per-warp" = 32 : i32, "ttg.total-num-warps" = 4 : i32} {
  llvm.mlir.global external @global_smem() {addr_space = 3 : i32, alignment = 16 : i64} : !llvm.array<0 x i8> loc(#loc)
  llvm.func @dot_kernel(%arg0: !llvm.ptr<1> {tt.divisibility = 16 : i32} loc("/home/meiziyuan/triton/test_vdot.py":10:0), %arg1: !llvm.ptr<1> {tt.divisibility = 16 : i32} loc("/home/meiziyuan/triton/test_vdot.py":10:0), %arg2: !llvm.ptr<1> {tt.divisibility = 16 : i32} loc("/home/meiziyuan/triton/test_vdot.py":10:0), %arg3: i32 loc("/home/meiziyuan/triton/test_vdot.py":10:0), %arg4: !llvm.ptr<1> loc("/home/meiziyuan/triton/test_vdot.py":10:0)) attributes {noinline = false, nvvm.kernel = 1 : ui1, nvvm.reqntid = array<i32: 128>, ttg.global_scratch_memory_alignment = 1 : i32, ttg.global_scratch_memory_size = 0 : i32} {
    %0 = llvm.mlir.constant(true) : i1 loc(#loc1)
    %1 = llvm.mlir.constant(32 : i32) : i32 loc(#loc1)
    %2 = llvm.call_intrinsic "llvm.nvvm.read.ptx.sreg.ctaid.x"() : () -> i32 loc(#loc2)
    %3 = llvm.mul %2, %1 : i32 loc(#loc3)
    %4 = llvm.mlir.constant(0 : index) : i32 loc(#loc4)
    %5 = nvvm.read.ptx.sreg.tid.x : i32 loc(#loc4)
    %6 = llvm.mlir.constant(32 : i32) : i32 loc(#loc4)
    %7 = llvm.urem %5, %6 : i32 loc(#loc4)
    %8 = llvm.udiv %5, %6 : i32 loc(#loc4)
    %9 = llvm.mlir.constant(0 : i32) : i32 loc(#loc4)
    %10 = nvgpu.cluster_id loc(#loc4)
    %11 = llvm.mlir.constant(0 : i32) : i32 loc(#loc4)
    %12 = llvm.mlir.constant(0 : i32) : i32 loc(#loc4)
    %13 = llvm.mlir.constant(1 : i32) : i32 loc(#loc4)
    %14 = llvm.and %7, %13 : i32 loc(#loc4)
    %15 = llvm.icmp "eq" %14, %12 : i32 loc(#loc4)
    %16 = llvm.mlir.constant(1 : i32) : i32 loc(#loc4)
    %17 = llvm.select %15, %12, %16 : i1, i32 loc(#loc4)
    %18 = llvm.xor %12, %17 : i32 loc(#loc4)
    %19 = llvm.mlir.constant(2 : i32) : i32 loc(#loc4)
    %20 = llvm.and %7, %19 : i32 loc(#loc4)
    %21 = llvm.icmp "eq" %20, %12 : i32 loc(#loc4)
    %22 = llvm.mlir.constant(2 : i32) : i32 loc(#loc4)
    %23 = llvm.select %21, %12, %22 : i1, i32 loc(#loc4)
    %24 = llvm.xor %18, %23 : i32 loc(#loc4)
    %25 = llvm.mlir.constant(4 : i32) : i32 loc(#loc4)
    %26 = llvm.and %7, %25 : i32 loc(#loc4)
    %27 = llvm.icmp "eq" %26, %12 : i32 loc(#loc4)
    %28 = llvm.mlir.constant(4 : i32) : i32 loc(#loc4)
    %29 = llvm.select %27, %12, %28 : i1, i32 loc(#loc4)
    %30 = llvm.xor %24, %29 : i32 loc(#loc4)
    %31 = llvm.mlir.constant(8 : i32) : i32 loc(#loc4)
    %32 = llvm.and %7, %31 : i32 loc(#loc4)
    %33 = llvm.icmp "eq" %32, %12 : i32 loc(#loc4)
    %34 = llvm.mlir.constant(8 : i32) : i32 loc(#loc4)
    %35 = llvm.select %33, %12, %34 : i1, i32 loc(#loc4)
    %36 = llvm.xor %30, %35 : i32 loc(#loc4)
    %37 = llvm.mlir.constant(16 : i32) : i32 loc(#loc4)
    %38 = llvm.and %7, %37 : i32 loc(#loc4)
    %39 = llvm.icmp "eq" %38, %12 : i32 loc(#loc4)
    %40 = llvm.mlir.constant(16 : i32) : i32 loc(#loc4)
    %41 = llvm.select %39, %12, %40 : i1, i32 loc(#loc4)
    %42 = llvm.xor %36, %41 : i32 loc(#loc4)
    %43 = llvm.mlir.constant(1 : i32) : i32 loc(#loc4)
    %44 = llvm.and %8, %43 : i32 loc(#loc4)
    %45 = llvm.icmp "eq" %44, %12 : i32 loc(#loc4)
    %46 = llvm.mlir.constant(2 : i32) : i32 loc(#loc4)
    %47 = llvm.and %8, %46 : i32 loc(#loc4)
    %48 = llvm.icmp "eq" %47, %12 : i32 loc(#loc4)
    %49 = llvm.mlir.constant(0 : i32) : i32 loc(#loc4)
    %50 = llvm.xor %42, %49 : i32 loc(#loc4)
    %51 = llvm.add %50, %4 : i32 loc(#loc4)
    %52 = llvm.mlir.undef : !llvm.struct<(i32)> loc(#loc4)
    %53 = llvm.insertvalue %51, %52[0] : !llvm.struct<(i32)>  loc(#loc4)
    %54 = llvm.bitcast %3 : i32 to i32 loc(#loc5)
    %55 = llvm.mlir.undef : !llvm.struct<(i32)> loc(#loc5)
    %56 = llvm.insertvalue %54, %55[0] : !llvm.struct<(i32)>  loc(#loc5)
    %57 = llvm.extractvalue %56[0] : !llvm.struct<(i32)>  loc(#loc5)
    %58 = llvm.extractvalue %53[0] : !llvm.struct<(i32)>  loc(#loc5)
    %59 = llvm.add %57, %58 : i32 loc(#loc5)
    %60 = llvm.mlir.undef : !llvm.struct<(i32)> loc(#loc5)
    %61 = llvm.insertvalue %59, %60[0] : !llvm.struct<(i32)>  loc(#loc5)
    %62 = llvm.bitcast %arg3 : i32 to i32 loc(#loc6)
    %63 = llvm.mlir.undef : !llvm.struct<(i32)> loc(#loc6)
    %64 = llvm.insertvalue %62, %63[0] : !llvm.struct<(i32)>  loc(#loc6)
    %65 = llvm.extractvalue %61[0] : !llvm.struct<(i32)>  loc(#loc6)
    %66 = llvm.extractvalue %64[0] : !llvm.struct<(i32)>  loc(#loc6)
    %67 = llvm.icmp "slt" %65, %66 : i32 loc(#loc6)
    %68 = llvm.mlir.undef : !llvm.struct<(i1)> loc(#loc6)
    %69 = llvm.insertvalue %67, %68[0] : !llvm.struct<(i1)>  loc(#loc6)
    %70 = llvm.bitcast %arg0 : !llvm.ptr<1> to !llvm.ptr<1> loc(#loc7)
    %71 = llvm.mlir.undef : !llvm.struct<(ptr<1>)> loc(#loc7)
    %72 = llvm.insertvalue %70, %71[0] : !llvm.struct<(ptr<1>)>  loc(#loc7)
    %73 = llvm.extractvalue %72[0] : !llvm.struct<(ptr<1>)>  loc(#loc7)
    %74 = llvm.extractvalue %61[0] : !llvm.struct<(i32)>  loc(#loc7)
    %75 = llvm.getelementptr %73[%74] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, f32 loc(#loc7)
    %76 = llvm.mlir.undef : !llvm.struct<(ptr<1>)> loc(#loc7)
    %77 = llvm.insertvalue %75, %76[0] : !llvm.struct<(ptr<1>)>  loc(#loc7)
    %78 = llvm.extractvalue %77[0] : !llvm.struct<(ptr<1>)>  loc(#loc8)
    %79 = llvm.extractvalue %69[0] : !llvm.struct<(i1)>  loc(#loc8)
    %80 = llvm.inline_asm has_side_effects asm_dialect = att operand_attrs = [] "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b" %78, %79 : (!llvm.ptr<1>, i1) -> i32 loc(#loc8)
    %81 = llvm.bitcast %80 : i32 to vector<1xf32> loc(#loc8)
    %82 = llvm.mlir.constant(0 : index) : i32 loc(#loc8)
    %83 = llvm.extractelement %81[%82 : i32] : vector<1xf32> loc(#loc8)
    %84 = llvm.mlir.undef : !llvm.struct<(f32)> loc(#loc8)
    %85 = llvm.insertvalue %83, %84[0] : !llvm.struct<(f32)>  loc(#loc8)
    %86 = llvm.bitcast %arg1 : !llvm.ptr<1> to !llvm.ptr<1> loc(#loc9)
    %87 = llvm.mlir.undef : !llvm.struct<(ptr<1>)> loc(#loc9)
    %88 = llvm.insertvalue %86, %87[0] : !llvm.struct<(ptr<1>)>  loc(#loc9)
    %89 = llvm.extractvalue %88[0] : !llvm.struct<(ptr<1>)>  loc(#loc9)
    %90 = llvm.extractvalue %61[0] : !llvm.struct<(i32)>  loc(#loc9)
    %91 = llvm.getelementptr %89[%90] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, f32 loc(#loc9)
    %92 = llvm.mlir.undef : !llvm.struct<(ptr<1>)> loc(#loc9)
    %93 = llvm.insertvalue %91, %92[0] : !llvm.struct<(ptr<1>)>  loc(#loc9)
    %94 = llvm.extractvalue %93[0] : !llvm.struct<(ptr<1>)>  loc(#loc10)
    %95 = llvm.extractvalue %69[0] : !llvm.struct<(i1)>  loc(#loc10)
    %96 = llvm.inline_asm has_side_effects asm_dialect = att operand_attrs = [] "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b" %94, %95 : (!llvm.ptr<1>, i1) -> i32 loc(#loc10)
    %97 = llvm.bitcast %96 : i32 to vector<1xf32> loc(#loc10)
    %98 = llvm.mlir.constant(0 : index) : i32 loc(#loc10)
    %99 = llvm.extractelement %97[%98 : i32] : vector<1xf32> loc(#loc10)
    %100 = llvm.mlir.undef : !llvm.struct<(f32)> loc(#loc10)
    %101 = llvm.insertvalue %99, %100[0] : !llvm.struct<(f32)>  loc(#loc10)
    %102 = llvm.extractvalue %85[0] : !llvm.struct<(f32)>  loc(#loc11)
    %103 = llvm.extractvalue %101[0] : !llvm.struct<(f32)>  loc(#loc11)
    %104 = llvm.fmul %102, %103 : f32 loc(#loc11)
    %105 = llvm.mlir.undef : !llvm.struct<(f32)> loc(#loc11)
    %106 = llvm.insertvalue %104, %105[0] : !llvm.struct<(f32)>  loc(#loc11)
    %107 = llvm.extractvalue %106[0] : !llvm.struct<(f32)>  loc(#loc17)
    %108 = llvm.mlir.undef : !llvm.struct<(f32)> loc(#loc17)
    %109 = llvm.insertvalue %107, %108[0] : !llvm.struct<(f32)>  loc(#loc17)
    %110 = llvm.extractvalue %109[0] : !llvm.struct<(f32)>  loc(#loc17)
    %111 = nvvm.read.ptx.sreg.tid.x : i32 loc(#loc17)
    %112 = llvm.mlir.constant(32 : i32) : i32 loc(#loc17)
    %113 = llvm.urem %111, %112 : i32 loc(#loc17)
    %114 = llvm.udiv %111, %112 : i32 loc(#loc17)
    %115 = llvm.mlir.constant(0 : i32) : i32 loc(#loc17)
    %116 = nvgpu.cluster_id loc(#loc17)
    %117 = llvm.mlir.constant(0 : i32) : i32 loc(#loc17)
    %118 = llvm.mlir.constant(0 : i32) : i32 loc(#loc17)
    %119 = llvm.mlir.constant(1 : i32) : i32 loc(#loc17)
    %120 = llvm.and %113, %119 : i32 loc(#loc17)
    %121 = llvm.icmp "eq" %120, %118 : i32 loc(#loc17)
    %122 = llvm.mlir.constant(1 : i32) : i32 loc(#loc17)
    %123 = llvm.select %121, %118, %122 : i1, i32 loc(#loc17)
    %124 = llvm.xor %118, %123 : i32 loc(#loc17)
    %125 = llvm.mlir.constant(2 : i32) : i32 loc(#loc17)
    %126 = llvm.and %113, %125 : i32 loc(#loc17)
    %127 = llvm.icmp "eq" %126, %118 : i32 loc(#loc17)
    %128 = llvm.mlir.constant(2 : i32) : i32 loc(#loc17)
    %129 = llvm.select %127, %118, %128 : i1, i32 loc(#loc17)
    %130 = llvm.xor %124, %129 : i32 loc(#loc17)
    %131 = llvm.mlir.constant(4 : i32) : i32 loc(#loc17)
    %132 = llvm.and %113, %131 : i32 loc(#loc17)
    %133 = llvm.icmp "eq" %132, %118 : i32 loc(#loc17)
    %134 = llvm.mlir.constant(4 : i32) : i32 loc(#loc17)
    %135 = llvm.select %133, %118, %134 : i1, i32 loc(#loc17)
    %136 = llvm.xor %130, %135 : i32 loc(#loc17)
    %137 = llvm.mlir.constant(8 : i32) : i32 loc(#loc17)
    %138 = llvm.and %113, %137 : i32 loc(#loc17)
    %139 = llvm.icmp "eq" %138, %118 : i32 loc(#loc17)
    %140 = llvm.mlir.constant(8 : i32) : i32 loc(#loc17)
    %141 = llvm.select %139, %118, %140 : i1, i32 loc(#loc17)
    %142 = llvm.xor %136, %141 : i32 loc(#loc17)
    %143 = llvm.mlir.constant(16 : i32) : i32 loc(#loc17)
    %144 = llvm.and %113, %143 : i32 loc(#loc17)
    %145 = llvm.icmp "eq" %144, %118 : i32 loc(#loc17)
    %146 = llvm.mlir.constant(16 : i32) : i32 loc(#loc17)
    %147 = llvm.select %145, %118, %146 : i1, i32 loc(#loc17)
    %148 = llvm.xor %142, %147 : i32 loc(#loc17)
    %149 = llvm.mlir.constant(1 : i32) : i32 loc(#loc17)
    %150 = llvm.and %114, %149 : i32 loc(#loc17)
    %151 = llvm.icmp "eq" %150, %118 : i32 loc(#loc17)
    %152 = llvm.mlir.constant(2 : i32) : i32 loc(#loc17)
    %153 = llvm.and %114, %152 : i32 loc(#loc17)
    %154 = llvm.icmp "eq" %153, %118 : i32 loc(#loc17)
    %155 = llvm.mlir.constant(0 : i32) : i32 loc(#loc17)
    %156 = llvm.xor %148, %155 : i32 loc(#loc17)
    %157 = llvm.mlir.constant(16 : i32) : i32 loc(#loc17)
    %158 = llvm.mlir.constant(31 : i32) : i32 loc(#loc17)
    %159 = llvm.bitcast %110 : f32 to i32 loc(#loc17)
    %160 = llvm.mlir.constant(-1 : i32) : i32 loc(#loc17)
    %161 = nvvm.shfl.sync  bfly %160, %159, %157, %158 : i32 -> i32 loc(#loc17)
    %162 = llvm.bitcast %161 : i32 to f32 loc(#loc17)
    %163 = llvm.fadd %110, %162 : f32 loc(#loc19)
    %164 = llvm.mlir.constant(8 : i32) : i32 loc(#loc17)
    %165 = llvm.mlir.constant(31 : i32) : i32 loc(#loc17)
    %166 = llvm.bitcast %163 : f32 to i32 loc(#loc17)
    %167 = llvm.mlir.constant(-1 : i32) : i32 loc(#loc17)
    %168 = nvvm.shfl.sync  bfly %167, %166, %164, %165 : i32 -> i32 loc(#loc17)
    %169 = llvm.bitcast %168 : i32 to f32 loc(#loc17)
    %170 = llvm.fadd %163, %169 : f32 loc(#loc19)
    %171 = llvm.mlir.constant(4 : i32) : i32 loc(#loc17)
    %172 = llvm.mlir.constant(31 : i32) : i32 loc(#loc17)
    %173 = llvm.bitcast %170 : f32 to i32 loc(#loc17)
    %174 = llvm.mlir.constant(-1 : i32) : i32 loc(#loc17)
    %175 = nvvm.shfl.sync  bfly %174, %173, %171, %172 : i32 -> i32 loc(#loc17)
    %176 = llvm.bitcast %175 : i32 to f32 loc(#loc17)
    %177 = llvm.fadd %170, %176 : f32 loc(#loc19)
    %178 = llvm.mlir.constant(2 : i32) : i32 loc(#loc17)
    %179 = llvm.mlir.constant(31 : i32) : i32 loc(#loc17)
    %180 = llvm.bitcast %177 : f32 to i32 loc(#loc17)
    %181 = llvm.mlir.constant(-1 : i32) : i32 loc(#loc17)
    %182 = nvvm.shfl.sync  bfly %181, %180, %178, %179 : i32 -> i32 loc(#loc17)
    %183 = llvm.bitcast %182 : i32 to f32 loc(#loc17)
    %184 = llvm.fadd %177, %183 : f32 loc(#loc19)
    %185 = llvm.mlir.constant(1 : i32) : i32 loc(#loc17)
    %186 = llvm.mlir.constant(31 : i32) : i32 loc(#loc17)
    %187 = llvm.bitcast %184 : f32 to i32 loc(#loc17)
    %188 = llvm.mlir.constant(-1 : i32) : i32 loc(#loc17)
    %189 = nvvm.shfl.sync  bfly %188, %187, %185, %186 : i32 -> i32 loc(#loc17)
    %190 = llvm.bitcast %189 : i32 to f32 loc(#loc17)
    %191 = llvm.fadd %184, %190 : f32 loc(#loc19)
    %192 = llvm.mlir.constant(0 : i32) : i32 loc(#loc15)
    %193 = nvvm.read.ptx.sreg.tid.x : i32 loc(#loc15)
    %194 = llvm.mlir.constant(32 : i32) : i32 loc(#loc15)
    %195 = llvm.urem %193, %194 : i32 loc(#loc15)
    %196 = llvm.udiv %193, %194 : i32 loc(#loc15)
    %197 = llvm.mlir.constant(0 : i32) : i32 loc(#loc15)
    %198 = nvgpu.cluster_id loc(#loc15)
    %199 = llvm.mlir.constant(-1 : i32) : i32 loc(#loc15)
    %200 = llvm.and %195, %199 : i32 loc(#loc15)
    %201 = llvm.icmp "eq" %200, %192 : i32 loc(#loc15)
    %202 = llvm.mlir.constant(-1 : i32) : i32 loc(#loc15)
    %203 = llvm.and %196, %202 : i32 loc(#loc15)
    %204 = llvm.icmp "eq" %203, %192 : i32 loc(#loc15)
    %205 = llvm.and %201, %204 : i1 loc(#loc15)
    %206 = llvm.mlir.constant(-1 : i32) : i32 loc(#loc15)
    %207 = llvm.and %197, %206 : i32 loc(#loc15)
    %208 = llvm.icmp "eq" %207, %192 : i32 loc(#loc15)
    %209 = llvm.and %205, %208 : i1 loc(#loc15)
    %210 = llvm.and %209, %0 : i1 loc(#loc15)
    %211 = llvm.inline_asm has_side_effects asm_dialect = att operand_attrs = [] "mov.u32 $0, 0x0;\0A\09@$3 atom.global.gpu.acq_rel.add.f32 $0, [ $1 + 0 ], $2;", "=r,l,r,b" %arg2, %191, %210 : (!llvm.ptr<1>, f32, i1) -> f32 loc(#loc15)
    llvm.return loc(#loc16)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/home/meiziyuan/triton/test_vdot.py":19:24)
#loc3 = loc("/home/meiziyuan/triton/test_vdot.py":20:19)
#loc4 = loc("/home/meiziyuan/triton/test_vdot.py":20:45)
#loc5 = loc("/home/meiziyuan/triton/test_vdot.py":20:32)
#loc6 = loc("/home/meiziyuan/triton/test_vdot.py":21:20)
#loc7 = loc("/home/meiziyuan/triton/test_vdot.py":23:28)
#loc8 = loc("/home/meiziyuan/triton/test_vdot.py":23:18)
#loc9 = loc("/home/meiziyuan/triton/test_vdot.py":24:32)
#loc10 = loc("/home/meiziyuan/triton/test_vdot.py":24:20)
#loc11 = loc("/home/meiziyuan/triton/test_vdot.py":26:23)
#loc12 = loc("/root/miniconda3/envs/vllm/lib/python3.12/site-packages/triton/language/standard.py":286:36)
#loc13 = loc("/home/meiziyuan/triton/test_vdot.py":26:17)
#loc14 = loc("/root/miniconda3/envs/vllm/lib/python3.12/site-packages/triton/language/standard.py":256:15)
#loc15 = loc("/home/meiziyuan/triton/test_vdot.py":27:27)
#loc16 = loc("/home/meiziyuan/triton/test_vdot.py":27:4)
#loc17 = loc(callsite(#loc12 at #loc13))
#loc18 = loc(callsite(#loc14 at #loc12))
#loc19 = loc(callsite(#loc18 at #loc13))


// -----// IR Dump Before CSE (cse) ('builtin.module' operation) //----- //
#loc = loc("/home/meiziyuan/triton/test_vdot.py":10:0)
module attributes {ttg.global_scratch_memory_alignment = 1 : i32, ttg.global_scratch_memory_size = 0 : i32, "ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.shared = 0 : i32, ttg.target = "cuda:90", ttg.tensor_memory_size = 0 : i32, "ttg.threads-per-warp" = 32 : i32, "ttg.total-num-warps" = 4 : i32} {
  llvm.mlir.global external @global_smem() {addr_space = 3 : i32, alignment = 16 : i64} : !llvm.array<0 x i8> loc(#loc)
  llvm.func @dot_kernel(%arg0: !llvm.ptr<1> {tt.divisibility = 16 : i32} loc("/home/meiziyuan/triton/test_vdot.py":10:0), %arg1: !llvm.ptr<1> {tt.divisibility = 16 : i32} loc("/home/meiziyuan/triton/test_vdot.py":10:0), %arg2: !llvm.ptr<1> {tt.divisibility = 16 : i32} loc("/home/meiziyuan/triton/test_vdot.py":10:0), %arg3: i32 loc("/home/meiziyuan/triton/test_vdot.py":10:0), %arg4: !llvm.ptr<1> loc("/home/meiziyuan/triton/test_vdot.py":10:0)) attributes {noinline = false, nvvm.kernel = 1 : ui1, nvvm.reqntid = array<i32: 128>, ttg.global_scratch_memory_alignment = 1 : i32, ttg.global_scratch_memory_size = 0 : i32} {
    %0 = llvm.mlir.constant(-1 : i32) : i32 loc(#loc1)
    %1 = llvm.mlir.constant(31 : i32) : i32 loc(#loc1)
    %2 = llvm.mlir.constant(16 : i32) : i32 loc(#loc1)
    %3 = llvm.mlir.constant(8 : i32) : i32 loc(#loc1)
    %4 = llvm.mlir.constant(4 : i32) : i32 loc(#loc1)
    %5 = llvm.mlir.constant(2 : i32) : i32 loc(#loc1)
    %6 = llvm.mlir.constant(1 : i32) : i32 loc(#loc1)
    %7 = llvm.mlir.constant(0 : i32) : i32 loc(#loc1)
    %8 = llvm.mlir.constant(0 : index) : i32 loc(#loc1)
    %9 = llvm.mlir.constant(true) : i1 loc(#loc1)
    %10 = llvm.mlir.constant(32 : i32) : i32 loc(#loc1)
    %11 = llvm.call_intrinsic "llvm.nvvm.read.ptx.sreg.ctaid.x"() : () -> i32 loc(#loc2)
    %12 = llvm.mul %11, %10 : i32 loc(#loc3)
    %13 = nvvm.read.ptx.sreg.tid.x : i32 loc(#loc4)
    %14 = llvm.urem %13, %10 : i32 loc(#loc4)
    %15 = llvm.and %14, %6 : i32 loc(#loc4)
    %16 = llvm.icmp "eq" %15, %7 : i32 loc(#loc4)
    %17 = llvm.select %16, %7, %6 : i1, i32 loc(#loc4)
    %18 = llvm.xor %7, %17 : i32 loc(#loc4)
    %19 = llvm.and %14, %5 : i32 loc(#loc4)
    %20 = llvm.icmp "eq" %19, %7 : i32 loc(#loc4)
    %21 = llvm.select %20, %7, %5 : i1, i32 loc(#loc4)
    %22 = llvm.xor %18, %21 : i32 loc(#loc4)
    %23 = llvm.and %14, %4 : i32 loc(#loc4)
    %24 = llvm.icmp "eq" %23, %7 : i32 loc(#loc4)
    %25 = llvm.select %24, %7, %4 : i1, i32 loc(#loc4)
    %26 = llvm.xor %22, %25 : i32 loc(#loc4)
    %27 = llvm.and %14, %3 : i32 loc(#loc4)
    %28 = llvm.icmp "eq" %27, %7 : i32 loc(#loc4)
    %29 = llvm.select %28, %7, %3 : i1, i32 loc(#loc4)
    %30 = llvm.xor %26, %29 : i32 loc(#loc4)
    %31 = llvm.and %14, %2 : i32 loc(#loc4)
    %32 = llvm.icmp "eq" %31, %7 : i32 loc(#loc4)
    %33 = llvm.select %32, %7, %2 : i1, i32 loc(#loc4)
    %34 = llvm.xor %30, %33 : i32 loc(#loc4)
    %35 = llvm.xor %34, %7 : i32 loc(#loc4)
    %36 = llvm.add %35, %8 : i32 loc(#loc4)
    %37 = llvm.add %12, %36 : i32 loc(#loc5)
    %38 = llvm.icmp "slt" %37, %arg3 : i32 loc(#loc6)
    %39 = llvm.getelementptr %arg0[%37] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, f32 loc(#loc7)
    %40 = llvm.inline_asm has_side_effects asm_dialect = att operand_attrs = [] "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b" %39, %38 : (!llvm.ptr<1>, i1) -> i32 loc(#loc8)
    %41 = llvm.bitcast %40 : i32 to vector<1xf32> loc(#loc8)
    %42 = llvm.extractelement %41[%8 : i32] : vector<1xf32> loc(#loc8)
    %43 = llvm.getelementptr %arg1[%37] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, f32 loc(#loc9)
    %44 = llvm.inline_asm has_side_effects asm_dialect = att operand_attrs = [] "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b" %43, %38 : (!llvm.ptr<1>, i1) -> i32 loc(#loc10)
    %45 = llvm.bitcast %44 : i32 to vector<1xf32> loc(#loc10)
    %46 = llvm.extractelement %45[%8 : i32] : vector<1xf32> loc(#loc10)
    %47 = llvm.fmul %42, %46 : f32 loc(#loc11)
    %48 = llvm.bitcast %47 : f32 to i32 loc(#loc17)
    %49 = nvvm.shfl.sync  bfly %0, %48, %2, %1 : i32 -> i32 loc(#loc17)
    %50 = llvm.bitcast %49 : i32 to f32 loc(#loc17)
    %51 = llvm.fadd %47, %50 : f32 loc(#loc19)
    %52 = llvm.bitcast %51 : f32 to i32 loc(#loc17)
    %53 = nvvm.shfl.sync  bfly %0, %52, %3, %1 : i32 -> i32 loc(#loc17)
    %54 = llvm.bitcast %53 : i32 to f32 loc(#loc17)
    %55 = llvm.fadd %51, %54 : f32 loc(#loc19)
    %56 = llvm.bitcast %55 : f32 to i32 loc(#loc17)
    %57 = nvvm.shfl.sync  bfly %0, %56, %4, %1 : i32 -> i32 loc(#loc17)
    %58 = llvm.bitcast %57 : i32 to f32 loc(#loc17)
    %59 = llvm.fadd %55, %58 : f32 loc(#loc19)
    %60 = llvm.bitcast %59 : f32 to i32 loc(#loc17)
    %61 = nvvm.shfl.sync  bfly %0, %60, %5, %1 : i32 -> i32 loc(#loc17)
    %62 = llvm.bitcast %61 : i32 to f32 loc(#loc17)
    %63 = llvm.fadd %59, %62 : f32 loc(#loc19)
    %64 = llvm.bitcast %63 : f32 to i32 loc(#loc17)
    %65 = nvvm.shfl.sync  bfly %0, %64, %6, %1 : i32 -> i32 loc(#loc17)
    %66 = llvm.bitcast %65 : i32 to f32 loc(#loc17)
    %67 = llvm.fadd %63, %66 : f32 loc(#loc19)
    %68 = nvvm.read.ptx.sreg.tid.x : i32 loc(#loc15)
    %69 = llvm.urem %68, %10 : i32 loc(#loc15)
    %70 = llvm.udiv %68, %10 : i32 loc(#loc15)
    %71 = llvm.and %69, %0 : i32 loc(#loc15)
    %72 = llvm.icmp "eq" %71, %7 : i32 loc(#loc15)
    %73 = llvm.and %70, %0 : i32 loc(#loc15)
    %74 = llvm.icmp "eq" %73, %7 : i32 loc(#loc15)
    %75 = llvm.and %72, %74 : i1 loc(#loc15)
    %76 = llvm.and %7, %0 : i32 loc(#loc15)
    %77 = llvm.icmp "eq" %76, %7 : i32 loc(#loc15)
    %78 = llvm.and %75, %77 : i1 loc(#loc15)
    %79 = llvm.and %78, %9 : i1 loc(#loc15)
    %80 = llvm.inline_asm has_side_effects asm_dialect = att operand_attrs = [] "mov.u32 $0, 0x0;\0A\09@$3 atom.global.gpu.acq_rel.add.f32 $0, [ $1 + 0 ], $2;", "=r,l,r,b" %arg2, %67, %79 : (!llvm.ptr<1>, f32, i1) -> f32 loc(#loc15)
    llvm.return loc(#loc16)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/home/meiziyuan/triton/test_vdot.py":19:24)
#loc3 = loc("/home/meiziyuan/triton/test_vdot.py":20:19)
#loc4 = loc("/home/meiziyuan/triton/test_vdot.py":20:45)
#loc5 = loc("/home/meiziyuan/triton/test_vdot.py":20:32)
#loc6 = loc("/home/meiziyuan/triton/test_vdot.py":21:20)
#loc7 = loc("/home/meiziyuan/triton/test_vdot.py":23:28)
#loc8 = loc("/home/meiziyuan/triton/test_vdot.py":23:18)
#loc9 = loc("/home/meiziyuan/triton/test_vdot.py":24:32)
#loc10 = loc("/home/meiziyuan/triton/test_vdot.py":24:20)
#loc11 = loc("/home/meiziyuan/triton/test_vdot.py":26:23)
#loc12 = loc("/root/miniconda3/envs/vllm/lib/python3.12/site-packages/triton/language/standard.py":286:36)
#loc13 = loc("/home/meiziyuan/triton/test_vdot.py":26:17)
#loc14 = loc("/root/miniconda3/envs/vllm/lib/python3.12/site-packages/triton/language/standard.py":256:15)
#loc15 = loc("/home/meiziyuan/triton/test_vdot.py":27:27)
#loc16 = loc("/home/meiziyuan/triton/test_vdot.py":27:4)
#loc17 = loc(callsite(#loc12 at #loc13))
#loc18 = loc(callsite(#loc14 at #loc12))
#loc19 = loc(callsite(#loc18 at #loc13))


// -----// IR Dump Before ConvertNVGPUToLLVM (convert-nv-gpu-to-llvm) ('builtin.module' operation) //----- //
#loc = loc("/home/meiziyuan/triton/test_vdot.py":10:0)
module attributes {ttg.global_scratch_memory_alignment = 1 : i32, ttg.global_scratch_memory_size = 0 : i32, "ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.shared = 0 : i32, ttg.target = "cuda:90", ttg.tensor_memory_size = 0 : i32, "ttg.threads-per-warp" = 32 : i32, "ttg.total-num-warps" = 4 : i32} {
  llvm.mlir.global external @global_smem() {addr_space = 3 : i32, alignment = 16 : i64} : !llvm.array<0 x i8> loc(#loc)
  llvm.func @dot_kernel(%arg0: !llvm.ptr<1> {tt.divisibility = 16 : i32} loc("/home/meiziyuan/triton/test_vdot.py":10:0), %arg1: !llvm.ptr<1> {tt.divisibility = 16 : i32} loc("/home/meiziyuan/triton/test_vdot.py":10:0), %arg2: !llvm.ptr<1> {tt.divisibility = 16 : i32} loc("/home/meiziyuan/triton/test_vdot.py":10:0), %arg3: i32 loc("/home/meiziyuan/triton/test_vdot.py":10:0), %arg4: !llvm.ptr<1> loc("/home/meiziyuan/triton/test_vdot.py":10:0)) attributes {noinline = false, nvvm.kernel = 1 : ui1, nvvm.reqntid = array<i32: 128>, ttg.global_scratch_memory_alignment = 1 : i32, ttg.global_scratch_memory_size = 0 : i32} {
    %0 = llvm.mlir.constant(-1 : i32) : i32 loc(#loc1)
    %1 = llvm.mlir.constant(31 : i32) : i32 loc(#loc1)
    %2 = llvm.mlir.constant(16 : i32) : i32 loc(#loc1)
    %3 = llvm.mlir.constant(8 : i32) : i32 loc(#loc1)
    %4 = llvm.mlir.constant(4 : i32) : i32 loc(#loc1)
    %5 = llvm.mlir.constant(2 : i32) : i32 loc(#loc1)
    %6 = llvm.mlir.constant(1 : i32) : i32 loc(#loc1)
    %7 = llvm.mlir.constant(0 : i32) : i32 loc(#loc1)
    %8 = llvm.mlir.constant(0 : index) : i32 loc(#loc1)
    %9 = llvm.mlir.constant(true) : i1 loc(#loc1)
    %10 = llvm.mlir.constant(32 : i32) : i32 loc(#loc1)
    %11 = llvm.call_intrinsic "llvm.nvvm.read.ptx.sreg.ctaid.x"() : () -> i32 loc(#loc2)
    %12 = llvm.mul %11, %10 : i32 loc(#loc3)
    %13 = nvvm.read.ptx.sreg.tid.x : i32 loc(#loc4)
    %14 = llvm.urem %13, %10 : i32 loc(#loc4)
    %15 = llvm.and %14, %6 : i32 loc(#loc4)
    %16 = llvm.icmp "eq" %15, %7 : i32 loc(#loc4)
    %17 = llvm.select %16, %7, %6 : i1, i32 loc(#loc4)
    %18 = llvm.xor %7, %17 : i32 loc(#loc4)
    %19 = llvm.and %14, %5 : i32 loc(#loc4)
    %20 = llvm.icmp "eq" %19, %7 : i32 loc(#loc4)
    %21 = llvm.select %20, %7, %5 : i1, i32 loc(#loc4)
    %22 = llvm.xor %18, %21 : i32 loc(#loc4)
    %23 = llvm.and %14, %4 : i32 loc(#loc4)
    %24 = llvm.icmp "eq" %23, %7 : i32 loc(#loc4)
    %25 = llvm.select %24, %7, %4 : i1, i32 loc(#loc4)
    %26 = llvm.xor %22, %25 : i32 loc(#loc4)
    %27 = llvm.and %14, %3 : i32 loc(#loc4)
    %28 = llvm.icmp "eq" %27, %7 : i32 loc(#loc4)
    %29 = llvm.select %28, %7, %3 : i1, i32 loc(#loc4)
    %30 = llvm.xor %26, %29 : i32 loc(#loc4)
    %31 = llvm.and %14, %2 : i32 loc(#loc4)
    %32 = llvm.icmp "eq" %31, %7 : i32 loc(#loc4)
    %33 = llvm.select %32, %7, %2 : i1, i32 loc(#loc4)
    %34 = llvm.xor %30, %33 : i32 loc(#loc4)
    %35 = llvm.xor %34, %7 : i32 loc(#loc4)
    %36 = llvm.add %35, %8 : i32 loc(#loc4)
    %37 = llvm.add %12, %36 : i32 loc(#loc5)
    %38 = llvm.icmp "slt" %37, %arg3 : i32 loc(#loc6)
    %39 = llvm.getelementptr %arg0[%37] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, f32 loc(#loc7)
    %40 = llvm.inline_asm has_side_effects asm_dialect = att operand_attrs = [] "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b" %39, %38 : (!llvm.ptr<1>, i1) -> i32 loc(#loc8)
    %41 = llvm.bitcast %40 : i32 to vector<1xf32> loc(#loc8)
    %42 = llvm.extractelement %41[%8 : i32] : vector<1xf32> loc(#loc8)
    %43 = llvm.getelementptr %arg1[%37] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, f32 loc(#loc9)
    %44 = llvm.inline_asm has_side_effects asm_dialect = att operand_attrs = [] "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b" %43, %38 : (!llvm.ptr<1>, i1) -> i32 loc(#loc10)
    %45 = llvm.bitcast %44 : i32 to vector<1xf32> loc(#loc10)
    %46 = llvm.extractelement %45[%8 : i32] : vector<1xf32> loc(#loc10)
    %47 = llvm.fmul %42, %46 : f32 loc(#loc11)
    %48 = llvm.bitcast %47 : f32 to i32 loc(#loc17)
    %49 = nvvm.shfl.sync  bfly %0, %48, %2, %1 : i32 -> i32 loc(#loc17)
    %50 = llvm.bitcast %49 : i32 to f32 loc(#loc17)
    %51 = llvm.fadd %47, %50 : f32 loc(#loc19)
    %52 = llvm.bitcast %51 : f32 to i32 loc(#loc17)
    %53 = nvvm.shfl.sync  bfly %0, %52, %3, %1 : i32 -> i32 loc(#loc17)
    %54 = llvm.bitcast %53 : i32 to f32 loc(#loc17)
    %55 = llvm.fadd %51, %54 : f32 loc(#loc19)
    %56 = llvm.bitcast %55 : f32 to i32 loc(#loc17)
    %57 = nvvm.shfl.sync  bfly %0, %56, %4, %1 : i32 -> i32 loc(#loc17)
    %58 = llvm.bitcast %57 : i32 to f32 loc(#loc17)
    %59 = llvm.fadd %55, %58 : f32 loc(#loc19)
    %60 = llvm.bitcast %59 : f32 to i32 loc(#loc17)
    %61 = nvvm.shfl.sync  bfly %0, %60, %5, %1 : i32 -> i32 loc(#loc17)
    %62 = llvm.bitcast %61 : i32 to f32 loc(#loc17)
    %63 = llvm.fadd %59, %62 : f32 loc(#loc19)
    %64 = llvm.bitcast %63 : f32 to i32 loc(#loc17)
    %65 = nvvm.shfl.sync  bfly %0, %64, %6, %1 : i32 -> i32 loc(#loc17)
    %66 = llvm.bitcast %65 : i32 to f32 loc(#loc17)
    %67 = llvm.fadd %63, %66 : f32 loc(#loc19)
    %68 = llvm.udiv %13, %10 : i32 loc(#loc15)
    %69 = llvm.and %14, %0 : i32 loc(#loc15)
    %70 = llvm.icmp "eq" %69, %7 : i32 loc(#loc15)
    %71 = llvm.and %68, %0 : i32 loc(#loc15)
    %72 = llvm.icmp "eq" %71, %7 : i32 loc(#loc15)
    %73 = llvm.and %70, %72 : i1 loc(#loc15)
    %74 = llvm.and %7, %0 : i32 loc(#loc15)
    %75 = llvm.icmp "eq" %74, %7 : i32 loc(#loc15)
    %76 = llvm.and %73, %75 : i1 loc(#loc15)
    %77 = llvm.and %76, %9 : i1 loc(#loc15)
    %78 = llvm.inline_asm has_side_effects asm_dialect = att operand_attrs = [] "mov.u32 $0, 0x0;\0A\09@$3 atom.global.gpu.acq_rel.add.f32 $0, [ $1 + 0 ], $2;", "=r,l,r,b" %arg2, %67, %77 : (!llvm.ptr<1>, f32, i1) -> f32 loc(#loc15)
    llvm.return loc(#loc16)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/home/meiziyuan/triton/test_vdot.py":19:24)
#loc3 = loc("/home/meiziyuan/triton/test_vdot.py":20:19)
#loc4 = loc("/home/meiziyuan/triton/test_vdot.py":20:45)
#loc5 = loc("/home/meiziyuan/triton/test_vdot.py":20:32)
#loc6 = loc("/home/meiziyuan/triton/test_vdot.py":21:20)
#loc7 = loc("/home/meiziyuan/triton/test_vdot.py":23:28)
#loc8 = loc("/home/meiziyuan/triton/test_vdot.py":23:18)
#loc9 = loc("/home/meiziyuan/triton/test_vdot.py":24:32)
#loc10 = loc("/home/meiziyuan/triton/test_vdot.py":24:20)
#loc11 = loc("/home/meiziyuan/triton/test_vdot.py":26:23)
#loc12 = loc("/root/miniconda3/envs/vllm/lib/python3.12/site-packages/triton/language/standard.py":286:36)
#loc13 = loc("/home/meiziyuan/triton/test_vdot.py":26:17)
#loc14 = loc("/root/miniconda3/envs/vllm/lib/python3.12/site-packages/triton/language/standard.py":256:15)
#loc15 = loc("/home/meiziyuan/triton/test_vdot.py":27:27)
#loc16 = loc("/home/meiziyuan/triton/test_vdot.py":27:4)
#loc17 = loc(callsite(#loc12 at #loc13))
#loc18 = loc(callsite(#loc14 at #loc12))
#loc19 = loc(callsite(#loc18 at #loc13))


// -----// IR Dump Before ConvertWarpSpecializeToLLVM (convert-warp-specialize-to-llvm) ('builtin.module' operation) //----- //
#loc = loc("/home/meiziyuan/triton/test_vdot.py":10:0)
module attributes {ttg.global_scratch_memory_alignment = 1 : i32, ttg.global_scratch_memory_size = 0 : i32, "ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.shared = 0 : i32, ttg.target = "cuda:90", ttg.tensor_memory_size = 0 : i32, "ttg.threads-per-warp" = 32 : i32, "ttg.total-num-warps" = 4 : i32} {
  llvm.mlir.global external @global_smem() {addr_space = 3 : i32, alignment = 16 : i64} : !llvm.array<0 x i8> loc(#loc)
  llvm.func @dot_kernel(%arg0: !llvm.ptr<1> {tt.divisibility = 16 : i32} loc("/home/meiziyuan/triton/test_vdot.py":10:0), %arg1: !llvm.ptr<1> {tt.divisibility = 16 : i32} loc("/home/meiziyuan/triton/test_vdot.py":10:0), %arg2: !llvm.ptr<1> {tt.divisibility = 16 : i32} loc("/home/meiziyuan/triton/test_vdot.py":10:0), %arg3: i32 loc("/home/meiziyuan/triton/test_vdot.py":10:0), %arg4: !llvm.ptr<1> loc("/home/meiziyuan/triton/test_vdot.py":10:0)) attributes {noinline = false, nvvm.kernel = 1 : ui1, nvvm.reqntid = array<i32: 128>, ttg.global_scratch_memory_alignment = 1 : i32, ttg.global_scratch_memory_size = 0 : i32} {
    %0 = llvm.mlir.constant(-1 : i32) : i32 loc(#loc1)
    %1 = llvm.mlir.constant(31 : i32) : i32 loc(#loc1)
    %2 = llvm.mlir.constant(16 : i32) : i32 loc(#loc1)
    %3 = llvm.mlir.constant(8 : i32) : i32 loc(#loc1)
    %4 = llvm.mlir.constant(4 : i32) : i32 loc(#loc1)
    %5 = llvm.mlir.constant(2 : i32) : i32 loc(#loc1)
    %6 = llvm.mlir.constant(1 : i32) : i32 loc(#loc1)
    %7 = llvm.mlir.constant(0 : i32) : i32 loc(#loc1)
    %8 = llvm.mlir.constant(0 : index) : i32 loc(#loc1)
    %9 = llvm.mlir.constant(true) : i1 loc(#loc1)
    %10 = llvm.mlir.constant(32 : i32) : i32 loc(#loc1)
    %11 = llvm.call_intrinsic "llvm.nvvm.read.ptx.sreg.ctaid.x"() : () -> i32 loc(#loc2)
    %12 = llvm.mul %11, %10 : i32 loc(#loc3)
    %13 = nvvm.read.ptx.sreg.tid.x : i32 loc(#loc4)
    %14 = llvm.urem %13, %10 : i32 loc(#loc4)
    %15 = llvm.and %14, %6 : i32 loc(#loc4)
    %16 = llvm.icmp "eq" %15, %7 : i32 loc(#loc4)
    %17 = llvm.select %16, %7, %6 : i1, i32 loc(#loc4)
    %18 = llvm.xor %7, %17 : i32 loc(#loc4)
    %19 = llvm.and %14, %5 : i32 loc(#loc4)
    %20 = llvm.icmp "eq" %19, %7 : i32 loc(#loc4)
    %21 = llvm.select %20, %7, %5 : i1, i32 loc(#loc4)
    %22 = llvm.xor %18, %21 : i32 loc(#loc4)
    %23 = llvm.and %14, %4 : i32 loc(#loc4)
    %24 = llvm.icmp "eq" %23, %7 : i32 loc(#loc4)
    %25 = llvm.select %24, %7, %4 : i1, i32 loc(#loc4)
    %26 = llvm.xor %22, %25 : i32 loc(#loc4)
    %27 = llvm.and %14, %3 : i32 loc(#loc4)
    %28 = llvm.icmp "eq" %27, %7 : i32 loc(#loc4)
    %29 = llvm.select %28, %7, %3 : i1, i32 loc(#loc4)
    %30 = llvm.xor %26, %29 : i32 loc(#loc4)
    %31 = llvm.and %14, %2 : i32 loc(#loc4)
    %32 = llvm.icmp "eq" %31, %7 : i32 loc(#loc4)
    %33 = llvm.select %32, %7, %2 : i1, i32 loc(#loc4)
    %34 = llvm.xor %30, %33 : i32 loc(#loc4)
    %35 = llvm.xor %34, %7 : i32 loc(#loc4)
    %36 = llvm.add %35, %8 : i32 loc(#loc4)
    %37 = llvm.add %12, %36 : i32 loc(#loc5)
    %38 = llvm.icmp "slt" %37, %arg3 : i32 loc(#loc6)
    %39 = llvm.getelementptr %arg0[%37] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, f32 loc(#loc7)
    %40 = llvm.inline_asm has_side_effects asm_dialect = att operand_attrs = [] "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b" %39, %38 : (!llvm.ptr<1>, i1) -> i32 loc(#loc8)
    %41 = llvm.bitcast %40 : i32 to vector<1xf32> loc(#loc8)
    %42 = llvm.extractelement %41[%8 : i32] : vector<1xf32> loc(#loc8)
    %43 = llvm.getelementptr %arg1[%37] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, f32 loc(#loc9)
    %44 = llvm.inline_asm has_side_effects asm_dialect = att operand_attrs = [] "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b" %43, %38 : (!llvm.ptr<1>, i1) -> i32 loc(#loc10)
    %45 = llvm.bitcast %44 : i32 to vector<1xf32> loc(#loc10)
    %46 = llvm.extractelement %45[%8 : i32] : vector<1xf32> loc(#loc10)
    %47 = llvm.fmul %42, %46 : f32 loc(#loc11)
    %48 = llvm.bitcast %47 : f32 to i32 loc(#loc17)
    %49 = nvvm.shfl.sync  bfly %0, %48, %2, %1 : i32 -> i32 loc(#loc17)
    %50 = llvm.bitcast %49 : i32 to f32 loc(#loc17)
    %51 = llvm.fadd %47, %50 : f32 loc(#loc19)
    %52 = llvm.bitcast %51 : f32 to i32 loc(#loc17)
    %53 = nvvm.shfl.sync  bfly %0, %52, %3, %1 : i32 -> i32 loc(#loc17)
    %54 = llvm.bitcast %53 : i32 to f32 loc(#loc17)
    %55 = llvm.fadd %51, %54 : f32 loc(#loc19)
    %56 = llvm.bitcast %55 : f32 to i32 loc(#loc17)
    %57 = nvvm.shfl.sync  bfly %0, %56, %4, %1 : i32 -> i32 loc(#loc17)
    %58 = llvm.bitcast %57 : i32 to f32 loc(#loc17)
    %59 = llvm.fadd %55, %58 : f32 loc(#loc19)
    %60 = llvm.bitcast %59 : f32 to i32 loc(#loc17)
    %61 = nvvm.shfl.sync  bfly %0, %60, %5, %1 : i32 -> i32 loc(#loc17)
    %62 = llvm.bitcast %61 : i32 to f32 loc(#loc17)
    %63 = llvm.fadd %59, %62 : f32 loc(#loc19)
    %64 = llvm.bitcast %63 : f32 to i32 loc(#loc17)
    %65 = nvvm.shfl.sync  bfly %0, %64, %6, %1 : i32 -> i32 loc(#loc17)
    %66 = llvm.bitcast %65 : i32 to f32 loc(#loc17)
    %67 = llvm.fadd %63, %66 : f32 loc(#loc19)
    %68 = llvm.udiv %13, %10 : i32 loc(#loc15)
    %69 = llvm.and %14, %0 : i32 loc(#loc15)
    %70 = llvm.icmp "eq" %69, %7 : i32 loc(#loc15)
    %71 = llvm.and %68, %0 : i32 loc(#loc15)
    %72 = llvm.icmp "eq" %71, %7 : i32 loc(#loc15)
    %73 = llvm.and %70, %72 : i1 loc(#loc15)
    %74 = llvm.and %7, %0 : i32 loc(#loc15)
    %75 = llvm.icmp "eq" %74, %7 : i32 loc(#loc15)
    %76 = llvm.and %73, %75 : i1 loc(#loc15)
    %77 = llvm.and %76, %9 : i1 loc(#loc15)
    %78 = llvm.inline_asm has_side_effects asm_dialect = att operand_attrs = [] "mov.u32 $0, 0x0;\0A\09@$3 atom.global.gpu.acq_rel.add.f32 $0, [ $1 + 0 ], $2;", "=r,l,r,b" %arg2, %67, %77 : (!llvm.ptr<1>, f32, i1) -> f32 loc(#loc15)
    llvm.return loc(#loc16)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/home/meiziyuan/triton/test_vdot.py":19:24)
#loc3 = loc("/home/meiziyuan/triton/test_vdot.py":20:19)
#loc4 = loc("/home/meiziyuan/triton/test_vdot.py":20:45)
#loc5 = loc("/home/meiziyuan/triton/test_vdot.py":20:32)
#loc6 = loc("/home/meiziyuan/triton/test_vdot.py":21:20)
#loc7 = loc("/home/meiziyuan/triton/test_vdot.py":23:28)
#loc8 = loc("/home/meiziyuan/triton/test_vdot.py":23:18)
#loc9 = loc("/home/meiziyuan/triton/test_vdot.py":24:32)
#loc10 = loc("/home/meiziyuan/triton/test_vdot.py":24:20)
#loc11 = loc("/home/meiziyuan/triton/test_vdot.py":26:23)
#loc12 = loc("/root/miniconda3/envs/vllm/lib/python3.12/site-packages/triton/language/standard.py":286:36)
#loc13 = loc("/home/meiziyuan/triton/test_vdot.py":26:17)
#loc14 = loc("/root/miniconda3/envs/vllm/lib/python3.12/site-packages/triton/language/standard.py":256:15)
#loc15 = loc("/home/meiziyuan/triton/test_vdot.py":27:27)
#loc16 = loc("/home/meiziyuan/triton/test_vdot.py":27:4)
#loc17 = loc(callsite(#loc12 at #loc13))
#loc18 = loc(callsite(#loc14 at #loc12))
#loc19 = loc(callsite(#loc18 at #loc13))


// -----// IR Dump Before Canonicalizer (canonicalize) ('builtin.module' operation) //----- //
#loc = loc("/home/meiziyuan/triton/test_vdot.py":10:0)
module attributes {ttg.global_scratch_memory_alignment = 1 : i32, ttg.global_scratch_memory_size = 0 : i32, "ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.shared = 0 : i32, ttg.target = "cuda:90", ttg.tensor_memory_size = 0 : i32, "ttg.threads-per-warp" = 32 : i32, "ttg.total-num-warps" = 4 : i32} {
  llvm.mlir.global external @global_smem() {addr_space = 3 : i32, alignment = 16 : i64} : !llvm.array<0 x i8> loc(#loc)
  llvm.func @dot_kernel(%arg0: !llvm.ptr<1> {tt.divisibility = 16 : i32} loc("/home/meiziyuan/triton/test_vdot.py":10:0), %arg1: !llvm.ptr<1> {tt.divisibility = 16 : i32} loc("/home/meiziyuan/triton/test_vdot.py":10:0), %arg2: !llvm.ptr<1> {tt.divisibility = 16 : i32} loc("/home/meiziyuan/triton/test_vdot.py":10:0), %arg3: i32 loc("/home/meiziyuan/triton/test_vdot.py":10:0), %arg4: !llvm.ptr<1> loc("/home/meiziyuan/triton/test_vdot.py":10:0)) attributes {noinline = false, nvvm.kernel = 1 : ui1, nvvm.reqntid = array<i32: 128>, ttg.global_scratch_memory_alignment = 1 : i32, ttg.global_scratch_memory_size = 0 : i32} {
    %0 = llvm.mlir.constant(-1 : i32) : i32 loc(#loc1)
    %1 = llvm.mlir.constant(31 : i32) : i32 loc(#loc1)
    %2 = llvm.mlir.constant(16 : i32) : i32 loc(#loc1)
    %3 = llvm.mlir.constant(8 : i32) : i32 loc(#loc1)
    %4 = llvm.mlir.constant(4 : i32) : i32 loc(#loc1)
    %5 = llvm.mlir.constant(2 : i32) : i32 loc(#loc1)
    %6 = llvm.mlir.constant(1 : i32) : i32 loc(#loc1)
    %7 = llvm.mlir.constant(0 : i32) : i32 loc(#loc1)
    %8 = llvm.mlir.constant(0 : index) : i32 loc(#loc1)
    %9 = llvm.mlir.constant(true) : i1 loc(#loc1)
    %10 = llvm.mlir.constant(32 : i32) : i32 loc(#loc1)
    %11 = llvm.call_intrinsic "llvm.nvvm.read.ptx.sreg.ctaid.x"() : () -> i32 loc(#loc2)
    %12 = llvm.mul %11, %10 : i32 loc(#loc3)
    %13 = nvvm.read.ptx.sreg.tid.x : i32 loc(#loc4)
    %14 = llvm.urem %13, %10 : i32 loc(#loc4)
    %15 = llvm.and %14, %6 : i32 loc(#loc4)
    %16 = llvm.icmp "eq" %15, %7 : i32 loc(#loc4)
    %17 = llvm.select %16, %7, %6 : i1, i32 loc(#loc4)
    %18 = llvm.xor %7, %17 : i32 loc(#loc4)
    %19 = llvm.and %14, %5 : i32 loc(#loc4)
    %20 = llvm.icmp "eq" %19, %7 : i32 loc(#loc4)
    %21 = llvm.select %20, %7, %5 : i1, i32 loc(#loc4)
    %22 = llvm.xor %18, %21 : i32 loc(#loc4)
    %23 = llvm.and %14, %4 : i32 loc(#loc4)
    %24 = llvm.icmp "eq" %23, %7 : i32 loc(#loc4)
    %25 = llvm.select %24, %7, %4 : i1, i32 loc(#loc4)
    %26 = llvm.xor %22, %25 : i32 loc(#loc4)
    %27 = llvm.and %14, %3 : i32 loc(#loc4)
    %28 = llvm.icmp "eq" %27, %7 : i32 loc(#loc4)
    %29 = llvm.select %28, %7, %3 : i1, i32 loc(#loc4)
    %30 = llvm.xor %26, %29 : i32 loc(#loc4)
    %31 = llvm.and %14, %2 : i32 loc(#loc4)
    %32 = llvm.icmp "eq" %31, %7 : i32 loc(#loc4)
    %33 = llvm.select %32, %7, %2 : i1, i32 loc(#loc4)
    %34 = llvm.xor %30, %33 : i32 loc(#loc4)
    %35 = llvm.xor %34, %7 : i32 loc(#loc4)
    %36 = llvm.add %35, %8 : i32 loc(#loc4)
    %37 = llvm.add %12, %36 : i32 loc(#loc5)
    %38 = llvm.icmp "slt" %37, %arg3 : i32 loc(#loc6)
    %39 = llvm.getelementptr %arg0[%37] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, f32 loc(#loc7)
    %40 = llvm.inline_asm has_side_effects asm_dialect = att operand_attrs = [] "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b" %39, %38 : (!llvm.ptr<1>, i1) -> i32 loc(#loc8)
    %41 = llvm.bitcast %40 : i32 to vector<1xf32> loc(#loc8)
    %42 = llvm.extractelement %41[%8 : i32] : vector<1xf32> loc(#loc8)
    %43 = llvm.getelementptr %arg1[%37] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, f32 loc(#loc9)
    %44 = llvm.inline_asm has_side_effects asm_dialect = att operand_attrs = [] "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b" %43, %38 : (!llvm.ptr<1>, i1) -> i32 loc(#loc10)
    %45 = llvm.bitcast %44 : i32 to vector<1xf32> loc(#loc10)
    %46 = llvm.extractelement %45[%8 : i32] : vector<1xf32> loc(#loc10)
    %47 = llvm.fmul %42, %46 : f32 loc(#loc11)
    %48 = llvm.bitcast %47 : f32 to i32 loc(#loc17)
    %49 = nvvm.shfl.sync  bfly %0, %48, %2, %1 : i32 -> i32 loc(#loc17)
    %50 = llvm.bitcast %49 : i32 to f32 loc(#loc17)
    %51 = llvm.fadd %47, %50 : f32 loc(#loc19)
    %52 = llvm.bitcast %51 : f32 to i32 loc(#loc17)
    %53 = nvvm.shfl.sync  bfly %0, %52, %3, %1 : i32 -> i32 loc(#loc17)
    %54 = llvm.bitcast %53 : i32 to f32 loc(#loc17)
    %55 = llvm.fadd %51, %54 : f32 loc(#loc19)
    %56 = llvm.bitcast %55 : f32 to i32 loc(#loc17)
    %57 = nvvm.shfl.sync  bfly %0, %56, %4, %1 : i32 -> i32 loc(#loc17)
    %58 = llvm.bitcast %57 : i32 to f32 loc(#loc17)
    %59 = llvm.fadd %55, %58 : f32 loc(#loc19)
    %60 = llvm.bitcast %59 : f32 to i32 loc(#loc17)
    %61 = nvvm.shfl.sync  bfly %0, %60, %5, %1 : i32 -> i32 loc(#loc17)
    %62 = llvm.bitcast %61 : i32 to f32 loc(#loc17)
    %63 = llvm.fadd %59, %62 : f32 loc(#loc19)
    %64 = llvm.bitcast %63 : f32 to i32 loc(#loc17)
    %65 = nvvm.shfl.sync  bfly %0, %64, %6, %1 : i32 -> i32 loc(#loc17)
    %66 = llvm.bitcast %65 : i32 to f32 loc(#loc17)
    %67 = llvm.fadd %63, %66 : f32 loc(#loc19)
    %68 = llvm.udiv %13, %10 : i32 loc(#loc15)
    %69 = llvm.and %14, %0 : i32 loc(#loc15)
    %70 = llvm.icmp "eq" %69, %7 : i32 loc(#loc15)
    %71 = llvm.and %68, %0 : i32 loc(#loc15)
    %72 = llvm.icmp "eq" %71, %7 : i32 loc(#loc15)
    %73 = llvm.and %70, %72 : i1 loc(#loc15)
    %74 = llvm.and %7, %0 : i32 loc(#loc15)
    %75 = llvm.icmp "eq" %74, %7 : i32 loc(#loc15)
    %76 = llvm.and %73, %75 : i1 loc(#loc15)
    %77 = llvm.and %76, %9 : i1 loc(#loc15)
    %78 = llvm.inline_asm has_side_effects asm_dialect = att operand_attrs = [] "mov.u32 $0, 0x0;\0A\09@$3 atom.global.gpu.acq_rel.add.f32 $0, [ $1 + 0 ], $2;", "=r,l,r,b" %arg2, %67, %77 : (!llvm.ptr<1>, f32, i1) -> f32 loc(#loc15)
    llvm.return loc(#loc16)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/home/meiziyuan/triton/test_vdot.py":19:24)
#loc3 = loc("/home/meiziyuan/triton/test_vdot.py":20:19)
#loc4 = loc("/home/meiziyuan/triton/test_vdot.py":20:45)
#loc5 = loc("/home/meiziyuan/triton/test_vdot.py":20:32)
#loc6 = loc("/home/meiziyuan/triton/test_vdot.py":21:20)
#loc7 = loc("/home/meiziyuan/triton/test_vdot.py":23:28)
#loc8 = loc("/home/meiziyuan/triton/test_vdot.py":23:18)
#loc9 = loc("/home/meiziyuan/triton/test_vdot.py":24:32)
#loc10 = loc("/home/meiziyuan/triton/test_vdot.py":24:20)
#loc11 = loc("/home/meiziyuan/triton/test_vdot.py":26:23)
#loc12 = loc("/root/miniconda3/envs/vllm/lib/python3.12/site-packages/triton/language/standard.py":286:36)
#loc13 = loc("/home/meiziyuan/triton/test_vdot.py":26:17)
#loc14 = loc("/root/miniconda3/envs/vllm/lib/python3.12/site-packages/triton/language/standard.py":256:15)
#loc15 = loc("/home/meiziyuan/triton/test_vdot.py":27:27)
#loc16 = loc("/home/meiziyuan/triton/test_vdot.py":27:4)
#loc17 = loc(callsite(#loc12 at #loc13))
#loc18 = loc(callsite(#loc14 at #loc12))
#loc19 = loc(callsite(#loc18 at #loc13))


// -----// IR Dump Before CSE (cse) ('builtin.module' operation) //----- //
#loc = loc("/home/meiziyuan/triton/test_vdot.py":10:0)
module attributes {ttg.global_scratch_memory_alignment = 1 : i32, ttg.global_scratch_memory_size = 0 : i32, "ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.shared = 0 : i32, ttg.target = "cuda:90", ttg.tensor_memory_size = 0 : i32, "ttg.threads-per-warp" = 32 : i32, "ttg.total-num-warps" = 4 : i32} {
  llvm.mlir.global external @global_smem() {addr_space = 3 : i32, alignment = 16 : i64} : !llvm.array<0 x i8> loc(#loc)
  llvm.func @dot_kernel(%arg0: !llvm.ptr<1> {tt.divisibility = 16 : i32} loc("/home/meiziyuan/triton/test_vdot.py":10:0), %arg1: !llvm.ptr<1> {tt.divisibility = 16 : i32} loc("/home/meiziyuan/triton/test_vdot.py":10:0), %arg2: !llvm.ptr<1> {tt.divisibility = 16 : i32} loc("/home/meiziyuan/triton/test_vdot.py":10:0), %arg3: i32 loc("/home/meiziyuan/triton/test_vdot.py":10:0), %arg4: !llvm.ptr<1> loc("/home/meiziyuan/triton/test_vdot.py":10:0)) attributes {noinline = false, nvvm.kernel = 1 : ui1, nvvm.reqntid = array<i32: 128>, ttg.global_scratch_memory_alignment = 1 : i32, ttg.global_scratch_memory_size = 0 : i32} {
    %0 = llvm.mlir.constant(-1 : i32) : i32 loc(#loc1)
    %1 = llvm.mlir.constant(31 : i32) : i32 loc(#loc1)
    %2 = llvm.mlir.constant(16 : i32) : i32 loc(#loc1)
    %3 = llvm.mlir.constant(8 : i32) : i32 loc(#loc1)
    %4 = llvm.mlir.constant(4 : i32) : i32 loc(#loc1)
    %5 = llvm.mlir.constant(2 : i32) : i32 loc(#loc1)
    %6 = llvm.mlir.constant(1 : i32) : i32 loc(#loc1)
    %7 = llvm.mlir.constant(0 : i32) : i32 loc(#loc1)
    %8 = llvm.mlir.constant(0 : index) : i32 loc(#loc1)
    %9 = llvm.mlir.constant(true) : i1 loc(#loc1)
    %10 = llvm.mlir.constant(32 : i32) : i32 loc(#loc1)
    %11 = llvm.call_intrinsic "llvm.nvvm.read.ptx.sreg.ctaid.x"() : () -> i32 loc(#loc2)
    %12 = llvm.mul %11, %10 : i32 loc(#loc3)
    %13 = nvvm.read.ptx.sreg.tid.x : i32 loc(#loc4)
    %14 = llvm.urem %13, %10 : i32 loc(#loc4)
    %15 = llvm.and %14, %6 : i32 loc(#loc4)
    %16 = llvm.icmp "eq" %15, %7 : i32 loc(#loc4)
    %17 = llvm.select %16, %7, %6 : i1, i32 loc(#loc4)
    %18 = llvm.xor %7, %17 : i32 loc(#loc4)
    %19 = llvm.and %14, %5 : i32 loc(#loc4)
    %20 = llvm.icmp "eq" %19, %7 : i32 loc(#loc4)
    %21 = llvm.select %20, %7, %5 : i1, i32 loc(#loc4)
    %22 = llvm.xor %18, %21 : i32 loc(#loc4)
    %23 = llvm.and %14, %4 : i32 loc(#loc4)
    %24 = llvm.icmp "eq" %23, %7 : i32 loc(#loc4)
    %25 = llvm.select %24, %7, %4 : i1, i32 loc(#loc4)
    %26 = llvm.xor %22, %25 : i32 loc(#loc4)
    %27 = llvm.and %14, %3 : i32 loc(#loc4)
    %28 = llvm.icmp "eq" %27, %7 : i32 loc(#loc4)
    %29 = llvm.select %28, %7, %3 : i1, i32 loc(#loc4)
    %30 = llvm.xor %26, %29 : i32 loc(#loc4)
    %31 = llvm.and %14, %2 : i32 loc(#loc4)
    %32 = llvm.icmp "eq" %31, %7 : i32 loc(#loc4)
    %33 = llvm.select %32, %7, %2 : i1, i32 loc(#loc4)
    %34 = llvm.xor %30, %33 : i32 loc(#loc4)
    %35 = llvm.xor %34, %7 : i32 loc(#loc4)
    %36 = llvm.add %35, %8 : i32 loc(#loc4)
    %37 = llvm.add %12, %36 : i32 loc(#loc5)
    %38 = llvm.icmp "slt" %37, %arg3 : i32 loc(#loc6)
    %39 = llvm.getelementptr %arg0[%37] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, f32 loc(#loc7)
    %40 = llvm.inline_asm has_side_effects asm_dialect = att operand_attrs = [] "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b" %39, %38 : (!llvm.ptr<1>, i1) -> i32 loc(#loc8)
    %41 = llvm.bitcast %40 : i32 to vector<1xf32> loc(#loc8)
    %42 = llvm.extractelement %41[%8 : i32] : vector<1xf32> loc(#loc8)
    %43 = llvm.getelementptr %arg1[%37] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, f32 loc(#loc9)
    %44 = llvm.inline_asm has_side_effects asm_dialect = att operand_attrs = [] "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b" %43, %38 : (!llvm.ptr<1>, i1) -> i32 loc(#loc10)
    %45 = llvm.bitcast %44 : i32 to vector<1xf32> loc(#loc10)
    %46 = llvm.extractelement %45[%8 : i32] : vector<1xf32> loc(#loc10)
    %47 = llvm.fmul %42, %46 : f32 loc(#loc11)
    %48 = llvm.bitcast %47 : f32 to i32 loc(#loc17)
    %49 = nvvm.shfl.sync  bfly %0, %48, %2, %1 : i32 -> i32 loc(#loc17)
    %50 = llvm.bitcast %49 : i32 to f32 loc(#loc17)
    %51 = llvm.fadd %47, %50 : f32 loc(#loc19)
    %52 = llvm.bitcast %51 : f32 to i32 loc(#loc17)
    %53 = nvvm.shfl.sync  bfly %0, %52, %3, %1 : i32 -> i32 loc(#loc17)
    %54 = llvm.bitcast %53 : i32 to f32 loc(#loc17)
    %55 = llvm.fadd %51, %54 : f32 loc(#loc19)
    %56 = llvm.bitcast %55 : f32 to i32 loc(#loc17)
    %57 = nvvm.shfl.sync  bfly %0, %56, %4, %1 : i32 -> i32 loc(#loc17)
    %58 = llvm.bitcast %57 : i32 to f32 loc(#loc17)
    %59 = llvm.fadd %55, %58 : f32 loc(#loc19)
    %60 = llvm.bitcast %59 : f32 to i32 loc(#loc17)
    %61 = nvvm.shfl.sync  bfly %0, %60, %5, %1 : i32 -> i32 loc(#loc17)
    %62 = llvm.bitcast %61 : i32 to f32 loc(#loc17)
    %63 = llvm.fadd %59, %62 : f32 loc(#loc19)
    %64 = llvm.bitcast %63 : f32 to i32 loc(#loc17)
    %65 = nvvm.shfl.sync  bfly %0, %64, %6, %1 : i32 -> i32 loc(#loc17)
    %66 = llvm.bitcast %65 : i32 to f32 loc(#loc17)
    %67 = llvm.fadd %63, %66 : f32 loc(#loc19)
    %68 = llvm.udiv %13, %10 : i32 loc(#loc15)
    %69 = llvm.and %14, %0 : i32 loc(#loc15)
    %70 = llvm.icmp "eq" %69, %7 : i32 loc(#loc15)
    %71 = llvm.and %68, %0 : i32 loc(#loc15)
    %72 = llvm.icmp "eq" %71, %7 : i32 loc(#loc15)
    %73 = llvm.and %70, %72 : i1 loc(#loc15)
    %74 = llvm.and %7, %0 : i32 loc(#loc15)
    %75 = llvm.icmp "eq" %74, %7 : i32 loc(#loc15)
    %76 = llvm.and %73, %75 : i1 loc(#loc15)
    %77 = llvm.and %76, %9 : i1 loc(#loc15)
    %78 = llvm.inline_asm has_side_effects asm_dialect = att operand_attrs = [] "mov.u32 $0, 0x0;\0A\09@$3 atom.global.gpu.acq_rel.add.f32 $0, [ $1 + 0 ], $2;", "=r,l,r,b" %arg2, %67, %77 : (!llvm.ptr<1>, f32, i1) -> f32 loc(#loc15)
    llvm.return loc(#loc16)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/home/meiziyuan/triton/test_vdot.py":19:24)
#loc3 = loc("/home/meiziyuan/triton/test_vdot.py":20:19)
#loc4 = loc("/home/meiziyuan/triton/test_vdot.py":20:45)
#loc5 = loc("/home/meiziyuan/triton/test_vdot.py":20:32)
#loc6 = loc("/home/meiziyuan/triton/test_vdot.py":21:20)
#loc7 = loc("/home/meiziyuan/triton/test_vdot.py":23:28)
#loc8 = loc("/home/meiziyuan/triton/test_vdot.py":23:18)
#loc9 = loc("/home/meiziyuan/triton/test_vdot.py":24:32)
#loc10 = loc("/home/meiziyuan/triton/test_vdot.py":24:20)
#loc11 = loc("/home/meiziyuan/triton/test_vdot.py":26:23)
#loc12 = loc("/root/miniconda3/envs/vllm/lib/python3.12/site-packages/triton/language/standard.py":286:36)
#loc13 = loc("/home/meiziyuan/triton/test_vdot.py":26:17)
#loc14 = loc("/root/miniconda3/envs/vllm/lib/python3.12/site-packages/triton/language/standard.py":256:15)
#loc15 = loc("/home/meiziyuan/triton/test_vdot.py":27:27)
#loc16 = loc("/home/meiziyuan/triton/test_vdot.py":27:4)
#loc17 = loc(callsite(#loc12 at #loc13))
#loc18 = loc(callsite(#loc14 at #loc12))
#loc19 = loc(callsite(#loc18 at #loc13))


// -----// IR Dump Before SymbolDCE (symbol-dce) ('builtin.module' operation) //----- //
#loc = loc("/home/meiziyuan/triton/test_vdot.py":10:0)
module attributes {ttg.global_scratch_memory_alignment = 1 : i32, ttg.global_scratch_memory_size = 0 : i32, "ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.shared = 0 : i32, ttg.target = "cuda:90", ttg.tensor_memory_size = 0 : i32, "ttg.threads-per-warp" = 32 : i32, "ttg.total-num-warps" = 4 : i32} {
  llvm.mlir.global external @global_smem() {addr_space = 3 : i32, alignment = 16 : i64} : !llvm.array<0 x i8> loc(#loc)
  llvm.func @dot_kernel(%arg0: !llvm.ptr<1> {tt.divisibility = 16 : i32} loc("/home/meiziyuan/triton/test_vdot.py":10:0), %arg1: !llvm.ptr<1> {tt.divisibility = 16 : i32} loc("/home/meiziyuan/triton/test_vdot.py":10:0), %arg2: !llvm.ptr<1> {tt.divisibility = 16 : i32} loc("/home/meiziyuan/triton/test_vdot.py":10:0), %arg3: i32 loc("/home/meiziyuan/triton/test_vdot.py":10:0), %arg4: !llvm.ptr<1> loc("/home/meiziyuan/triton/test_vdot.py":10:0)) attributes {noinline = false, nvvm.kernel = 1 : ui1, nvvm.reqntid = array<i32: 128>, ttg.global_scratch_memory_alignment = 1 : i32, ttg.global_scratch_memory_size = 0 : i32} {
    %0 = llvm.mlir.constant(-1 : i32) : i32 loc(#loc1)
    %1 = llvm.mlir.constant(31 : i32) : i32 loc(#loc1)
    %2 = llvm.mlir.constant(16 : i32) : i32 loc(#loc1)
    %3 = llvm.mlir.constant(8 : i32) : i32 loc(#loc1)
    %4 = llvm.mlir.constant(4 : i32) : i32 loc(#loc1)
    %5 = llvm.mlir.constant(2 : i32) : i32 loc(#loc1)
    %6 = llvm.mlir.constant(1 : i32) : i32 loc(#loc1)
    %7 = llvm.mlir.constant(0 : i32) : i32 loc(#loc1)
    %8 = llvm.mlir.constant(0 : index) : i32 loc(#loc1)
    %9 = llvm.mlir.constant(true) : i1 loc(#loc1)
    %10 = llvm.mlir.constant(32 : i32) : i32 loc(#loc1)
    %11 = llvm.call_intrinsic "llvm.nvvm.read.ptx.sreg.ctaid.x"() : () -> i32 loc(#loc2)
    %12 = llvm.mul %11, %10 : i32 loc(#loc3)
    %13 = nvvm.read.ptx.sreg.tid.x : i32 loc(#loc4)
    %14 = llvm.urem %13, %10 : i32 loc(#loc4)
    %15 = llvm.and %14, %6 : i32 loc(#loc4)
    %16 = llvm.icmp "eq" %15, %7 : i32 loc(#loc4)
    %17 = llvm.select %16, %7, %6 : i1, i32 loc(#loc4)
    %18 = llvm.xor %7, %17 : i32 loc(#loc4)
    %19 = llvm.and %14, %5 : i32 loc(#loc4)
    %20 = llvm.icmp "eq" %19, %7 : i32 loc(#loc4)
    %21 = llvm.select %20, %7, %5 : i1, i32 loc(#loc4)
    %22 = llvm.xor %18, %21 : i32 loc(#loc4)
    %23 = llvm.and %14, %4 : i32 loc(#loc4)
    %24 = llvm.icmp "eq" %23, %7 : i32 loc(#loc4)
    %25 = llvm.select %24, %7, %4 : i1, i32 loc(#loc4)
    %26 = llvm.xor %22, %25 : i32 loc(#loc4)
    %27 = llvm.and %14, %3 : i32 loc(#loc4)
    %28 = llvm.icmp "eq" %27, %7 : i32 loc(#loc4)
    %29 = llvm.select %28, %7, %3 : i1, i32 loc(#loc4)
    %30 = llvm.xor %26, %29 : i32 loc(#loc4)
    %31 = llvm.and %14, %2 : i32 loc(#loc4)
    %32 = llvm.icmp "eq" %31, %7 : i32 loc(#loc4)
    %33 = llvm.select %32, %7, %2 : i1, i32 loc(#loc4)
    %34 = llvm.xor %30, %33 : i32 loc(#loc4)
    %35 = llvm.xor %34, %7 : i32 loc(#loc4)
    %36 = llvm.add %35, %8 : i32 loc(#loc4)
    %37 = llvm.add %12, %36 : i32 loc(#loc5)
    %38 = llvm.icmp "slt" %37, %arg3 : i32 loc(#loc6)
    %39 = llvm.getelementptr %arg0[%37] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, f32 loc(#loc7)
    %40 = llvm.inline_asm has_side_effects asm_dialect = att operand_attrs = [] "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b" %39, %38 : (!llvm.ptr<1>, i1) -> i32 loc(#loc8)
    %41 = llvm.bitcast %40 : i32 to vector<1xf32> loc(#loc8)
    %42 = llvm.extractelement %41[%8 : i32] : vector<1xf32> loc(#loc8)
    %43 = llvm.getelementptr %arg1[%37] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, f32 loc(#loc9)
    %44 = llvm.inline_asm has_side_effects asm_dialect = att operand_attrs = [] "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b" %43, %38 : (!llvm.ptr<1>, i1) -> i32 loc(#loc10)
    %45 = llvm.bitcast %44 : i32 to vector<1xf32> loc(#loc10)
    %46 = llvm.extractelement %45[%8 : i32] : vector<1xf32> loc(#loc10)
    %47 = llvm.fmul %42, %46 : f32 loc(#loc11)
    %48 = llvm.bitcast %47 : f32 to i32 loc(#loc17)
    %49 = nvvm.shfl.sync  bfly %0, %48, %2, %1 : i32 -> i32 loc(#loc17)
    %50 = llvm.bitcast %49 : i32 to f32 loc(#loc17)
    %51 = llvm.fadd %47, %50 : f32 loc(#loc19)
    %52 = llvm.bitcast %51 : f32 to i32 loc(#loc17)
    %53 = nvvm.shfl.sync  bfly %0, %52, %3, %1 : i32 -> i32 loc(#loc17)
    %54 = llvm.bitcast %53 : i32 to f32 loc(#loc17)
    %55 = llvm.fadd %51, %54 : f32 loc(#loc19)
    %56 = llvm.bitcast %55 : f32 to i32 loc(#loc17)
    %57 = nvvm.shfl.sync  bfly %0, %56, %4, %1 : i32 -> i32 loc(#loc17)
    %58 = llvm.bitcast %57 : i32 to f32 loc(#loc17)
    %59 = llvm.fadd %55, %58 : f32 loc(#loc19)
    %60 = llvm.bitcast %59 : f32 to i32 loc(#loc17)
    %61 = nvvm.shfl.sync  bfly %0, %60, %5, %1 : i32 -> i32 loc(#loc17)
    %62 = llvm.bitcast %61 : i32 to f32 loc(#loc17)
    %63 = llvm.fadd %59, %62 : f32 loc(#loc19)
    %64 = llvm.bitcast %63 : f32 to i32 loc(#loc17)
    %65 = nvvm.shfl.sync  bfly %0, %64, %6, %1 : i32 -> i32 loc(#loc17)
    %66 = llvm.bitcast %65 : i32 to f32 loc(#loc17)
    %67 = llvm.fadd %63, %66 : f32 loc(#loc19)
    %68 = llvm.udiv %13, %10 : i32 loc(#loc15)
    %69 = llvm.and %14, %0 : i32 loc(#loc15)
    %70 = llvm.icmp "eq" %69, %7 : i32 loc(#loc15)
    %71 = llvm.and %68, %0 : i32 loc(#loc15)
    %72 = llvm.icmp "eq" %71, %7 : i32 loc(#loc15)
    %73 = llvm.and %70, %72 : i1 loc(#loc15)
    %74 = llvm.and %7, %0 : i32 loc(#loc15)
    %75 = llvm.icmp "eq" %74, %7 : i32 loc(#loc15)
    %76 = llvm.and %73, %75 : i1 loc(#loc15)
    %77 = llvm.and %76, %9 : i1 loc(#loc15)
    %78 = llvm.inline_asm has_side_effects asm_dialect = att operand_attrs = [] "mov.u32 $0, 0x0;\0A\09@$3 atom.global.gpu.acq_rel.add.f32 $0, [ $1 + 0 ], $2;", "=r,l,r,b" %arg2, %67, %77 : (!llvm.ptr<1>, f32, i1) -> f32 loc(#loc15)
    llvm.return loc(#loc16)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/home/meiziyuan/triton/test_vdot.py":19:24)
#loc3 = loc("/home/meiziyuan/triton/test_vdot.py":20:19)
#loc4 = loc("/home/meiziyuan/triton/test_vdot.py":20:45)
#loc5 = loc("/home/meiziyuan/triton/test_vdot.py":20:32)
#loc6 = loc("/home/meiziyuan/triton/test_vdot.py":21:20)
#loc7 = loc("/home/meiziyuan/triton/test_vdot.py":23:28)
#loc8 = loc("/home/meiziyuan/triton/test_vdot.py":23:18)
#loc9 = loc("/home/meiziyuan/triton/test_vdot.py":24:32)
#loc10 = loc("/home/meiziyuan/triton/test_vdot.py":24:20)
#loc11 = loc("/home/meiziyuan/triton/test_vdot.py":26:23)
#loc12 = loc("/root/miniconda3/envs/vllm/lib/python3.12/site-packages/triton/language/standard.py":286:36)
#loc13 = loc("/home/meiziyuan/triton/test_vdot.py":26:17)
#loc14 = loc("/root/miniconda3/envs/vllm/lib/python3.12/site-packages/triton/language/standard.py":256:15)
#loc15 = loc("/home/meiziyuan/triton/test_vdot.py":27:27)
#loc16 = loc("/home/meiziyuan/triton/test_vdot.py":27:4)
#loc17 = loc(callsite(#loc12 at #loc13))
#loc18 = loc(callsite(#loc14 at #loc12))
#loc19 = loc(callsite(#loc18 at #loc13))


// -----// IR Dump Before LLVMDIScope (enable-line-info) ('builtin.module' operation) //----- //
#loc = loc("/home/meiziyuan/triton/test_vdot.py":10:0)
module attributes {ttg.global_scratch_memory_alignment = 1 : i32, ttg.global_scratch_memory_size = 0 : i32, "ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.shared = 0 : i32, ttg.target = "cuda:90", ttg.tensor_memory_size = 0 : i32, "ttg.threads-per-warp" = 32 : i32, "ttg.total-num-warps" = 4 : i32} {
  llvm.mlir.global external @global_smem() {addr_space = 3 : i32, alignment = 16 : i64} : !llvm.array<0 x i8> loc(#loc)
  llvm.func @dot_kernel(%arg0: !llvm.ptr<1> {tt.divisibility = 16 : i32} loc("/home/meiziyuan/triton/test_vdot.py":10:0), %arg1: !llvm.ptr<1> {tt.divisibility = 16 : i32} loc("/home/meiziyuan/triton/test_vdot.py":10:0), %arg2: !llvm.ptr<1> {tt.divisibility = 16 : i32} loc("/home/meiziyuan/triton/test_vdot.py":10:0), %arg3: i32 loc("/home/meiziyuan/triton/test_vdot.py":10:0), %arg4: !llvm.ptr<1> loc("/home/meiziyuan/triton/test_vdot.py":10:0)) attributes {noinline = false, nvvm.kernel = 1 : ui1, nvvm.reqntid = array<i32: 128>, ttg.global_scratch_memory_alignment = 1 : i32, ttg.global_scratch_memory_size = 0 : i32} {
    %0 = llvm.mlir.constant(-1 : i32) : i32 loc(#loc1)
    %1 = llvm.mlir.constant(31 : i32) : i32 loc(#loc1)
    %2 = llvm.mlir.constant(16 : i32) : i32 loc(#loc1)
    %3 = llvm.mlir.constant(8 : i32) : i32 loc(#loc1)
    %4 = llvm.mlir.constant(4 : i32) : i32 loc(#loc1)
    %5 = llvm.mlir.constant(2 : i32) : i32 loc(#loc1)
    %6 = llvm.mlir.constant(1 : i32) : i32 loc(#loc1)
    %7 = llvm.mlir.constant(0 : i32) : i32 loc(#loc1)
    %8 = llvm.mlir.constant(0 : index) : i32 loc(#loc1)
    %9 = llvm.mlir.constant(true) : i1 loc(#loc1)
    %10 = llvm.mlir.constant(32 : i32) : i32 loc(#loc1)
    %11 = llvm.call_intrinsic "llvm.nvvm.read.ptx.sreg.ctaid.x"() : () -> i32 loc(#loc2)
    %12 = llvm.mul %11, %10 : i32 loc(#loc3)
    %13 = nvvm.read.ptx.sreg.tid.x : i32 loc(#loc4)
    %14 = llvm.urem %13, %10 : i32 loc(#loc4)
    %15 = llvm.and %14, %6 : i32 loc(#loc4)
    %16 = llvm.icmp "eq" %15, %7 : i32 loc(#loc4)
    %17 = llvm.select %16, %7, %6 : i1, i32 loc(#loc4)
    %18 = llvm.xor %7, %17 : i32 loc(#loc4)
    %19 = llvm.and %14, %5 : i32 loc(#loc4)
    %20 = llvm.icmp "eq" %19, %7 : i32 loc(#loc4)
    %21 = llvm.select %20, %7, %5 : i1, i32 loc(#loc4)
    %22 = llvm.xor %18, %21 : i32 loc(#loc4)
    %23 = llvm.and %14, %4 : i32 loc(#loc4)
    %24 = llvm.icmp "eq" %23, %7 : i32 loc(#loc4)
    %25 = llvm.select %24, %7, %4 : i1, i32 loc(#loc4)
    %26 = llvm.xor %22, %25 : i32 loc(#loc4)
    %27 = llvm.and %14, %3 : i32 loc(#loc4)
    %28 = llvm.icmp "eq" %27, %7 : i32 loc(#loc4)
    %29 = llvm.select %28, %7, %3 : i1, i32 loc(#loc4)
    %30 = llvm.xor %26, %29 : i32 loc(#loc4)
    %31 = llvm.and %14, %2 : i32 loc(#loc4)
    %32 = llvm.icmp "eq" %31, %7 : i32 loc(#loc4)
    %33 = llvm.select %32, %7, %2 : i1, i32 loc(#loc4)
    %34 = llvm.xor %30, %33 : i32 loc(#loc4)
    %35 = llvm.xor %34, %7 : i32 loc(#loc4)
    %36 = llvm.add %35, %8 : i32 loc(#loc4)
    %37 = llvm.add %12, %36 : i32 loc(#loc5)
    %38 = llvm.icmp "slt" %37, %arg3 : i32 loc(#loc6)
    %39 = llvm.getelementptr %arg0[%37] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, f32 loc(#loc7)
    %40 = llvm.inline_asm has_side_effects asm_dialect = att operand_attrs = [] "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b" %39, %38 : (!llvm.ptr<1>, i1) -> i32 loc(#loc8)
    %41 = llvm.bitcast %40 : i32 to vector<1xf32> loc(#loc8)
    %42 = llvm.extractelement %41[%8 : i32] : vector<1xf32> loc(#loc8)
    %43 = llvm.getelementptr %arg1[%37] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, f32 loc(#loc9)
    %44 = llvm.inline_asm has_side_effects asm_dialect = att operand_attrs = [] "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b" %43, %38 : (!llvm.ptr<1>, i1) -> i32 loc(#loc10)
    %45 = llvm.bitcast %44 : i32 to vector<1xf32> loc(#loc10)
    %46 = llvm.extractelement %45[%8 : i32] : vector<1xf32> loc(#loc10)
    %47 = llvm.fmul %42, %46 : f32 loc(#loc11)
    %48 = llvm.bitcast %47 : f32 to i32 loc(#loc17)
    %49 = nvvm.shfl.sync  bfly %0, %48, %2, %1 : i32 -> i32 loc(#loc17)
    %50 = llvm.bitcast %49 : i32 to f32 loc(#loc17)
    %51 = llvm.fadd %47, %50 : f32 loc(#loc19)
    %52 = llvm.bitcast %51 : f32 to i32 loc(#loc17)
    %53 = nvvm.shfl.sync  bfly %0, %52, %3, %1 : i32 -> i32 loc(#loc17)
    %54 = llvm.bitcast %53 : i32 to f32 loc(#loc17)
    %55 = llvm.fadd %51, %54 : f32 loc(#loc19)
    %56 = llvm.bitcast %55 : f32 to i32 loc(#loc17)
    %57 = nvvm.shfl.sync  bfly %0, %56, %4, %1 : i32 -> i32 loc(#loc17)
    %58 = llvm.bitcast %57 : i32 to f32 loc(#loc17)
    %59 = llvm.fadd %55, %58 : f32 loc(#loc19)
    %60 = llvm.bitcast %59 : f32 to i32 loc(#loc17)
    %61 = nvvm.shfl.sync  bfly %0, %60, %5, %1 : i32 -> i32 loc(#loc17)
    %62 = llvm.bitcast %61 : i32 to f32 loc(#loc17)
    %63 = llvm.fadd %59, %62 : f32 loc(#loc19)
    %64 = llvm.bitcast %63 : f32 to i32 loc(#loc17)
    %65 = nvvm.shfl.sync  bfly %0, %64, %6, %1 : i32 -> i32 loc(#loc17)
    %66 = llvm.bitcast %65 : i32 to f32 loc(#loc17)
    %67 = llvm.fadd %63, %66 : f32 loc(#loc19)
    %68 = llvm.udiv %13, %10 : i32 loc(#loc15)
    %69 = llvm.and %14, %0 : i32 loc(#loc15)
    %70 = llvm.icmp "eq" %69, %7 : i32 loc(#loc15)
    %71 = llvm.and %68, %0 : i32 loc(#loc15)
    %72 = llvm.icmp "eq" %71, %7 : i32 loc(#loc15)
    %73 = llvm.and %70, %72 : i1 loc(#loc15)
    %74 = llvm.and %7, %0 : i32 loc(#loc15)
    %75 = llvm.icmp "eq" %74, %7 : i32 loc(#loc15)
    %76 = llvm.and %73, %75 : i1 loc(#loc15)
    %77 = llvm.and %76, %9 : i1 loc(#loc15)
    %78 = llvm.inline_asm has_side_effects asm_dialect = att operand_attrs = [] "mov.u32 $0, 0x0;\0A\09@$3 atom.global.gpu.acq_rel.add.f32 $0, [ $1 + 0 ], $2;", "=r,l,r,b" %arg2, %67, %77 : (!llvm.ptr<1>, f32, i1) -> f32 loc(#loc15)
    llvm.return loc(#loc16)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/home/meiziyuan/triton/test_vdot.py":19:24)
#loc3 = loc("/home/meiziyuan/triton/test_vdot.py":20:19)
#loc4 = loc("/home/meiziyuan/triton/test_vdot.py":20:45)
#loc5 = loc("/home/meiziyuan/triton/test_vdot.py":20:32)
#loc6 = loc("/home/meiziyuan/triton/test_vdot.py":21:20)
#loc7 = loc("/home/meiziyuan/triton/test_vdot.py":23:28)
#loc8 = loc("/home/meiziyuan/triton/test_vdot.py":23:18)
#loc9 = loc("/home/meiziyuan/triton/test_vdot.py":24:32)
#loc10 = loc("/home/meiziyuan/triton/test_vdot.py":24:20)
#loc11 = loc("/home/meiziyuan/triton/test_vdot.py":26:23)
#loc12 = loc("/root/miniconda3/envs/vllm/lib/python3.12/site-packages/triton/language/standard.py":286:36)
#loc13 = loc("/home/meiziyuan/triton/test_vdot.py":26:17)
#loc14 = loc("/root/miniconda3/envs/vllm/lib/python3.12/site-packages/triton/language/standard.py":256:15)
#loc15 = loc("/home/meiziyuan/triton/test_vdot.py":27:27)
#loc16 = loc("/home/meiziyuan/triton/test_vdot.py":27:4)
#loc17 = loc(callsite(#loc12 at #loc13))
#loc18 = loc(callsite(#loc14 at #loc12))
#loc19 = loc(callsite(#loc18 at #loc13))


